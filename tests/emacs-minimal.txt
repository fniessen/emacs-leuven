#+TITLE:     Minimal .emacs
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil

#+PROPERTY:  header-args :eval no

#+SETUPFILE: ~/org/theme-readtheorg.setup

* Example
:PROPERTIES:
:header-args: :tangle ../.emacs.d/emacs-minimal.el
:END:

The usual method to find a problem while avoiding to disturb a running Emacs
instance is to run a separate Emacs in batch mode: that will avoid any
conflicts with the running instance.

But =batch= implies =-q=, so you will have to provide a minimal =.emacs= file that
sets up enough structure to enable you to do what you want, *without any of
your customizations*.

Here is such a minimal Emacs config file.

** Header

#+begin_src emacs-lisp
;;; emacs-minimal --- Minimal configuration file for Emacs

;;; Commentary:

;;; Code:

(message "Loading Minimal Emacs...")

(defconst em/emacs-load-time-start (float-time))
#+end_src

** Constant part

#+begin_src emacs-lisp
;;* --[ Constant part ]-------------------------------------------------------

;; Activate debugging.
(setq debug-on-error t)
(setq debug-on-quit t)

;; Default values for frame creation.
(setq default-frame-alist '((tool-bar-lines . 0)))

;; Title bar display of visible frames.
(setq frame-title-format
      (format "Minimal %s Emacs %s%s of %s - PID: %d"
              (capitalize (symbol-name system-type))
              emacs-version
              (if (and (boundp 'emacs-repository-version)
                       emacs-repository-version)
                  (concat " (r"
                          (replace-regexp-in-string " .*" ""
                                                    emacs-repository-version)
                          ")")
                "")
              (format-time-string "%Y-%m-%d" emacs-build-time)
              (emacs-pid)))

;; Allow input of accented characters (for terminals that use 8-bit charsets).
(set-input-mode nil nil 1)

;; Enable visualization of matching parens.
(require 'paren)
(show-paren-mode 1)
(setq show-paren-style 'mixed)
(setq show-paren-ring-bell-on-mismatch t)

;; No limit when printing values.
(setq eval-expression-print-length nil)
(setq eval-expression-print-level nil)

;; Don't display the "Welcome to GNU Emacs" buffer on startup.
(setq inhibit-startup-screen t)

;; Initial message displayed in *scratch* buffer at startup.
(setq initial-scratch-message
      ";;----------------------------------------------------------------------
;; This is Emacs running with a minimal configuration file.
;;----------------------------------------------------------------------

")
#+end_src

#+begin_src emacs-lisp
(defun try-require (feature)
  "Attempt to load a FEATURE (or library).
    Return true if the library given as argument is successfully loaded.  If
    not, just print a message."
  (condition-case err
      (progn
        (if (stringp feature)
            (load-library feature)
          (require feature))
        t)                              ; Necessary for correct behavior in
                                        ; conditional expressions.
    (file-error
     (message "Requiring `%s'... missing" feature)
     nil)))
#+end_src

#+begin_src emacs-lisp
;; Org-mode (reverse order, so that the Org lisp directory will be found
;; before the Org contrib lisp directory).
;; (add-to-list 'load-path "~/Public/Repositories/org-mode/testing")
;; (add-to-list 'load-path "~/Public/Repositories/org-mode/contrib/lisp") ; htmlize
(add-to-list 'load-path "~/Public/Repositories/org-mode/lisp")
                                        ; Modify the paths to suit your
                                        ; environment!

;; Getting started.
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)\\'" . org-mode))
(when (locate-library "org-loaddefs")
  (require 'org-loaddefs))

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Variable part
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp :tangle ../.emacs.d/emacs-minimal.el
;;* --[ Variable part Under Test ]--------------------------------------------
#+end_src

*** Sandbox

#+begin_src emacs-lisp :tangle ../.emacs.d/emacs-minimal.el
;; Place your test code here.

#+end_src

*** Test if function is defined

#+begin_src emacs-lisp
(message "defined? %S" (functionp (quote org-babel-do-load-languages)))
#+end_src

*** Eval-after-load eval'ed twice

**** Minimal display

You can see the problem by running the following code:

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (message "LOADED org.el")
  (sit-for 1.5)
  (message ""))
#+end_src

**** Backtraces

You can *get backtraces* at each stopping point by Edebugging =foobar= and
=C-x C-f foo.org=:

#+begin_src emacs-lisp
(defun foobar ()
  (message "LOADED org.el")
  (sit-for 1.5)
  (message ""))

(setq org-load-hook (function foobar))
#+end_src

*** Test export to HTML

#+begin_src emacs-lisp
(let ((org-confirm-babel-evaluate nil)) ; Preference over the explicit setq.
  (find-file "file-to-export.org")
  (org-export-as-html 3))
#+end_src

*** Org-test

#+begin_src emacs-lisp
;; Change the pathname appropriately!
(add-to-list 'load-path (expand-file-name "~/Public/Repositories/org-mode/testing"))
(load-library "org-test")
#+end_src

**** Create a new test case

#+begin_src emacs-lisp
(ert-deftest test-org/end-of-line ()
  "Test `org-end-of-line' specifications."
  ;; At an headline without special movement.
  (should
   (org-test-with-temp-text "* Headline2 :tag:\n"
     (let ((org-special-ctrl-a/e nil))
       (and (progn
              (message "FOO")
              (org-end-of-line)
              (message (format "%d" (point)))
              (eolp))
            (progn
              (org-end-of-line)
              (eolp)))))))

(ert 'test-org/end-of-line)
#+end_src

**** Run an existing test

#+begin_src emacs-lisp
;; Change the pathname appropriately!
(add-to-list 'load-path (expand-file-name "~/Public/Repositories/org-mode/testing/lisp"))
(load-library "test-org")
(ert-run-tests-batch-and-exit 'test-org/end-of-line)
#+end_src

*** ELP

#+begin_src emacs-lisp
;; (setq org-babel-load-languages '((emacs-lisp . t) (latex . t)))
;; (setq org-confirm-babel-evaluate nil)

(require 'org)
(require 'org-agenda)
(require 'outline)
(require 'font-lock)
(require 'flyspell)
(require 'ispell)
(require 'calendar)
(require 'cal-iso)
(require 'diary-lib)

;; Profile some times... CAUTION: require the packages first (to get results)!
;; (elp-instrument-list '(org-agenda-next-line next-line line-move))
(when (require 'elp)
  ;; The most important ones.
  (elp-instrument-package "org")
  (elp-instrument-package "org-agenda")
  (elp-instrument-package "outline")
  (elp-instrument-package "font-lock")
  (elp-instrument-package "flyspell")
  (elp-instrument-package "ispell")
  (elp-instrument-package "emacs-leuven")
  (elp-instrument-package "calendar")
  (elp-instrument-package "cal-iso")
  (elp-instrument-package "diary-lib")

  (global-set-key (kbd "C-c e") 'elp-results))

;; Improve readability of profile results, give milliseconds.
(defun elp-pack-number (number width)
  (format (concat "%" (number-to-string (- width 3)) ".2f")
          (* 100 (string-to-number number))))

(setq org-agenda-files '("~/org/tests/org-test.txt"))
#+end_src

** Footer

#+begin_src emacs-lisp :tangle ../.emacs.d/emacs-minimal.el
;;* --[ Constant part ]-------------------------------------------------------

(message "Loading Minimal Emacs... Done (in %.2f s)"
         (- (float-time) em/emacs-load-time-start))

(provide 'emacs-minimal)

;;; emacs-minimal.el ends here
#+end_src

* One-liners

** ELP

#+begin_src shell
emacs -Q --batch -L ~/Public/Repositories/org-mode/lisp \
    --eval '(elp-instrument-package "org")' 400.org --eval '(elp-results)'
#+end_src

#+results:
| Function                                           |       Name |         Call |        Count | Elapsed | Time | Average | Time |
| ================================================== | ========== | ============ | ============ |         |      |         |      |
| org-mode                                           |          1 |     0.229874 |     0.229874 |         |      |         |      |
| org-load-modules-maybe                             |          1 |    0.1692817 |    0.1692817 |         |      |         |      |
| org-setup-filling                                  |          1 | 0.0599618999 | 0.0599618999 |         |      |         |      |
| org-add-link-type                                  |          8 |    0.0003198 | 3.997...e-05 |         |      |         |      |
| org-make-link-regexps                              |          8 | 0.0002512999 | 3.141...e-05 |         |      |         |      |
| org-macro-initialize-templates                     |          1 |    0.0001151 |    0.0001151 |         |      |         |      |
| org-set-regexps-and-options                        |          1 | 9.409...e-05 | 9.409...e-05 |         |      |         |      |
| org-install-agenda-files-menu                      |          1 | 9.280...e-05 | 9.280...e-05 |         |      |         |      |
| org-set-startup-visibility                         |          1 |     7.36e-05 |     7.36e-05 |         |      |         |      |
| org-overview                                       |          1 |     2.05e-05 |     2.05e-05 |         |      |         |      |
| org-set-regexps-and-options-for-tags               |          1 | 1.930...e-05 | 1.930...e-05 |         |      |         |      |
| org-update-radio-target-regexp                     |          1 | 1.749...e-05 | 1.749...e-05 |         |      |         |      |
| org-find-invisible-foreground                      |          1 |     1.66e-05 |     1.66e-05 |         |      |         |      |
| org-add-hook                                       |          5 |     1.27e-05 | 2.540...e-06 |         |      |         |      |
| org-cycle-hide-archived-subtrees                   |          1 |      1.2e-05 |      1.2e-05 |         |      |         |      |
| org-babel-hide-all-hashes                          |          1 | 1.069...e-05 | 1.069...e-05 |         |      |         |      |
| org-cycle-show-empty-lines                         |          1 |     1.03e-05 |     1.03e-05 |         |      |         |      |
| org-set-font-lock-defaults                         |          1 | 9.000...e-06 | 9.000...e-06 |         |      |         |      |
| org-make-options-regexp                            |          2 |      6.9e-06 |     3.45e-06 |         |      |         |      |
| org-set-visibility-according-to-property           |          1 | 6.399...e-06 | 6.399...e-06 |         |      |         |      |
| org-extract-log-state-settings                     |          2 | 6.000...e-06 | 3.000...e-06 |         |      |         |      |
| org-remove-if                                      |          1 | 5.499...e-06 | 5.499...e-06 |         |      |         |      |
| org-setup-comments-handling                        |          1 | 5.200...e-06 | 5.200...e-06 |         |      |         |      |
| org-all-targets                                    |          1 | 5.100...e-06 | 5.100...e-06 |         |      |         |      |
| org-hide-archived-subtrees                         |          1 | 4.699...e-06 | 4.699...e-06 |         |      |         |      |
| org-assign-fast-keys                               |          1 | 4.699...e-06 | 4.699...e-06 |         |      |         |      |
| org-cycle-hide-drawers                             |          1 | 4.699...e-06 | 4.699...e-06 |         |      |         |      |
| org-macro--collect-macros                          |          1 | 4.300...e-06 | 4.300...e-06 |         |      |         |      |
| org-defvaralias                                    |          1 | 2.500...e-06 | 2.500...e-06 |         |      |         |      |
| org-compute-latex-and-related-regexp               |          1 | 2.099...e-06 | 2.099...e-06 |         |      |         |      |
| org-agenda-files                                   |          1 |      1.7e-06 |      1.7e-06 |         |      |         |      |
| org-babel-result-hide-spec                         |          1 |      1.3e-06 |      1.3e-06 |         |      |         |      |
| org-delete-all                                     |          1 | 1.199...e-06 | 1.199...e-06 |         |      |         |      |
| org-restart-font-lock                              |          1 | 8.999...e-07 | 8.999...e-07 |         |      |         |      |
| org-make-target-link-regexp                        |          1 | 4.999...e-07 | 4.999...e-07 |         |      |         |      |

* Script

** From the man page

- =-q=, =--no-init-file= ::
     Do not load an init file.

- =--no-site-file= ::
     Do not load the site-wide startup file.

- =-Q=, =--quick= ::
     Similar to =-q --no-site-file --no-splash=.

     *Ignore any configuration* ensuring a vanilla Emacs instance is used.

- =--batch= ::
     Run Emacs in "batch" mode with *no GUI* and *termination after execution*.

     The editor will send messages to stderr.

     You must use =-l= and =-f= options to specify files to execute and functions
     to call.

** Ideal

*Some code must be used in the ~.emacs~ file (or libraries loaded FROM it).*

For example:

#+begin_src emacs-lisp
  ;; Major mode command symbol to use for the initial `*scratch*' buffer.
  (setq initial-major-mode 'fundamental-mode)
#+end_src

Otherwise, =*scratch*= will already have been created, in the default major
mode.

So, ideally, when testing a minimal Emacs configuration file, we should
replace the ~.emacs~ file.

What we *could* do, is set =HOME= to a different value just for Emacs, but that's
not recommended, because it could mess up external programs that Emacs calls.
And _because_ Emacs relies so much on external programs, notably the shell,
changing =HOME= for Emacs is a very bad idea. WE DON'T DO THAT!!

** emacs-helm.sh (from Thierry Volpiatto)

#+begin_verse
> I was too lazy to test with emacs -Q before.

=emacs-helm.sh= is for that, I am too lazy too to use emacs -Q ;-)
#+end_verse

If ~emacs~ is pointing to an Emacs executable which is not fully working, you can
use the ~-P~ option of =emacs-helm.sh= to use another Emacs executable file.

** Code

*Call this script emacs-q?*

#+begin_src shell :tangle ../bin/emacs-minimal :padline no :shebang #!/bin/sh
TESTEL=
TESTFILE=~/test.el
if test -e $TESTFILE # file exists
then
    TESTEL="-l $TESTFILE"
fi

EMACS="emacs"

# No init file.
cmd="$EMACS -q -l ~/.emacs.d/emacs-minimal.el $TESTEL"

echo "Launching '$cmd'..."
eval "$cmd"

echo "Exit status: $?"
#+end_src

#+begin_src shell
alias em=emacs-minimal
#+end_src
