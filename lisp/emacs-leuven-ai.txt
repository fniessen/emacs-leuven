# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Emacs-Leuven-AI
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:  emacs, dotfile, config
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+EXCLUDE_TAGS: noexport

#+PROPERTY:  header-args :eval never :padline yes :tangle yes

#+SETUPFILE: ~/org/theme-readtheorg.setup

#+begin_src emacs-lisp
;; Require a feature/library if available; if not, fail silently.
(unless (fboundp 'try-require)
  (defun try-require (feature)
    "Attempt to load FEATURE, returning t on success or nil on failure.
FEATURE should be a symbol representing an Emacs library or feature.
On failure, issue a warning with the error details."
    (condition-case err
        (progn
          (require feature)
          t)                          ; Return t for success in conditionals.
      (error
       (display-warning 'eboost
                        (format "Failed to load feature `%s': %s"
                                feature
                                (error-message-string err))
                        :warning)
       nil))))
#+end_src

* Integrating AI tools into Emacs

*************** TODO Research ChatGPT integration with Emacs
- [ ] Evaluate gptel package
- [ ] Test c3po integration (recommended)
- [ ] Evaluate org-ai package
- [ ] Review CodeGPT capabilities
- [ ] Explore [[GitHub:ai-boost/awesome-prompts][Awesome Prompts Collection]]

References:
- [[YouTube:H8jvhz0CGzU][Boost your Emacs productivity with ChatGPT and Copilot]]
- https://www.armindarvish.com/post/use_emacs_as_a_chatgpt_client/
*************** END

#+begin_src emacs-lisp
;; Set OpenAI API key.
(defvar eboost-openai-api-key
  (let* ((api-key (or (getenv "OPENAI_API_KEY")
                      (when (file-exists-p (expand-file-name "~/.openai_api_key"))
                        (with-temp-buffer
                          (insert-file-contents (expand-file-name "~/.openai_api_key"))
                          (string-trim (buffer-string))))))
         (trimmed-api-key (string-trim api-key)))
    (if (and trimmed-api-key (not (string-empty-p trimmed-api-key)))
        (progn
          (message "[OpenAI API key successfully loaded.]")
          trimmed-api-key)
      (display-warning 'eboost
                       "No valid OpenAI API key found!"
                       :warning)))
  "Load OpenAI API key from environment variable or file.")
#+end_src

** GPTel

Usage:
- ~M-x gptel-send~ (or ~C-c RET~) :: Send the buffer up to point (or active region)
  as prompt to the AI and insert the result below.
- ~C-u M-x gptel-send~ (or ~C-u C-c RET~) :: Set LLM and input/output options (such
  as "system message") before sending prompt.
- ~M-x gptel~ :: Open a dedicated chat buffer.
- ~C-u M-x gptel~ :: Open a second dedicated chat buffer.
- gptel-mode to restore the rigth mode for a saved chat.
- gptel-abort :: Cancel query in progress.
- gptel-menu :: Direct access to menu.
- gptel-set-topic :: Limit context by Org header.
- ~gptel-add-file~
- ~gptel-add~ → Add to context DWIM
- ~gptel-make-preset~
- ~gptel-make-tool~
- ~gptel-org-set-properties~
- ~gptel-org-set-topic~
- ~gptel-rewrite~
- ~gptel-rewrite~

Inside a gptel buffer:

- ~C-u C-x RET~ or ~gptel-menu~ → Menu

*** Basic configuration

#+begin_src emacs-lisp
;; Load gptel.
(when (try-require 'gptel)
#+end_src

*** Core GPTel settings

#+begin_src emacs-lisp
  ;; Set OpenAI API key.
  (when (boundp 'eboost-openai-api-key)
    (setq gptel-api-key eboost-openai-api-key))

  ;; Controls randomness (lower = more deterministic).
  (setq gptel-temperature 0.7)

  ;; Limit response length.
  (setq gptel-max-tokens 1000)

  ;; Set default mode for response buffer.
  (setq gptel-default-mode 'org-mode)
#+end_src

*** Display formatting configuration

#+begin_src emacs-lisp
  (defvar eboost-gptel-prompt-prefix "** --- User prompt ---\n\n"
    "Custom prompt prefix for GPTel in Org mode.")

  (defvar eboost-gptel-response-prefix "** --- AI response ---\n\n"
    "Custom response prefix for GPTel in Org mode.")

  ;; Association list mapping modes to prompt prefixes for GPTel.
  (add-to-list 'gptel-prompt-prefix-alist
               `(org-mode . ,eboost-gptel-prompt-prefix))

  ;; Association list mapping modes to response prefixes for GPTel.
  (add-to-list 'gptel-response-prefix-alist
               `(org-mode . ,eboost-gptel-response-prefix))
#+end_src

*** Hooks / post-response handlers

#+begin_src emacs-lisp
  ;; Add auto-scrolling after GPTel stream ends.
  (add-hook 'gptel-post-stream-hook #'gptel-auto-scroll)

  ;; Automatically move cursor to end of response.
  (add-hook 'gptel-post-response-functions #'gptel-end-of-response)
#+end_src

*** Presets configuration

How to use them: =C-u M-x gptel-send=.

- Optimized for coding tasks, such as writing, refactoring, or explaining code.
- Designed for proofreading and improving text, such as fixing spelling,
  grammar, or style.
- A versatile preset for general conversations or ad-hoc queries with an LLM.
- Tailored for per-project workflows, such as analyzing code or documentation in
  a specific project directory.

#+begin_src emacs-lisp
  ;; Coding preset.
  (gptel-make-preset 'gpt4coding
    :description "A preset optimized for coding tasks"
    :backend "ChatGPT"
    :model 'gpt-4.1-mini
    :system
    "You are an expert coding assistant. Your role is to provide
   high-quality code solutions, refactorings, and explanations."
    :tools '("read_buffer" "modify_buffer")
    :temperature 0.7)

  ;; Proofreading Preset.
  (gptel-make-preset 'proofreading
    :description "Preset for proofreading tasks"
    :backend "Claude"
    :model 'claude-sonnet-4-20250514
    :system
    "You are a professional proofreader. Your task is to correct spelling,
   grammar, and improve clarity and style."
    :tools '("read_buffer" "spell_check" "grammar_check")
    :temperature 0.7)

  ;; General-purpose chat preset.
  (gptel-make-preset 'general-chat
    :description "A preset for general-purpose LLM interactions"
    :backend "ChatGPT"
    :model 'o4-mini
    :system
    "You are a helpful assistant providing clear and concise answers to a
   wide range of questions."
    :temperature 0.9)

  ;; Project-specific preset (within '.dir-locals.el').
  (gptel-make-preset 'project-agent
    :description "Preset for project-specific AI tasks"
    :backend "Claude"
    :model 'claude-sonnet-4-20250514
    :system
    "You are an AI assistant for a software project. Provide insights
   based on the project's code and documentation."
    :tools '("read_buffer" "lsp_context"))
#+end_src

*** Custom functions

**** Intégration Org-mode

#+begin_src emacs-lisp
  ;; Org-mode specific integration.
  (defun eboost-org-gptel-send-to-chatgpt ()
    "Send selected region or Org subtree to the *ChatGPT* buffer.
    If a region is selected, send its text; otherwise, send the content of the Org subtree.
    Displays the response in the *ChatGPT* buffer."
    (interactive)

    ;; Validate context.
    (unless (or (use-region-p) (org-at-heading-p))
      (user-error "Please place point on an Org heading or select a region"))

    ;; Extract text.
    (let ((text
           (if (use-region-p)
               (buffer-substring-no-properties (region-beginning) (region-end))
             (save-excursion
               (org-back-to-heading t)
               (let ((beg (point))
                     (end (org-end-of-subtree t) (point)))
                 (buffer-substring-no-properties beg end))))))

      ;; Prepare output buffer.
      (let ((buffer (get-buffer-create "*ChatGPT*")))
        (with-current-buffer buffer
          (goto-char (point-max))
          (insert
           (format-time-string "\n\n* -------------------- GPT Session [%Y-%m-%d %H:%M] --------------------")
           "\n\n" eboost-gptel-prompt-prefix
           text
           "\n\n" eboost-gptel-response-prefix)
          (goto-char (point-max))

          ;; Send to GPTel with error handling.
          (condition-case err
              ;; (gptel-send)
              (gptel-request text :buffer buffer)
            (error
             (message "[Failed to send text to GPTel: %s]"
                      (error-message-string err)))))

        ;; Display the buffer and provide user feedback.
        (pop-to-buffer buffer)
        (message "[GPTel: Prompt sent. Awaiting response...]"))))

  ;; Org mode keybinding.
  (with-eval-after-load 'org
    (let ((existing-binding (lookup-key org-mode-map (kbd "C-c q"))))
      (if (or (null existing-binding) (numberp existing-binding))
          (define-key org-mode-map (kbd "C-c q") #'eboost-org-gptel-send-to-chatgpt)
        (display-warning 'eboost
                         "Keybinding C-c q is already in use in Org mode!"
                         :warning))))
#+end_src

**** Commit message generator

#+begin_src emacs-lisp
  (defun eboost-gptel-send-diff-for-commit-msg ()
    "Send current region or buffer as a diff to GPT for a commit message.
  Does not show GPTel menu; opens result in a new buffer and adds it to the kill ring."
    (interactive)
    (let* ((diff-text (if (use-region-p)
                          (buffer-substring-no-properties (region-beginning) (region-end))
                        (buffer-string)))
           (prompt (concat "Write a concise git commit message for the following diff:\n\n"
                           diff-text)))
      ;; Notify user that the process has started.
      (message "[Generating commit message...]")
      ;; Create and clear the buffer initially.
      (with-current-buffer (get-buffer-create "*Commit Message*")
        (erase-buffer))
      ;; Send request without menu.
      (gptel-request prompt
        :callback (lambda (response _error)
                    (let ((output-buffer (get-buffer-create "*Commit Message*")))
                                          ; Create a new reference to the buffer
                                          ; to avoid closure dependency.
                      (with-current-buffer output-buffer
                        (erase-buffer)
                        (if response
                            (progn
                              (let ((trimmed-response (string-trim response)))
                                (kill-new trimmed-response) ; Add to kill ring.
                                (insert trimmed-response)
                                (goto-char (point-min))
                                (message "[Commit message generated and copied to kill ring.]")))
                          (message "[Failed to generate commit message.]"))
                        (display-buffer output-buffer)))))))

  ;; Diff mode keybinding.
  (with-eval-after-load 'diff-mode
    (define-key diff-mode-map (kbd "m") 'eboost-gptel-send-diff-for-commit-msg))
  (global-set-key (kbd "C-x v m") 'eboost-gptel-send-diff-for-commit-msg)
#+end_src

*** Keybindings

#+begin_src emacs-lisp
  ;; Unbind `C-c RET' in Org mode.
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c RET") nil))

  ;; Keybinding for quick access to gptel-send.
  (global-set-key (kbd "C-c RET") 'gptel-send)
#+end_src

#+begin_src emacs-lisp
)
#+end_src

** Org-ai

#+begin_src emacs-lisp
;; Load org-ai.
(when (try-require 'org-ai)

  ;; Enable org-ai-mode in Org mode.
  (add-hook 'org-mode-hook #'org-ai-mode)

  ;; Set OpenAI API key.
  (when (boundp 'eboost-openai-api-key)
    (setq org-ai-openai-api-key eboost-openai-api-key)
    (setq org-ai-openai-api-token eboost-openai-api-key))

  ;; Install YASnippet templates for org-ai.
  (when (try-require 'yasnippet)
    (org-ai-install-yasnippets)))
#+end_src

The package whisper.el is needed for transcribing speech.

* Leuven

#+begin_src emacs-lisp
(message "* --[ Loaded Emacs-Leuven AI %s]--" lvn--emacs-version)
#+end_src

** Feature

#+begin_src emacs-lisp
(provide 'emacs-leuven-ai)

;;; emacs-leuven-ai.el ends here
#+end_src

# emacs-leuven-ai.txt ends here
