# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Org customized views
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil

#+PROPERTY:  header-args :tangle org-leuven-agenda-views.el :padline yes :eval no

#+SETUPFILE: ~/org/theme-readtheorg.setup

At the beginning, we've put way too many tasks either as scheduled or deadline
because the unique interaction with Org mode was via the agenda view, and we
did not want to loose some tasks out of our view.

When we add more consolidated views (multi-blocks), we gain confidence that we
won't loose tasks (together with reviews), and we're finally able to use
deadline and scheduled for what they're meant.

#+begin_src emacs-lisp
;; Custom commands for the agenda -- start with a clean slate.
(setq org-agenda-custom-commands nil)
#+end_src

* Key bindings

#+begin_src emacs-lisp
;;; org-leuven-agenda-views.el --- Org customized views

;;; Commentary:

;;; Code:

(require 'org-agenda)

;; Open up the Tasks.
(global-set-key
 (kbd "C-c T") (kbd "C-c a f . / RET"))

;; Display the calendar and tasks for today.
(global-set-key
 (kbd "<f7>") (kbd "C-c a f ."))

;; Display the hotlist.
(global-set-key
 (kbd "<S-f7>") (kbd "C-c a f h"))

;; Display calendar for 7 days.
(global-set-key
 (kbd "<C-f7>") (kbd "C-c a r c 7"))

(defconst leuven-org-completed-date-regexp
  (concat " \\("
          "CLOSED: \\[%Y-%m-%d"
          "\\|"
          "- State \"\\(DONE\\|CANX\\)\" * from .* \\[%Y-%m-%d"
          "\\|"
          "- State .* ->  *\"\\(DONE\\|CANX\\)\" * \\[%Y-%m-%d"
          "\\) ")
  "Matches any completion time stamp.")
#+end_src

* Description

A *scheduled* date is a *start date*.

A *deadline* is a ultimate finish date. It can have a custom *reminder* to receive
alerts for approaching due dates (in the *warning period*); it /must be updated
every time we want to snooze the reminder/ (once a day, week, month). We can do
such an update via ~C-u C-u C-c C-d~.

Vocabulary:
- SCHEDULED = start time
- Undated items
- Planned
- Uncategorized

Tasks views:
- Active
- Starred (= with an explicit priority)
- Completed
- Due today (only today)
- Due this week (only for current week: from Monday to Sunday included)
- Late (all overdue + today)
- Assigned to me
- Created by me
- With files attached

Sorted by:
- Creation date
- Last changed (= default)
- Project
- Creator
- Deadline
- Priority
- Title

Ordered by:
- Asc
- Desc (= default)

Get your errand list for this week by filtering the agenda (for the current
week) on the ~errands~ tag.

* Getting started (with Things)

** Gather it all in one place

Each and every thing that you want to accomplish needs to end up in one place,
and that place is the *Inbox*.

It's fine if you haven't yet come up with a plan for exactly how or when you'll
do these new to-dos. What's crucial is immediately getting them off your mind
and into the Inbox to revisit later. When this becomes a reflex, it's also a lot
easier to stay focused on whatever you're doing.

Include the fun or interesting things that you'd love to do, too. If you only
add your obligations, looking over your to-dos will become a chore.

Taking a second look at all of the new to-dos in your Inbox daily is an easy yet
powerful habit that'll make you feel great. As you do this, decide when you'll
start each of them.

** Decide when to get started

There's too much for you to get done in one day, but that's no reason to
stress. If you organize your to-dos with this fact in mind, you can make it
easier to concentrate on doing what's important right now.

*Today* is the list for to-dos that you want to start before the day ends. They're
your priorities.

*Next* is home for all of the to-dos you could start at any time. It's a good
place to look when putting together your Today list, or when you've finished
everything there and you need more to do.

*Scheduled* is for to-dos that you'd like to start on a later date, either because
there's nothing you can do to start them yet, or you'd just rather be reminded
of them on a specific day.

*Maybe/Someday* is the place for to-dos that you might like to get to, but you're
not sure when. Regularly review what you've added here to decide if it's time to
act.

** Do bigger things with projects

Every so often, you'll find that something you've added to your Inbox will
actually take more than a single step to complete. When that happens, make it
a *Project* instead.

Like to-dos, there are almost always too many potential projects for you to work
on at any given time. If you're not totally committed to working on a project in
the near future, move it to Maybe/Someday. If you want to review a project to
see if it's relevant again on a later date, move it to Scheduled. If you do
these things, you'll always have a tidy, relevant list of the projects you're
devoted to right now.

Finally, if you need to get an overview of all the next actions across your
current projects, you can find them listed together in Next.

** Define yourself with areas

Projects and to-dos that support an ongoing ambition belong together in an *Area
of Responsibility*.

There's an area for every hat you wear. Stay in touch with the people you care
about by creating a *Family & Friends* area. Remember to keep an eye on your
savings for the future with a *Money* area. Encourage yourself to care for your
body and mind by maintaining a *Health* area. Tame a busy class schedule with
a *School* area. Work toward new professional heights with a *Career* area. When you
only want to see related projects and to-dos, your areas are a great place to
narrow your focus.

** Establish your daily routine

A visit with your to-dos early in the day, every day, is the best way to set
your priorities and stay on top of what matters most to you. So grab a coffee
and spend a few minutes in *Today* -- this won't take long.

First, Things shows you what's new for the day. Decide what you want to do today
and postpone the rest for later. Visualize what you'll get done and in what
order, then arrange your to-dos accordingly.

Second, if your Today list needs a bit more substance, add some to-dos. Look
over Next to get a quick overview of all of your projects and add some to-dos
from there. Or, browse your areas and projects to pick some to-dos from those.

When you take a bit of time to organize your Today list, it'll no longer seem
like each day is merely something that happens to you. Interruptions won't be so
disruptive. You'll be in control. It's a good feeling.

** A few tips before you go

The *faster* you can get new to-dos into your Inbox, the faster you can get back
to work. In Org mode, you can create a new to-do while you're working by
pressing ~C-c c t~.

Great *titles* for your to-dos make a big difference. Imagine you're in a hurry
and you create a to-do that's simply titled /Valentine's Day/. Valentine's Day
isn't really something you can /do/. You can, however, /Buy a Valentine's Day card/
or /Make a dinner reservation for Valentine's Day/. Be crystal-clear about the
real action you're going to take, so that when you see the to-do again later you
won't have to think twice about what you meant.

If you need to shorten a long list and see only the to-dos that are relevant
right this moment, use *tags*. Your tags should have an unambiguous purpose and
you should use them frequently to filter lists and see similar to-dos. For
example, /Errand/ is one of our favorites: you can use it to filter your Next list
and see everything you need to do when you're around town.

Use *due dates* sparingly, and only when a to-do has a fixed deadline. If you do
that, it'll always be obvious at a glance what /really/ requires your attention
each day. If you simply want a to-do to appear in your Today list later, move it
to the Scheduled list and set a date that way.

* Views

#+begin_src emacs-lisp
;; ;; Custom commands for the agenda -- start with a clean slate.
;; (setq org-agenda-custom-commands nil)
#+end_src

#+begin_note
Since we can easily filter by category, we can imagine that it is *useless to
sort by category*: just do ~<~ to see all the tasks of a category.
#+end_note

You should be able to work with Org items with the mapping and property APIs:

- ~(info "(org) Using the property API")~
- ~(info "(org) Using the mapping API")~

* CLARIFY

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("c" . "CLARIFY...") t)
#+end_src

** Inbox

The "inbox" typically refers to a collection of tasks that are yet to be sorted
into specific categories. It can be represented by the tasks that have
a specific tag like ~:inbox:~.

#+begin_src emacs-lisp
;; Display all tasks with the 'inbox' tag.
(add-to-list 'org-agenda-custom-commands
             `("ci" "Inbox"
               tags-todo "inbox"
               ((org-agenda-overriding-header "Inbox Tasks")))
             t)
#+end_src

* FOCUS on my active tasks

My work = tasks owned by me ("my tasks") + tasks assigned to me.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("f" . "FOCUS...") t)
#+end_src

** Today

An everyday objective should be to empty this list first, by any mean.  For
example, start /every morning/ by:

- scheduling tasks to another day if you already know it can't be completed
  before that date,

- moving tasks to ~MAYB~ if you just don't know if/when it will be completed

  #+begin_note
  This explanation assumes every task without a ~SCHEDULED~ date = ~MAYB~ task!
  #+end_note

- delegating, and

- of course completing tasks.

Completed tasks stay displayed in their own section until the end of the day,
because:

- they can be "in review" or "need verification", and
- it allows you to gain momentum while completing tasks.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("fd" "Today"
               (
                ;; Events.
                (agenda ""
                        ((org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-overriding-header
                          (concat "CALENDAR Today "
                                  (format-time-string "%a %d" (current-time))
                                  ;; #("__________________" 0 12 (face (:foreground "gray")))
                                  ))
                         (org-agenda-span 'day)))
                ;; Unscheduled new tasks (waiting to be prioritized and scheduled).
                (tags-todo "LEVEL=2"
                           ((org-agenda-overriding-header "INBOX (Unscheduled)")
                            (org-agenda-skip-function
                             '(lambda ()
                                (let ((todo-keyword (org-get-todo-state)))
                                  ;; Skip tasks with MAYB status or scheduled tasks.
                                  (when (or (equal todo-keyword "MAYB")
                                            (lvn--org-entry-is-scheduled-p))
                                    (org-end-of-subtree t)))))))
                ;; List of all TODO entries with deadline today.
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                                        ; XXX Timed deadlines NOT shown!!!
                ;; List of all TODO entries with deadline before today.
                (tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                ;; (agenda ""
                ;;         ((org-agenda-entry-types '(:deadline))
                ;;          (org-agenda-overriding-header "DUE DATES")
                ;;          (org-agenda-skip-function
                ;;           '(org-agenda-skip-entry-if 'todo 'done))
                ;;          (org-agenda-sorting-strategy
                ;;           '(priority-down time-down))
                ;;          (org-agenda-span 'day)
                ;;          (org-agenda-start-on-weekday nil)
                ;;          (org-agenda-time-grid nil)))
                (agenda ""
                        ((org-agenda-entry-types '(:scheduled))
                         (org-agenda-overriding-header "SCHEDULED")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'todo 'done))
                         (org-agenda-sorting-strategy
                          '(priority-down time-down))
                         (org-agenda-span 'day)
                         (org-agenda-start-on-weekday nil)
                         (org-agenda-time-grid nil)))
                ;; List of all TODO entries that were completed today.
                (todo "TODO|DONE|CANX"  ; Includes repeated/recurring tasks that
                                        ; were completed or cancelled (and moved
                                        ; back to TODO).
                      ((org-agenda-overriding-header "COMPLETED TODAY")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if
                          'notregexp
                          (format-time-string leuven-org-completed-date-regexp)))
                       (org-agenda-sorting-strategy '(priority-down)))))
               ((org-agenda-format-date "")
                (org-agenda-start-with-clockreport-mode nil)))
             t)

;; = (org-agenda-skip-entry-if 'scheduled)
(defun lvn--org-entry-is-scheduled-p ()
  "Return non-nil if the current Org entry has a scheduled timestamp."
  (let ((scheduled-time (org-get-scheduled-time (point))))
    (and scheduled-time t)))
#+end_src

#+begin_note
Checking that ~DEADLINE~ <>"" can be implemented by ~(org-agenda-skip-function
'(org-agenda-skip-entry-if 'notdeadline))~.

Though, we should check which one is more responsive.
#+end_note

** COMMENT 7 Days

Forecast:
- Overdue
- 7 days

Advantages of this view:

- Tasks are grouped day per day, with a custom header (today, tomorrow, then
  the real names).

Disadvantages of this view:

- Tasks with a DEADLINE and a ~-0d~ specifier are not shown!

  Maybe be we can consider that as desired: we said get that task out of my way
  for now, right?

  Note that such a task is well shown in the hotlist (example: "Noter les
  index de consommation").  A bug would be there, then!

#+begin_src emacs-lisp :tangle no
(add-to-list 'org-agenda-custom-commands
             '("f7" "7 Days"
               ((tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+1d>\""
                           ((org-agenda-overriding-header "DUE TOMORROW")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+2d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 2 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+3d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 3 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+4d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 4 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+5d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 5 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+6d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 6 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE=\"<+7d>\""
                           ((org-agenda-overriding-header
                             (upcase (format-time-string
                                      "DUE BY %a %d"
                                      (time-add (current-time)
                                                (seconds-to-time (* 7 24 60 60))))))
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))
                            (org-agenda-sorting-strategy '(priority-down))))))
             t)
#+end_src

** Work

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("W" "Work"
               ;; tags-todo "DEADLINE<=\"<+1w>\"|PRIORITY={A}|FLAGGED"
               ((tags-todo "work-pirilampo"
                           ((org-agenda-overriding-header "Work")))
                )
               ((org-agenda-todo-ignore-scheduled 'future)
                (org-agenda-sorting-strategy '(deadline-up))))
             t) ; FIXME sort not OK
#+end_src

** Hotlist

The *hotlist* is a convenient and smart way to see (in a single, clear overview)
the *most urgent and important tasks* for you to be working on right now.

It contains /active/ tasks (that is, not completed) that:

- are *overdue*, or
- are *due soon* (in the next 7 days) [= urgent], or
- have a *high priority* (~#A~) [= important], or
- are *FLAGGED* [= next action?].

There is an exception to the above rule: *tasks with a future ~SCHEDULED~ date
will be hidden* from the hotlist regardless of their ~DEADLINE~ date, priority or
flag.

In other words, to be listed in the hotlist, tasks must have as well
a ~SCHEDULED~ date that is:

- on or before today, or
- blank.

# Why?  Because scheduling also means: don't show me that task before that
# date. I will review it starting on the scheduled date, not now!

*************** TODO Rajouter les SCHEDULED today dans la hotlist ?
Déjà le cas pour les tâches avec DEADLINE. Pas pour les autres.
*************** END

*************** TODO Tasks with a DEADLINE and a ~-0d~ specifier are shown
We said "get it out my way for now", nope?
*************** END

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("fh" "Hotlist"
               ;; tags-todo "DEADLINE<=\"<+1w>\"|PRIORITY={A}|FLAGGED"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")))
                (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                           ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                (tags-todo "DEADLINE=\"\"+PRIORITY={A}|DEADLINE>\"<+1w>\"+PRIORITY={A}"
                           ((org-agenda-overriding-header "HIGH PRIORITY")))
                (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                           ((org-agenda-overriding-header "FLAGGED")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-when-regexp-matches))
                            (org-agenda-skip-regexp "\\[#A\\]")))
                ;; (tags-todo "DEADLINE=\"\"+PRIORITY<>{A}+FLAGGED|DEADLINE>\"<+1w>\"+PRIORITY<>{A}+FLAGGED"
                ;;            ((org-agenda-overriding-header "...FLAGGED...")))
                )
               ((org-agenda-todo-ignore-scheduled 'future)
                (org-agenda-sorting-strategy '(deadline-up))))
             t) ; FIXME sort not OK
#+end_src

XXX "Fix timestamp-based sorting of tags-based entries in agenda" (2015-02-08)
should fix the sort!?

The hotlist is the perfect thing to *review each morning* to know what you need
to do each day.

** TODO Hot N Fast

The *Hot N Fast* list is everything on the Hotlist that takes less than
10 minutes. Tasks without a time estimate will NOT show up in this list.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("ff" "Hot N Fast"
               ;; tags-todo "DEADLINE<=\"<+1w>\"|PRIORITY={A}|FLAGGED"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")))
                (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                           ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                (tags-todo "DEADLINE=\"\"+PRIORITY={A}|DEADLINE>\"<+1w>\"+PRIORITY={A}"
                           ((org-agenda-overriding-header "HIGH PRIORITY")))
                (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                           ((org-agenda-overriding-header "FLAGGED")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-when-regexp-matches))
                            (org-agenda-skip-regexp "\\[#A\\]")))
                ;; (tags-todo "DEADLINE=\"\"+PRIORITY<>{A}+FLAGGED|DEADLINE>\"<+1w>\"+PRIORITY<>{A}+FLAGGED"
                ;;            ((org-agenda-overriding-header "...FLAGGED...")))
                )
               ((org-agenda-todo-ignore-scheduled 'future)
                (org-agenda-sorting-strategy '(deadline-up))))
             t) ; FIXME sort not OK.
#+end_src

#+begin_src emacs-lisp :tangle no
(add-to-list 'org-agenda-custom-commands
             '("fe" "Effort less than 1 hour"
               ((tags-todo "Effort<>{}+Effort<\"1:00\""))
               ((org-agenda-todo-ignore-scheduled 'future)))
             t)
#+end_src

** Scheduled

#+begin_note
A deadline with no scheduling information has an implicit ~SCHEDULED~ date equal
to:

- the ~DEADLINE~ date (too late?), or
- today, in tools such as in Azendoo (too soon?)!

Or it should simply appear in the Next list?
#+end_note

* REVIEW my work

See http://www.omnigroup.com/ftp/pub/software/macosx/extras/omnifocus/gtdandomnifocus.pdf
for mode dedicated solely to review!

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("r" . "REVIEW...") t)
#+end_src

There is one task in each Folder that repeats as often as I need to review that
Folder. Some Folders I only need to review weekly or monthly. These review
tasks get the ~gtd~ tag.

See
http://stackoverflow.com/questions/22394394/orgmode-a-report-of-tasks-that-are-done-within-the-week
and
http://stackoverflow.com/questions/29390976/generate-report-of-completed-work-using-org-mode
for custom agenda views...

** All active tasks

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("ra" . "All Tasks...") t)
#+end_src

*** Sorted by due date (= urgency)

All *tasks*, grouped by *due date*:
- Overdue
- Due today
- Due tomorrow
- Due within a week (next 5 days)
- Due within a month (next 3 weeks)
- Due later
- No due date (includes Inbox)

# [[file:images/agenda-view-rad.png]]

**** All tasks (tags view command)

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rad" "All Tasks (grouped by Due Date)"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+1d>\""
                           ((org-agenda-overriding-header "DUE TOMORROW")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+28d>\""
                           ((org-agenda-overriding-header "DUE LATER")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))

                ;; (todo ""
                ;;            ((org-agenda-overriding-header "NO DUE DATE")
                ;;             (org-agenda-skip-function
                ;;              '(org-agenda-skip-entry-if 'deadline))))
                (tags-todo "TODO={STRT}"
                           ((org-agenda-overriding-header "NO DUE DATE / STARTED")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                (tags-todo "TODO<>{STRT\\|WAIT}"
                           ((org-agenda-overriding-header "NO DUE DATE / NEXT")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                (tags-todo "TODO={WAIT}"
                           ((org-agenda-overriding-header "NO DUE DATE / WAITING FOR")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                (tags-todo "TODO={MAYB}"
                           ((org-agenda-overriding-header "NO DUE DATE / MAYBE")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                )
               ((org-agenda-sorting-strategy '(priority-down))
                (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
               "~/org___all-tasks-by-due-date.pdf") t)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("ra1" "All Tasks with a due date"
               ((alltodo ""))
               ((org-agenda-overriding-header "All Tasks (sorted by Due Date)")
                (org-agenda-skip-function
                 '(org-agenda-skip-entry-if 'notdeadline))
                (org-agenda-sorting-strategy '(deadline-up))))
             t)
#+end_src

**** All tasks (agenda view command)

*************** TODO When I'm in the range of the pre-warning, tasks are shown...
... even if they aren't for tomorrow or for the next 5 days.

That causes repetition of tasks between different blocks.
*************** END

*************** TODO Tasks with a long pre-warning do not appear in the first block
Well in every other one!!!  Bad.
*************** END

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("ra2" "All active tasks, by due date"
               ((agenda ""
                        ((org-agenda-overriding-header "Today")
                         ;; FIXME We don't see "timed" DEADLINE.
                         (org-agenda-skip-function
                          (lambda ()
                            (let* ((dl (org-entry-get nil "DEADLINE")))
                              (if (or (not dl)
                                      (equal dl "")
                                      (org-time> dl (org-time-today)))
                                  (progn (outline-next-heading) (point))))))
                         (org-agenda-skip-scheduled-if-deadline-is-shown t)
                         (org-agenda-span 'day)
                         (org-deadline-warning-days 0)))
                (agenda ""
                        ((org-agenda-entry-types '(:deadline))
                         (org-agenda-overriding-header "Tomorrow")
                         (org-agenda-skip-function
                          '(lvn--skip-entry-unless-deadline-in-n-days-or-more 1))
                         (org-deadline-warning-days 1)))
                (agenda ""
                        ((org-agenda-overriding-header "Next 5 days")
                         (org-agenda-skip-function
                          '(lvn--skip-entry-unless-deadline-in-n-days-or-more 2))
                         (org-deadline-warning-days 7)))
                (agenda ""
                        ((org-agenda-format-date "")
                         (org-agenda-overriding-header "Next 3 weeks")
                         (org-agenda-skip-function
                          '(lvn--skip-entry-unless-deadline-in-n-days-or-more 7))
                         (org-deadline-warning-days 28))))
               ((org-agenda-deadline-faces '((0.0 . default)))
                (org-agenda-start-with-clockreport-mode nil)
                (org-agenda-format-date "")
                (org-agenda-span 'day)
                (org-agenda-sorting-strategy '(deadline-up))
                (org-agenda-use-time-grid nil)
                (org-agenda-write-buffer-name "Reminders")))
             t)
#+end_src

***** Skipping Org entries based on DEADLINE and SCHEDULED properties

This collection of Emacs Lisp functions provides utilities for skipping Org mode
entries based on their ~DEADLINE~ and ~SCHEDULED~ properties. These functions
are designed to assist in workflows where filtering entries by time constraints
is necessary, such as agenda views or custom Org commands.

#+begin_src emacs-lisp
(defun lvn--skip-entry-unless-deadline-in-n-days-or-more (n)
  "Skip entry unless the DEADLINE is in N days or more from today."
  (let* ((deadline (org-entry-get nil "DEADLINE"))
         (today (org-time-today))
         (n-days-from-today (+ today (* n 24 60 60))))
    (when (or (not deadline)
              (string= deadline "")
              (org-time< deadline n-days-from-today))
      (outline-next-heading)
      (point))))

(defun lvn--skip-entry-unless-overdue-deadline ()
  "Skip entries with no deadline or with a deadline that is not overdue."
  (let ((deadline (org-entry-get nil "DEADLINE"))
        (today (org-time-today)))
    (when (or (not deadline)
              (string= deadline "")
              (org-time>= deadline today))
      (outline-next-heading)
      (point))))

(defun lvn--skip-entry-if-past-deadline ()
  "Skip entries that have a deadline earlier than today."
  (let ((deadline (org-entry-get nil "DEADLINE"))
        (today (org-time-today)))
    (when (and deadline (org-time< deadline today))
      (outline-next-heading)
      (point))))

(defun lvn--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days (n1 n2)
  "Skip entries with a DEADLINE in less than N1 days or a SCHEDULED
date in less than N2 days."
  (let* ((today (org-time-today))
         (deadline (org-entry-get nil "DEADLINE"))
         (scheduled (org-entry-get nil "SCHEDULED"))
         (deadline-time (+ today (* n1 24 60 60)))
         (scheduled-time (+ today (* n2 24 60 60))))
    (when (or (and deadline
                   (not (string-empty-p deadline))
                   (org-time< deadline deadline-time))
              (and scheduled
                   (not (string-empty-p scheduled))
                   (org-time< scheduled scheduled-time))
              (and (not deadline)
                   (not scheduled)))
      (outline-next-heading)
      (point))))

(defun lvn--skip-entry-if-deadline-or-schedule ()
  "Skip entries with either a DEADLINE or SCHEDULED property."
  (let ((deadline (org-entry-get nil "DEADLINE"))
        (scheduled (org-entry-get nil "SCHEDULED")))
    (when (or (and deadline (not (string-empty-p deadline)))
              (and scheduled (not (string-empty-p scheduled))))
      (outline-next-heading)
      (point))))
#+end_src

Each function operates by moving the point to the next heading if the specified
conditions are met, making it easy to incorporate these skips into custom agenda
commands or filtering workflows.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("ra3" "Agenda for all TODO entries"
               ((agenda ""
                        ((org-agenda-format-date "")
                         (org-agenda-overriding-header "Past due")
                         (org-agenda-skip-function
                          'lvn--skip-entry-unless-overdue-deadline)
                         (org-deadline-warning-days 0)))
                (agenda ""
                        ((org-agenda-format-date "")
                         (org-agenda-overriding-header "Today/tomorrow")
                         (org-agenda-skip-function
                          'lvn--skip-entry-if-past-deadline)
                         (org-agenda-span 2)
                         (org-agenda-use-time-grid t)
                         (org-deadline-warning-days 0)))
                (agenda ""
                        ((org-agenda-format-date "")
                         (org-agenda-overriding-header "Next 12 days")
                         (org-agenda-skip-function
                          '(lvn--skip-entry-unless-deadline-in-n-days-or-more 2))
                         (org-deadline-warning-days 14)))
                (todo ""
                      ((org-agenda-overriding-header "Later")
                       (org-agenda-skip-function
                        '(lvn--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days 15 2))
                       (org-agenda-sorting-strategy '(ts-up))))
                (todo ""
                      ((org-agenda-overriding-header "No due date")
                       (org-agenda-skip-function
                        'lvn--skip-entry-if-deadline-or-schedule))))
               ((org-agenda-start-with-clockreport-mode nil)
                (org-agenda-prefix-format " %i %?-12t% s")
                (org-agenda-span 'day)
                (org-agenda-use-time-grid nil)
                (org-agenda-sorting-strategy '(deadline-up)) ; FIXME sort does not work in "Past due", well in "Next 12 days".
                (org-agenda-write-buffer-name "List Review"))
               "~/org___agenda-all-todo-entries.html") t)
#+end_src

*** Sorted by priority (= importance)

All *tasks*, grouped by *priority*:
- Priority A
- Priority B
- No explicit priority (= priority B, implicitly)
- Priority C
- Completed

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rap" "All (Unscheduled) Tasks (grouped by Priority)"
               ((tags-todo "PRIORITY={A}"
                           ((org-agenda-overriding-header "HIGH")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
                (tags-todo "PRIORITY={B}"
                           ((org-agenda-overriding-header "MEDIUM")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
                (tags-todo "PRIORITY={C}"
                           ((org-agenda-overriding-header "LOW")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
                (todo "DONE|CANX"
                      ((org-agenda-overriding-header "COMPLETED")
                       (org-agenda-sorting-strategy '(priority-down))))))
             t)
#+end_src

** Time tracking

Generate a time tracking report:
https://confluence.atlassian.com/display/JIRA/Time+Tracking+Report

FIXME Show percent completion

http://www.techsupportalert.com/best-free-project-time-keeping-utility.htm

*************** TODO Add a custom view which is some "bill" to send to your boss/client (table view)

** Timesheet

See [[https://www.youtube.com/watch?v=ryuS0fdA2z0&index=3&list=PLQ176FUIyIUbGE728KezWz1J15fHW0S_m][Weekly Time Report]] at 03:44 for a weekly time report.

#+begin_note
~org-timeline~ has weaknesses and although not officially deprecated, should be
best avoided.  See Carsten's comments in
http://thread.gmane.org/gmane.emacs.orgmode/39368/focus=39465
#+end_note

Track time.

http://www.freshbooks.com/track-your-time

#+begin_src emacs-lisp
;; Define custom commands for timesheets under the prefix `C-c a x`.
(add-to-list 'org-agenda-custom-commands
             '("x" . "Timesheets...") t)

;; Add a custom command for a daily timesheet.
(add-to-list 'org-agenda-custom-commands
             '("xd" "Daily Timesheet"
               ;; Display a daily timesheet with clocked tasks and closed
               ;; entries. Useful for tracking time spent on tasks for a single
               ;; day.
               ((agenda ""))
               (
                ;; Include clocked tasks and closed entries in the log view.
                (org-agenda-log-mode-items '(clock closed))
                ;; Custom header for clarity.
                (org-agenda-overriding-header "DAILY TIMESHEET")
                ;; Show logs specific to clocked items.
                (org-agenda-show-log 'clockcheck)
                ;; Set the agenda span to a single day.
                (org-agenda-span 'day)
                ;; Start the agenda view with the clock report enabled.
                (org-agenda-start-with-clockreport-mode t)
                ;; Disable the time grid for a cleaner view.
                (org-agenda-time-grid nil)))
             t)

;; Add a custom command for a weekly timesheet.
(add-to-list 'org-agenda-custom-commands
             '("xw" "Weekly Timesheet"
               ;; Display a weekly timesheet for an overview of tasks with time
               ;; tracking. Skip entries with timestamps and focuses on clocked
               ;; work for the week.
               ((agenda ""))
               (
                ;; (org-agenda-format-date "")
                ;; Custom header for clarity.
                (org-agenda-overriding-header "WEEKLY TIMESHEET")
                ;; Skip entries with a timestamp property.
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                ;; Set the agenda span to a week.
                (org-agenda-span 'week)
                ;; Start the week on Monday.
                (org-agenda-start-on-weekday 1)
                ;; Start the agenda view with the clock report enabled.
                (org-agenda-start-with-clockreport-mode t)
                ;; Disable the time grid for a cleaner view.
                (org-agenda-time-grid nil)))
             t)
#+end_src

I believe what you are seeking is a highly customized agenda view, which is
possible, but will require an investment of a substantial amount of time
modifying the source code of org-agenda-list and the functions it uses -- e.g.,
org-agenda-get-.... Rather than using something like the org-agenda-list family
of functions, perhaps consider using either a tag / property search (i.e.,
org-tags-view) or a word search (i.e., org-search-view) using the built-in
agenda commands: orgmode.org/worg/org-tutorials/advanced-searching.html Both of
those searches do not insert dividers.

If you would like to modify the source code for org-agenda-list, have a look at
the section of code: (if (stringp org-agenda-format-date) (format-time-string
org-agenda-format-date (org-time-from-absolute date)) (funcall
org-agenda-format-date date)) "\n"). You may not need the text-properties that
follow if you eliminate the date . . . I would suggest creating an entirely new
function with a different name and leave org-agenda-list as-is.

** Expense reporting

** Calendar

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rc" . "Calendar...") t)
#+end_src

FIXME Make 7 agenda "day" views in order to have a customizable separator.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rc7" "Events and appointments for 7 days"
               ((agenda ""))
               ((org-agenda-entry-types '(:timestamp :sexp))
                ;; (org-agenda-overriding-header "Calendar for 7 days")
                ;; (org-agenda-repeating-timestamp-show-all t)
                (org-agenda-span 'week)
                (org-agenda-format-date "\n%a %d")
                ;; (org-agenda-date-weekend ... new face ...)
                (org-agenda-time-grid nil)))
             t)
#+end_src

View all my tasks in a familiar, *calendar*-like view. They appear on the day that
they are due or scheduled.

#+begin_src emacs-lisp
;; Calendar view for org-agenda.
(when (locate-library "calfw-org")

  (autoload 'cfw:open-org-calendar "calfw-org"
    "Open an Org schedule calendar." t)

  (add-to-list 'org-agenda-custom-commands
               '("rcm" "Calendar for current month"
                 (lambda (&rest ignore)
                   (cfw:open-org-calendar)))
               t)

  ;; (defun cfw:open-org-calendar-non-work (&args)
  ;;   (interactive)
  ;;   (let ((org-agenda-skip-function 'org-agenda-skip-work))
  ;;     (cfw:open-org-calendar)))
  ;;
  ;; (add-to-list 'org-agenda-custom-commands
  ;;              '("c" "Calendar (non-work) for current month"
  ;;                cfw:open-org-calendar-non-work) t)

  )
#+end_src

** Completed Tasks

To monitor your progress, you can view what tasks have been *completed recently*
(in this project) in the last day, week, or two weeks.

Here, you will see a list of all tasks completed in the last 13 days (with the
most recently completed at the top), which you can filter by category or tag.

FIXME Group completed tasks per date of completion.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("rC" "Completed view"
               (;; List of all TODO entries completed yesterday.
                (todo "TODO|DONE|CANX" ; includes repeated tasks (back in TODO)
                      ((org-agenda-overriding-header
                        (concat "YESTERDAY   "
                                (format-time-string "%a %d" (lvn--current-time-minus-days 1))
                                ;; #("__________________" 0 12 (face (:foreground "gray")))
                                ))
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if
                          'notregexp
                          (format-time-string leuven-org-completed-date-regexp (lvn--current-time-minus-days 1))))
                       (org-agenda-sorting-strategy '(priority-down))))
                ;; List of all TODO entries completed 2 days ago.
                (todo "TODO|DONE|CANX" ; includes repeated tasks (back in TODO)
                      ((org-agenda-overriding-header
                        (concat "2 DAYS AGO  "
                                (format-time-string "%a %d" (lvn--current-time-minus-days 2))))
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if
                          'notregexp
                          (format-time-string leuven-org-completed-date-regexp (lvn--current-time-minus-days 2))))
                       (org-agenda-sorting-strategy '(priority-down))))
                ;; List of all TODO entries completed 3 days ago.
                (todo "TODO|DONE|CANX" ; Includes repeated tasks (back in TODO).
                      ((org-agenda-overriding-header
                        (concat "3 DAYS AGO  "
                                (format-time-string "%a %d" (lvn--current-time-minus-days 3))))
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if
                          'notregexp
                          (format-time-string leuven-org-completed-date-regexp (lvn--current-time-minus-days 3))))
                       (org-agenda-sorting-strategy '(priority-down)))))
               ((org-agenda-format-date "")
                (org-agenda-start-with-clockreport-mode nil)))
             t)

(defun lvn--current-time-minus-days (n)
  "Return the current time minus N days.
N should be a non-negative integer representing the number of days."
  (time-subtract (current-time) (days-to-time (max 0 n))))
#+end_src

The above is more appropriate than:

#+begin_example
  (add-to-list 'org-agenda-custom-commands
              '("rC" "Recently closed"
                ((tags "CLOSED>\"<-2w>\""))
                ((org-agenda-sorting-strategy '(priority-down))))
                t)
#+end_example

because *repeatable* tasks are switched back to a non-TODO state and (at least,
by default) don't get a ~CLOSED:~ time-stamp.

*** Note

#+begin_src emacs-lisp :tangle no
(defun org-done-view (&optional offset)
  "Show all TODOs that are marked as done within a specific day.
OFFSET specifies the number of days from today. Defaults to 0 (today)."
  (interactive "p") ;; Use prefix argument for OFFSET, defaulting to 0
  (let* ((offset (or offset 0))
         (start-date (calendar-gregorian-from-absolute
                      (+ offset
                         (calendar-absolute-from-gregorian (calendar-current-date)))))
         (end-date (calendar-gregorian-from-absolute
                    (+ 1 offset
                       (calendar-absolute-from-gregorian (calendar-current-date))))))
    (org-tags-view nil
                   (format "CLOSED>=\"[%04d-%02d-%02d]\"+CLOSED<=\"[%04d-%02d-%02d]\""
                           (calendar-extract-year start-date)
                           (calendar-extract-month start-date)
                           (calendar-extract-day start-date)
                           (calendar-extract-year end-date)
                           (calendar-extract-month end-date)
                           (calendar-extract-day end-date)))))
#+end_src

** Cleanup

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rx" "Completed tasks with no CLOCK lines"
               ((todo "DONE|CANX"
                      ((org-agenda-overriding-header "Completed tasks with no CLOCK lines")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if
                          'regexp
                          (format-time-string "  CLOCK: .*--.* =>  .*")))
                       (org-agenda-sorting-strategy '(priority-down))))))
             t)
#+end_src

Cleanup:

- Done actions older than 14 days
- Inactive ticklers older than 14 days
- Completed projects older than 14 days

Cleanup = delete what does not contain CLOCK lines, and archive others, for example?

** Recent items

*************** TODO Add report "Recently added/completed/modified"
Recently done.
*************** END

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rr" "Recent items (past 7 days)"
               ;; Faster than tags.
               ((agenda ""))
               ((org-agenda-start-day "-7d")
                (org-agenda-span 7)
                (org-agenda-repeating-timestamp-show-all nil)
                ;; %s is only for agenda views
                ;; (org-agenda-prefix-format "%s")
                ;; maybe not make much difference ka
                ;; (org-agenda-use-tag-inheritance nil)
                (org-agenda-inactive-leader "Inactive:  ")
                (org-agenda-include-inactive-timestamps t)))
             t)
#+end_src

*************** TODO Items are duplicated because of LOGBOOK + LAST_REPEAT
*************** END

** Daily task review

Take a moment to plan your day:

- Recently created (possible actions: today, later, done, delete)
- No due date (possible actions: tomorrow, in 2 days, next week, someday)
- Scheduled today (possible actions: today, later, done, delete)

*************** TODO Show overridden headers when in agenda view

Read [[http://gridwriter.com/2012/11/14/omnifocus-series-flags-due-dates-daily-review/][Flags, Due Dates, and Daily Review]].

** Weekly task review

1. Clear inbox for collecting
2. Review previous calendar data
3. Review upcoming calendar
4. Review (stuck) projects
5. Review (next) actions
6. Review waiting-for
7. Review maybe/someday

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rw" "Weekly review"
               ((tags "CATEGORY={@Collect}&LEVEL=2|TODO={MAYB}"
                      ((org-agenda-overriding-header "INBOX (Unscheduled)")))

                (agenda ""
                        ((org-agenda-clockreport-mode t)
                         (org-agenda-format-date
                          (concat "\n"
                                  "%Y-%m-%d" " %a "
                                  (make-string (window-width) ?_)))
                         (org-agenda-overriding-header "PAST WEEK")
                         (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                         (org-agenda-show-log 'clockcheck)
                         (org-agenda-span 7)
                         (org-agenda-start-day "-1w") ; recently done
                         (org-deadline-warning-days 0)))

                (agenda ""
                        ((org-agenda-overriding-header "NEXT MONTH")
                         (org-agenda-span 'month)
                         (org-agenda-start-day "+0d")
                         (org-deadline-warning-days 0) ; XXX
                         ))

                ;; FIXME we should show which tasks (don't) have CLOCK lines: archived vs. deleted.
                (todo "DONE|PROJDONE"
                      ((org-agenda-overriding-header
                        "Candidates to be archived")))

                ;; (stuck ""
                ;;        ((org-agenda-overriding-header "Stuck projects")))

                (todo "STRT"
                      ((org-agenda-overriding-header "IN PROGRESS")
                       (org-agenda-todo-ignore-scheduled nil)))

                (todo "TODO|NEXT"        ; Don't include items from Inbox! XXX
                      ((org-agenda-overriding-header "ACTION LIST")))

                ;; Ignore scheduled and deadline entries, as they're visible
                ;; in the above agenda (for the past + for next month) or
                ;; scheduled/deadline'd for much later...
                (todo "WAIT"
                      ((org-agenda-format-date "")
                       (org-agenda-overriding-header "WAITING FOR")
                       (org-agenda-todo-ignore-deadlines 'all) ; Future?
                       (org-agenda-todo-ignore-scheduled t)))

                ;; Same reasoning as for WAIT.
                (todo "MAYB"
                      ((org-agenda-format-date "")
                       (org-agenda-overriding-header "MAYBE")
                       (org-agenda-todo-ignore-deadlines 'all)
                       (org-agenda-todo-ignore-scheduled t)
                       (org-agenda-filter-preset '("+MAYB"))))

                ;; ((org-agenda-start-with-clockreport-mode nil)
                ;;  (org-agenda-prefix-format " %i %?-12t% s")
                ;;  (org-agenda-write-buffer-name "Weekly task review"))
                ;; "~/org-weekly-review.html") t)
                ))
             t)
#+end_src

** Next

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rN" "Next"
               ((tags-todo "TODO<>{MAYB}"))
               ((org-agenda-overriding-header "List of all TODO entries with no due date (no MAYB)")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
                (org-agenda-sorting-strategy '(priority-down))))
             t)
#+end_src

#+begin_note
If you don't want to show *scheduled* items, *deadlines* nor *appointments* in lists,
you can use either

- ~(org-agenda-todo-ignore-with-date t)~, or
- ~(org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))~.

Though, we should make a performance comparison to see whether one is quicker
than the other.
#+end_note

#+begin_note
If you want to show TODO items neither *scheduled* nor *deadline*'d, you can use:

: -SCHEDULED={.+}-DEADLINE={.+}+TODO="TODO"
#+end_note

** Tickler File
:PROPERTIES:
:header-args+: :tangle no
:END:

If you can't get to work on something right now, but it's not too far o! in the
distance, you probably have a Tickler item on your hands. A tickler item, in
Omni-Focus, is an item with a *start date in the future*. This might be a marathon
you might participate in or a concert you might like to see. With a start date
in the future, it disappears for the time being, but is not lost forever. You
can add a start date to the project or action via the inspector or the Start
column in the outline.

An item with a start date in the future doesn't appear in ordinary OmniFocus
views. But when the start date comes around, the project or action appears
again, ready for you to decide what to do with it.





The Tickler File list contains inactive or future actions, that is, actions that
you don't need to see in your system until a future date.

These actions will remain hidden until the date you indicate, so that they do
not distract you when you still cannot do anything about them.

The Tickler File is automatically handled -- its actions are activated on the
scheduled date -- but you can consult the list anytime.




#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("F" "Ticker File"
               ((tags-todo "TODO<>{MAYB}+SCHEDULED>\"<+0d>\""))
               ((org-agenda-overriding-header "Tickler File -- List of all TODO entries with future start date (no MAYB)")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
                (org-agenda-sorting-strategy '(priority-down))))
             t)
#+end_src

Broader:

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("G" "Tickler File"
               ((todo ""))
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
                (org-agenda-overriding-header "Tickler File -- List of TODO entries scheduled for the future")
                (org-agenda-sorting-strategy '(priority-down))))
             t)
#+end_src

#+begin_src emacs-lisp :tangle org-leuven-agenda-views.el
(add-to-list 'org-agenda-custom-commands
             '("p" "Past and unscheduled TODOs"
               ((todo ""
                      ((org-agenda-overriding-header "Unscheduled and Past Due")
                       (org-agenda-skip-function
                        '(lambda ()
                           (let ((scheduled (org-get-scheduled-time (point))))
                             (if (or (not scheduled) (org-time< scheduled (current-time)))
                                 nil
                               (org-agenda-skip-entry-if 'nottodo 'scheduled))))))))))
#+end_src

** Waiting for

Only allow one assignee per task. See
https://asana.com/guide/learn/tasks/assigning for techniques when this can't be
done.

See other people's tasks.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rW" "Waiting for"
               ((tags-todo "TODO={WAIT}"))
               ((org-agenda-overriding-header "Waiting for")
                (org-agenda-sorting-strategy '(deadline-up))))
             t)
                                        ; FIXME deadline-up does not work.
#+end_src

** Projects

A *project* is any desired goal that requires *more than one action* to achieve.

Making a decision about the order of your actions is very important.

A project where the actions need to be performed in sequence is called
a *sequential project*. A project where the actions can be performed in any order
is called a *parallel project*.

The project type can be specified either in XXX.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("rP" "Projects"
               ((tags-todo "project-DONE-CANX"))
               ((org-agenda-overriding-header "Projects (High Level)")
                (org-agenda-sorting-strategy nil)))
             t)
#+end_src

Display:
- Title
- Status
- Progress (%)
- Start Date
- Completion Date (= deadline)

Comment identifier un projet ?
- Identifier les tâches qui ont des sous-tâches?
- Mettre un tag PROJ?
- Avoir des tâches dans section "(Single) Actions" ou dans section "Projects"?

From Tracks:
- Active Projects
- Hidden Projects
- Completed Projects

** Other trial

#+begin_src emacs-lisp :tangle no
(defun my/org-skip-subtree-if-no-todo-children ()
  "Skip a subtree if it does not have any TODO children."
  (save-restriction
    (widen)
    (let ((has-todo))
      (save-excursion
        (let ((end (save-excursion (org-end-of-subtree t))))
          (while (and (not has-todo) (re-search-forward org-not-done-regexp end t))
            (setq has-todo t))))
      (not has-todo))))

(add-to-list 'org-agenda-custom-commands
             '("rP" "Projects (parent headlines with subtasks)"
               ((tags "LEVEL=1"
                      ((org-agenda-skip-function 'my/org-skip-subtree-if-no-todo-children)
                       (org-agenda-overriding-header "Parent projects with open tasks")
                       (org-agenda-sorting-strategy nil))))))


(defun my/org-skip-subtree-if-no-todo-children ()
  "Skip a heading if it does not have any TODO child."
  (save-restriction
    (widen)
    (let ((end (save-excursion (org-end-of-subtree t))))
      (if (save-excursion
            (re-search-forward org-not-done-regexp end t))
          nil  ; keep this heading
        end)))) ; skip the whole subtree if no TODOs

(add-to-list 'org-agenda-custom-commands
             '("rP" "Projects (Headlines with TODO subtasks)"
               ((tags ""
                      ((org-agenda-skip-function 'my/org-skip-subtree-if-no-todo-children)
                       (org-agenda-overriding-header "Parent projects with open tasks")
                       (org-agenda-sorting-strategy '(priority-down))))))
             )



(defun my/org-skip-subtree-if-no-todo-children ()
  "Skip a heading if it does not have any TODO child."
  (save-restriction
    (widen)
    (let ((end (save-excursion (org-end-of-subtree t))))
      (if (save-excursion
            (re-search-forward org-not-done-regexp end t))
          nil  ; Has a TODO child -> do not skip
        end)))) ; No TODOs -> skip this heading

(add-to-list 'org-agenda-custom-commands
             '("rP" "Parent Projects with Open Tasks"
               ((tags-todo "+LEVEL=1"
                           ((org-agenda-skip-function 'my/org-skip-subtree-if-no-todo-children)
                            (org-agenda-overriding-header "Projects with active subtasks")
                            (org-agenda-sorting-strategy '(priority-down))))))
             )











(defun my/org-skip-subtree-if-no-todo-children ()
  "Skip a heading if it does not have any TODO children."
  (save-restriction
    (widen)
    (let ((end (save-excursion (org-end-of-subtree t t))))
      (if (save-excursion
            (forward-line 1)
            (re-search-forward org-not-done-regexp end t))
          nil   ;; Child with TODO found → do not skip
        end)))) ;; No child TODO → skip

(add-to-list 'org-agenda-custom-commands
             '("rP" "Projects with Open Tasks Underneath"
               ((tags "*"
                      ((org-agenda-skip-function 'my/org-skip-subtree-if-no-todo-children)
                       (org-agenda-overriding-header "Parent Projects (even without TODO keyword)")
                       (org-agenda-sorting-strategy '(priority-down))))))
             )


#+end_src

* MORE

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("+" . "MORE...") t)
#+end_src

** Assigned to me

#+begin_src emacs-lisp
;; Checking tasks that are assigned to me.
(add-to-list 'org-agenda-custom-commands
             `("+a" "Assigned to me"
               ((tags ,(concat "Assignee={" user-login-name "\\|"
                               user-mail-address "}")))
               ((org-agenda-overriding-header "ASSIGNED TO ME")))
             t)
#+end_src

** Tasks by assignee

* EMAIL notifications

** Examples

See
https://groups.google.com/forum/#!search/messageid$3Amailman.7594.1438153952.904.help-gnu-emacs@gnu.org/gnu.emacs.help/uBCS3K_ZJFQ/KBfe2RXAtgsJ.

Other posts:

#+begin_verse
Automatic send email to myself:

(defun email-heading-to-me ()
  "Send the current org-mode heading as the body of an email, with headline as the subject."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (let ((content (buffer-substring (point) (mark)))
          (SUBJECT (nth 4 (org-heading-components))))

      (compose-mail "your@email.here" SUBJECT)
      (message-goto-body)
      (insert content)
      (message-send)
      (message-kill-buffer))))
#+end_verse

From Email from John Kitchin: Re: create a "send plain text.

Create a "send plain text/pdf email with current header" function:

#+begin_verse
(defvar my-spam-sent-names nil
 "Make sure that, even if we have to run this multiple times, people
 don't get spammed more than once.")

(defun my-spam-headline ()
  (org-narrow-to-subtree)
  (cl-flet ((mp (p) (org-entry-get nil p t)))
    (let* ((org-inhibit-logging t)
           (file (buffer-file-name (current-buffer)))
           (subject "Sign up for my stuff")
           (name (mp "NAME"))
           (to (mp "MAIL_TO"))
           (from "Eric Abrahamsen <eric@ericabrahamsen.net>")
           (salutation (mp "SALUTATION"))
           (body (replace-regexp-in-string "XXXX" salutation letter-text t)))
      (when (equal "PITCH" (mp "TODO"))
        (unless (member name my-spam-sent-names)
          (save-excursion
            (org-mime-compose body 'html file (concat name " <" to ">")
                              subject `((from . ,from)))
            (message-send-and-exit))
          (push name my-spam-sent-names)
          (org-todo "WAITING")))))
  (setq org-map-continue-from (point-max))
  (widen))

(defun my-spam-tree ()
  (interactive)
  (let ((letter-text "long string with XXXXs in it."))
    (org-map-entries #'my-spam-subtree "TODO=\"PITCH\"" 'tree)))
#+end_verse

From Email from Eric Abrahamsen: Re: create a "send plain text.

** Task assigned

#+begin_example
    Azendoo | Notification
---------------------------------------

Task label


Check it out : http://app.azendoo.com/tasks/53d8b82f64594a5a270001f5


This notification has been sent to you via Azendoo, do not reply.
#+end_example

** Email list

You can receive an email with your daily planner every morning at 8:00 AM to
help you getting started in the morning.

*************** TODO Have the hotlist emailed to you each day

See http://www.randomsample.de/dru5/node/61

: /usr/bin/yes p | /usr/local/bin/emacs -batch -l ~/.emacs -eval '(org-batch-agenda "#")' 2>/dev/null | /usr/bin/mailx -s'Stuck projects' me@example.com

** Email the agenda buffer

#+begin_src emacs-lisp :tangle no
(defun email-buffer ()
  "Send region as the body of an email."
  (interactive)
  (let ((content (buffer-string)))
    (compose-mail)
    (message-goto-body)
    (insert content)
    (message-goto-to)))
#+end_src

Just run that from your agenda, and then fill in email addresses and
subject, and send.

* EXPORT

Exporting your personal or team task lists.

** Print list

The *exported agenda views* are not *stored* when you use one of those commands
interactively because this might use too much overhead.  Instead, there is a
special command to produce all specified files in one step: ~C-c a e~.

#+begin_note
To create PDF output, the GhostScript ~ps2pdf~ utility must be installed on the
system.
#+end_note

FIXME Changes
- Little checkbox
- No icon
- Proportional font
- No tag: ~(setq org-agenda-hide-tags-regexp ".*")~

XXX See http://www.toodledo.com/tools/booklet.php:
Easily print your to-do list as a foldable booklet that you can put in your
pocket. Each booklet contains your hotlist, your top 110 most important tasks,
and a section for written notes. Assembly of the booklet is as simple as one
cut with a scissors and a few folds.

XXX See solution of Christian Egli:
http://orgmode.org/w/?p=org-mode.git;a=blob;f=contrib/scripts/org2hpda;hb=HEAD

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("E" . "Exported agenda files...") t)

;; Exporting agenda views.
(add-to-list 'org-agenda-custom-commands
             '("Ea"
               ((agenda ""))
               (;; (org-tag-faces nil)
                (ps-landscape-mode t)
                (ps-number-of-columns 1))
               ("~/org-agenda.html" "~/org-agenda.pdf"))
             t)

(add-to-list 'org-agenda-custom-commands
             '("Ep" "Call list"
               ((tags-todo "phone"))
               ((org-agenda-prefix-format " %-20:c [ ] " )
                (org-agenda-remove-tags t)
                ;; (org-agenda-with-colors nil)
                (org-agenda-write-buffer-name
                 "Phone calls that you need to make")
                (ps-landscape-mode t)
                (ps-number-of-columns 1))
               ("~/org___calls.pdf"))
             t)
#+end_src

You can save any list or agenda view as PDF by writing it to a file (via
~C-x C-w~).

** Export tasks lists as CSV files

** Upload on a Web site

I upload my agenda on a website, so I can access it from multiple devices. This
works nicely with the following in a cron job:

#+begin_src shell :tangle no
emacs --batch -l ~/.emacs.d/init.el -eval '(org-batch-store-agenda-views)' -kill
#+end_src

* VISUALIZE

Create custom reports with live data.

See https://basecamp.com/extras for numerous *add-ons to Basecamp*:

- mobile apps
- time tracking, invoicing, and accounting
- reporting, charts, planning
- contracts and proposals
- etc.

** Productivity

The *Visualize productivity* view shows a graphical representation of your
productivity in the last 2 weeks.

Productivity trend: barplot, x-axis = day in month (in numeric form), y-axis =
number of completed tasks.

** Visual report

Stunning report on https://weekdone.com/basecamp/.

* ARCHIVE

Archiving a project (or action) consists in hiding its contents from view (NOT
from search).

Archive projects that have been completed or deferred, so you can focus on more
active projects.

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("A" . "ARCHIVE...") t)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("Aa" "Archive"
               ((tags-todo "ARCHIVE"))
               ((org-agenda-todo-ignore-scheduled 'future)
                (org-agenda-sorting-strategy '(deadline-down))))
             t)
#+end_src

* REFERENCE

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("R" . "REFERENCE...") t)
#+end_src

** Search

Search any word or regexp within your task name or in the note field:

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("Rs" "Like s, but with extra files"
               ((search ""))
               ((org-agenda-text-search-extra-files
                 ;; FIXME Add `agenda-archives'
                 leuven-org-search-extra-files)))
             t)
#+end_src

*************** TODO Add ~S~ to search in all files, but not into DONE tasks
*************** END

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("RS" "Like s, but only TODO entries"
               ((search ""))
               ((org-agenda-text-search-extra-files
                 ;; FIXME Add `agenda-archives'
                 leuven-org-search-extra-files)))
             t)
#+end_src

** Notes

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("Rn" "Organize thoughts to refile"
               ((tags "refile|capture"))
               ((org-agenda-overriding-header "Refile stuff")))
             t)
#+end_src

* Task markers (in the current buffer)

This command is useful for quickly identifying and navigating to code or notes
that require attention. It highlights all relevant markers within the current
buffer, helping you manage tasks more effectively.

#+begin_src emacs-lisp
;; Add a custom agenda command to create a sparse tree in the current buffer
;; showing entries with task markers: TODO, FIXME, XXX, or BUG.
(add-to-list 'org-agenda-custom-commands
             '("1" "Task markers (current buffer)"
               ((occur-tree "\\<\\(TODO\\|FIXME\\|XXX\\|BUG\\)\\>")))
             t)
#+end_src

* NEW views and thoughts

I do have an Org mode file full of tasks, in the statusses:

"MAYB"
"TODO"
"NEXT"
"STRT"
"WAIT"
"DONE"
"CANX"

Some of them have:

- a scheduled date
- a deadline date
- both
- no date at all

Some of them have a priority #A cookie; others a #B or a #C or nothing at all.

** Doc

- ~tags-todo~ ::
     Applies only to *TOOD headlines* (headlines marked with TODO keywords; e.g.,
     ~TODO~, ~DONE~).

- ~tags "*"~ (with a star) ::
      Applies to *any headline*, regardless of TODO status.

#+begin_note
You must use ~tags-todo~ to combine TODO keyword and tag filtering properly.
#+end_note

** Priority cookies

Priority cookies in Org mode are primarily used for marking the *importance* of
tasks rather than their urgency. The priority system in Org mode consists of
three levels by default:

- A (HIGHEST),
- B (Medium), and
- C (lowest).

These priorities help you distinguish the relative importance of tasks,
especially when viewing them in the agenda.

It's important to note that a task without a priority cookie is equivalent to
a task with priority B.

** Urgency

Use deadlines or tags

** Display all TODO items from the current directory

The function ~lvn-org-git-root-todo~ will display your tasks from the Git root
directory (including from local files =TODO.org= and =BUGS.org=, for example).

#+begin_src emacs-lisp
(defun lvn-org-git-root-todo ()
  "Display an Org agenda view of unscheduled TODO items from the Git root directory."
  (interactive)
  (let* ((git-root (vc-git-root default-directory))
         (org-files (when git-root
                      (directory-files-recursively
                       git-root
                       "\\.\\(org\\|txt\\)$"))))
    (if git-root
        (progn
          (let ((org-agenda-files org-files)
                (org-agenda-sorting-strategy '(todo-state-up priority-down))
                (org-agenda-overriding-header
                 (format "Unscheduled TODO items in directory: %s" git-root))
                (org-agenda-sticky nil)
                (org-agenda-skip-scheduled-if-done t)
                (org-agenda-skip-deadline-if-done t)
                (org-agenda-todo-ignore-scheduled 'future))
            (message "[%s...]" org-agenda-overriding-header)
            (org-todo-list)))
      (message "Error: Not in a Git repository"))))

;; Bind to <M-S-f6>.
(global-set-key (kbd "<M-S-f6>") #'lvn-org-git-root-todo)
#+end_src

** Custom agenda views based on directory scope

The function ~lvn-org-agenda-for-current-buffer~ adjusts the agenda view based on
the scope of Org files in the current directory and its subdirectories.

#+begin_src emacs-lisp
(defun lvn-org-agenda-for-current-buffer (&optional arg)
  "Open the Org mode agenda with entries restricted based on ARG.
ARG determines the scope:
- No ARG (nil): Restrict to the current buffer's file.
- Single C-u (4): Restrict to the current buffer's file and all .org files
  in the current directory and its subdirectories.
- Double C-u (16): Restrict to the current buffer's file, all .org files,
  and all .txt files in the current directory and its subdirectories.
If the buffer is in a version-controlled project (e.g., vc-dir),
use the project's root directory instead of the current directory."
  (interactive "P")
  (let* ((current-dir
          (or (when (buffer-file-name) (file-name-directory (buffer-file-name)))
                                        ; File's directory.
              (when (vc-root-dir) (vc-root-dir))))
                                        ; Git root directory.
         (org-agenda-files
          (cond
           ((not current-dir)
            (error "Cannot determine a directory for this buffer"))
           ;; No argument: Restrict to the current buffer's file.
           ((not arg)
            (list (buffer-file-name)))
           ;; Single C-u: Current buffer + .org files in current dir/subdirs.
           ((equal arg '(4))
            (delete-dups
             (append (when (buffer-file-name) (list (buffer-file-name)))
                     (directory-files-recursively current-dir ".*\\.org$"))))
           ;; Double C-u: Current buffer + .org and .txt files in current dir/subdirs.
           ((equal arg '(16))
            (delete-dups
             (append (when (buffer-file-name) (list (buffer-file-name)))
                     (directory-files-recursively current-dir ".*\\(\\.org\\|\\.txt\\)$"))))))
         (org-default-notes-file nil))  ; Disable default notes file temporarily
    (org-agenda))                       ; Open the standard agenda view.
    ;; Uncomment below line if custom agenda view is needed:
    ;; (org-agenda nil "f.")               ; Generate a custom Org agenda view.
)
#+end_src

Usage:
- ~M-x lvn-org-agenda-for-current-buffer~ → Agenda for current buffer only.
- ~C-u M-x lvn-org-agenda-for-current-buffer~ → Agenda for current buffer + all
  =.org= files in the current directory and subdirectories.
- ~C-u C-u M-x lvn-org-agenda-for-current-buffer~ → Agenda for current
  buffer + all =.org= and =.txt= files in the current directory and subdirectories.

This way, you can dynamically adjust the scope of the agenda view based on the
level of the universal argument.

#+begin_src emacs-lisp
(global-set-key (kbd "<S-f6>")
                (lambda ()
                  (interactive)
                  (lvn-org-agenda-for-current-buffer nil)))
                                        ; Without arg: current buffer only.

(global-set-key (kbd "<C-f6>")
                (lambda ()
                  (interactive)
                  (lvn-org-agenda-for-current-buffer '(4))))
                                        ; With C-u: current buffer + .org files.

(global-set-key (kbd "<M-f6>")
                (lambda ()
                  (interactive)
                  (lvn-org-agenda-for-current-buffer '(16))))
                                        ; With C-u C-u: current buffer + .org + .txt files.
#+end_src

** Custom agenda views in Org mode

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("d" "Dashboard" ; Shows all tasks...
               ;; High Priority Tasks.
               ((tags-todo "+PRIORITY={A}"
                           ((org-agenda-overriding-header "High Priority Tasks:")))
                ;; Tasks Due This Week.
                (tags-todo "+DEADLINE<=\"<+7d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Tasks Due This Week:")))
                ;; Scheduled Tasks (Next 14 Days).
                (tags-todo "+SCHEDULED<=\"<+14d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Scheduled Tasks (Next 14 Days):")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "CANX") 'deadline))))
                ;; Tasks with Future Deadlines.
                (tags-todo "+DEADLINE>\"<+7d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Tasks with Future Deadlines:")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "CANX")))
                            (org-agenda-sorting-strategy '(deadline-up))))
                ;; Task states: WAIT, STRT, NEXT, TODO, MAYB.
                ,@(mapcar (lambda (state)
                            `(todo ,state
                                   ((org-agenda-overriding-header (concat ,state " Tasks:"))
                                    (org-agenda-skip-function '(or (org-agenda-skip-entry-if 'scheduled 'deadline)
                                                                   (org-agenda-skip-entry-if 'regexp "\\[#A\\]"))))))
                          '("WAIT" "STRT" "NEXT" "TODO" "MAYB"))
                ;; Completed or Cancelled Tasks (Inactive tasks with clock entries this week).
                (todo "DONE|CANX"
                      ((org-agenda-overriding-header "Completed or Cancelled Tasks (This Week):")
                       ;; Show tasks with clock entries in the current week.
                       (org-agenda-log-mode-items '(clock)) ; Show clocked entries.
                       (org-agenda-span 'week)              ; Filter to current week.
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'notregexp "CLOCK:")) ; Only tasks with clock entries.
                       ;; (org-agenda-skip-function
                       ;;  '(org-agenda-skip-entry-if 'notregexp "CLOSED:")) ; Ensure the task is closed (completed or cancelled).
                       )))
               ;; ;; Compact blocks.
               ;; ((org-agenda-compact-blocks t))
               ))
#+end_src

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((tags-todo "+PRIORITY={A}"
                     ((org-agenda-overriding-header "High Priority Tasks")))
          (tags-todo "+DEADLINE<=\"<+7d>\"-PRIORITY={A}"
                     ((org-agenda-overriding-header "Tasks Due This Week")))
          (tags-todo "+SCHEDULED<=\"<+14d>\"-PRIORITY={A}"
                     ((org-agenda-overriding-header "Scheduled Tasks (Next 14 Days)")))
          (tags-todo "+DEADLINE>\"<+7d>\"-PRIORITY={A}"
                     ((org-agenda-overriding-header "Future Deadlines")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))  ; Skip tasks with SCHEDULED property.
                      (org-agenda-sorting-strategy '(deadline-up))))
          (todo "DONE|CANX"
                ((org-agenda-overriding-header "Completed or Cancelled Tasks")
                 (org-agenda-span 'week))))))) ; OK -- No duplicates!!!

(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((tags-todo "+PRIORITY={A}"
                     ((org-agenda-overriding-header "High Priority Tasks")))
          (tags-todo "+DEADLINE<=\"<+7d>\"-PRIORITY={A}"
                     ((org-agenda-overriding-header "Tasks Due This Week")))
          (tags-todo "+SCHEDULED<=\"<+14d>\"-PRIORITY={A}"
                     ((org-agenda-overriding-header "Scheduled Tasks (Next 14 Days)")))
          (tags-todo "+DEADLINE>\"<+7d>\"-SCHEDULED>\"<+14d>\"-PRIORITY={A}" ; Exclude tasks scheduled within the next 14 days.
                     ((org-agenda-overriding-header "Future Deadlines")
                      (org-agenda-sorting-strategy '(deadline-up))))
          (todo "DONE|CANX"
                ((org-agenda-overriding-header "Completed or Cancelled Tasks")
                 (org-agenda-span 'week))))))) ; NOK -- Duplicates!!!
#+end_src

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("h" "High priority tasks"
         ((tags-todo "+PRIORITY={A}-SCHEDULED>=\"<today>\"-DEADLINE>=\"<today>\""
                     ((org-agenda-overriding-header "High Priority Tasks")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'scheduled 'deadline))))
          (tags-todo "-SCHEDULED>=\"<today>\"-DEADLINE>=\"<today>\""
                     ((org-agenda-overriding-header "Other Current Tasks")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'scheduled 'deadline)))))
         nil)))
#+end_src

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("p" . "Priority views")
        ("pa" "A items" tags-todo "+PRIORITY={A}")
        ("pb" "B items" tags-todo "+PRIORITY={B}")
        ("pc" "C items" tags-todo "+PRIORITY={C}")))
#+end_src

** Next actions

The next action tasks are either:
- high priority,
- due soon (e.g., within the next 7 days),
- scheduled for the near future (e.g., within the next 14 days), or
- don't have specific dates but are marked as STRT or TODO,

making them potential next actions.

** Weekly review

MAYB tasks are not shown here... Nor future schedules or deadlines

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("r" "Weekly Review Cgpt"
               ((tags-todo "+PRIORITY={A}"
                           ((org-agenda-overriding-header "High Priority Tasks (Unscheduled or Within 1 Week):")
                            (org-agenda-skip-function
                             '(lvn--org-skip-tasks-scheduled-over-n-days))))
                ;; Tasks from the past week.
                (tags-todo "+SCHEDULED<\"<+7d>\"+DEADLINE<\"<+7d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Tasks from the Past Week:")))
                ;; Tasks due this week.
                (tags-todo "+DEADLINE<=\"<+7d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Tasks Due This Week:")))
                ;; Tasks scheduled for this week (Not due this week).
                (tags-todo "+SCHEDULED<=\"<+7d>\"-DEADLINE<=\"<+7d>\"-PRIORITY={A}"
                           ((org-agenda-overriding-header "Tasks Scheduled for This Week:")))
                ;; Active tasks (TODO, STRT, WAIT).
                (todo "TODO|STRT|WAIT"
                      ((org-agenda-overriding-header "Active Tasks:")
                       (org-agenda-skip-function
                        '(or (org-agenda-skip-entry-if 'deadline '("<+7d>"))
                             (org-agenda-skip-entry-if 'scheduled '("<+7d>"))
                             (org-agenda-skip-entry-if 'regexp "\\[#A\\]")))))
                ;; Completed tasks for review (can be adjusted as needed).
                (todo "DONE|CANX"
                      ((org-agenda-overriding-header "Completed or Cancelled Tasks (This Week):")
                       ;; XXX Does not work!
                       (org-agenda-span 'week)))
                )
               ;; ;; Display in a compact view.
               ;; ((org-agenda-compact-blocks t))
               ))

(defun lvn--org-skip-tasks-scheduled-over-n-days (&optional days)
  "Skip entries scheduled more than DAYS (default 7) in the future."
  (let* ((days (or days 7))
         (scheduled-time (org-get-scheduled-time (point)))
         (n-days-later (time-add (current-time) (* days 24 60 60)))
         (headline (org-element-at-point))
         (skip (org-element-property :end headline))
         (dont-skip nil))

    (cond
     ;; Tasks without a scheduled time are never skipped.
     ((and (not scheduled-time))
      dont-skip)

     ;; Tasks scheduled within DAYS are not skipped.
     ((and scheduled-time
           (not (time-less-p n-days-later scheduled-time)))
      dont-skip)

     ;; All other cases.
     (t skip))))
#+end_src

https://stackoverflow.com/questions/21118288/making-org-agenda-list-hide-items-scheduled-for-the-future

Explanation of Sections

1. High Priority Tasks
   - Displays tasks marked with ~PRIORITY={A}~ that need immediate attention.
2. Tasks from the Past Week
   - Lists tasks that were scheduled or had deadlines in the past week,
     excluding high-priority tasks. This helps ensure that nothing was missed in
     previous planning.
3. Tasks Due This Week
   - Shows tasks with deadlines within the next 7 days.
4. Tasks Scheduled for This Week
   - Highlights tasks scheduled for this week but without imminent
     deadlines. This is useful for planning ahead and balancing workload.
5. Active Tasks \\
   Includes tasks with statuses of ~TODO~, ~STRT~, or ~WAIT~, excluding:
   - Future deadlines or schedules (beyond 7 days).
   - Tasks already marked as high-priority (~[#A]~).
6. Completed or Cancelled Tasks
   - Allows for a quick review of tasks marked as ~DONE~ or ~CANX~ within the past
     week to identify any follow-ups or additional actions that might be
     required.

Notes
- Excluded Items: Tasks marked with ~MAYB~, or tasks scheduled or due in the
  future, are intentionally omitted from this view. This keeps the focus on
  actionable and relevant tasks for the current week.
- Review Process: Use the "Completed or Cancelled Tasks" section to assess
  whether there are any post-action steps for *recently completed* work.

Review *recently completed or cancelled tasks* for any post-action steps that need
attention.

*** Other

#+begin_src emacs-lisp :tangle no
(add-to-list 'org-agenda-custom-commands
             '("w" "Weekly Review Perp"
               ((agenda "" ((org-agenda-span 7)
                            (org-agenda-start-on-weekday 1)
                            (org-agenda-start-day "-1d")
                            (org-agenda-overriding-header "This Week's Schedule:")))
                (tags-todo "+PRIORITY=\"A\""
                           ((org-agenda-overriding-header "High Priority Tasks:")))
                (tags-todo "+DEADLINE<=\"<+7d>\"-PRIORITY=\"A\""
                           ((org-agenda-overriding-header "Tasks Due This Week:")))
                (todo "WAIT"
                      ((org-agenda-overriding-header "Waiting Tasks:")
                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "\\[#A\\]"))))
                (todo "STRT"
                      ((org-agenda-overriding-header "In-Progress Tasks:")
                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "\\[#A\\]"))))
                ;; XXX Does not work!
                ;; (todo "DONE|CANX"
                ;;       ((org-agenda-overriding-header "Completed or Cancelled Tasks:")
                ;;        (org-agenda-span 7)))
                )
               ;; ((org-agenda-compact-blocks t))
               ))
#+end_src

This approach ensures that *high-priority tasks* are only *kept in the "High
Priority Tasks" section* while avoiding duplicating them in other more general
sections (such as "Started Tasks" or "Waiting Tasks"). It maintains the emphasis
on urgent and important tasks without losing any information.

** Dotfiles-based Org agenda management

#+begin_src emacs-lisp
(defun lvn-set-org-agenda-files-dotfiles-todo (&optional root-dir)
  "Set `org-agenda-files` to all TODO.org and TODO-xxx.org files
in the root directories of repositories under ROOT-DIR.
If ROOT-DIR is not provided, it defaults to `~/.dotfiles/`."
  (interactive
   (list (read-directory-name "Root directory: " "~/.dotfiles/" nil t)))
                                        ; Prompt interactively for ROOT-DIR,
                                        ; defaulting to `~/.dotfiles/`.
  (let ((todo-files '())) ;; Temporary list to store the found files.
    ;; Set ROOT-DIR to default if not provided.
    (setq root-dir (or root-dir "~/.dotfiles/"))
    ;; Iterate over the immediate subdirectories of ROOT-DIR.
    (dolist (subdir (directory-files root-dir t "^[^.]" t))
                                        ; Exclude hidden files ("." and "..").
      (when (and (file-directory-p subdir) ; Ensure it's a directory.
                 (not (file-symlink-p subdir))) ; Ignore symbolic links.
        ;; Look for files matching the pattern `TODO.org` or `TODO-xxx.org` in
        ;; the subdir.
        (dolist (todo-file (directory-files subdir t "^TODO\\(-.*\\)?\\.org$"))
          (push todo-file todo-files)))) ; Add each matching file to the list.
    ;; Update `org-agenda-files` with the found files.
    (setq org-agenda-files todo-files)
    ;; Message and return the list of files for verification.
    (message "[Org agenda files set to: %s]" org-agenda-files)
    org-agenda-files))
#+end_src

#+begin_src emacs-lisp
(defun lvn-set-org-agenda-files ()
  "Set `org-agenda-files` to all `.org` files in `org-directory`."
  (interactive)
  (setq org-agenda-files (directory-files org-directory t "\\.org$"))
  (message "[Org agenda files set to: %s]" org-agenda-files))
#+end_src

** Adapted From Bastien

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("@d" "Daily review (Personal focus)"
               ((agenda ""
                        ((org-agenda-span 'week)
                         (org-agenda-entry-types '(:deadline :scheduled))
                         (org-agenda-prefix-format "  %?-12t% s")
                         (org-agenda-overriding-header "1. Scheduled/Deadline this week (no work)")))
                (tags-todo "TODO={STRT\\|NEXT}"
                           ((org-agenda-overriding-header "2. Tasks with STRT or NEXT (no work)"))))
               ;; Globally exclude 'work' tagged entries, including inherited
               ;; tags, from both blocks.
               ((org-agenda-tag-filter-preset '("-work")))))

(add-to-list 'org-agenda-custom-commands
             `("$d" "Daily review (Work focus)"
               ((agenda ""
                        ((org-agenda-span 'week)
                         (org-agenda-entry-types '(:deadline :scheduled))
                         (org-agenda-prefix-format "  %?-12t% s")
                         (org-agenda-overriding-header "1. Scheduled/Deadline this week (work)")))
                (tags-todo "TODO={STRT\\|NEXT}"
                           ((org-agenda-overriding-header "2. Tasks with STRT or NEXT (work)"))))
               ;; Globally include 'work' tagged entries, including inherited
               ;; tags, from both blocks.
               ((org-agenda-tag-filter-preset '("+work")))))

(add-to-list 'org-agenda-custom-commands
             `("!d" "Daily review (Full focus - Work + Personal)"
               ((agenda ""
                        ((org-agenda-span 'week)
                         (org-agenda-entry-types '(:deadline :scheduled))
                         (org-agenda-prefix-format "  %?-12t% s")
                         (org-agenda-overriding-header "1. Scheduled/Deadline this week (all)")))
                (tags-todo "TODO={STRT\\|NEXT}"
                           ((org-agenda-overriding-header "2. Tasks with STRT or NEXT (all)"))))
               ;; No org-agenda-tag-filter-preset, so nothing filtered.
               ))
#+end_src

#+begin_note
In a block agenda, the variable ~org-agenda-tag-filter-preset~ should be set in
the global options to apply it across the entire view. Defining it for
individual blocks does not work reliably...
#+end_note

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("$w" "Weekly routine"
               (;; Weekly routine #1.
                (agenda ""
                        ((org-deadline-warning-days 30)))
                (todo "TODO"
                      ((org-agenda-skip-function
                        '(or (org-entry-is-done-p)
                             (org-agenda-skip-if nil '(scheduled deadline))))
                       (org-agenda-overriding-header "2. Unscheduled TODOs"))))
               ;; Globally exclude 'work' tagged entries, including inherited
               ;; tags, from both blocks.
               ((org-agenda-tag-filter-preset '("+work")))))

(add-to-list 'org-agenda-custom-commands
             `("!w" "Weekly routine"
               (;; Weekly routine #1.
                (agenda ""
                        ((org-deadline-warning-days 30)))
                (todo "TODO"
                      ((org-agenda-skip-function
                        '(or (org-entry-is-done-p)
                             (org-agenda-skip-if nil '(scheduled deadline))))
                       (org-agenda-overriding-header "2. Unscheduled TODOs")))
                )))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("$W" "Weekly Review"
               (
                ;; Show completed tasks from the past 7 days.
                (agenda ""
                        ((org-agenda-span 7)
                         (org-agenda-start-day "-7d")
                         (org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-show-log 'closed)
                         (org-agenda-overriding-header "1. Completed Tasks (Past 7 Days)")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'notregexp "\\* DONE\\|CANCELLED"))))
                ;; Show NEXT tasks (immediately actionable).
                (todo "NEXT"
                      ((org-agenda-overriding-header "2. Next Actions")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                ;; Show TODO and WAIT tasks (pending, not immediately actionable).
                (todo "TODO|WAIT"
                      ((org-agenda-overriding-header "3. Other Pending Tasks")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                ;; Show upcoming deadlines in the next 7 days.
                (agenda ""
                        ((org-agenda-span 7)
                         (org-agenda-start-day "0d")
                         (org-agenda-entry-types '(:deadline))
                         (org-agenda-overriding-header "4. Upcoming Deadlines (Next 7 Days)")))
                ;; Show events or scheduled items for the next 7 days.
                (agenda ""
                        ((org-agenda-span 7)
                         (org-agenda-start-day "0d")
                         (org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-overriding-header "5. Upcoming Events (Next 7 Days)"))))
               ;; Globally exclude 'work' tagged entries, including inherited tags.
               ((org-agenda-tag-filter-preset '("+work")))))
#+end_src

Merged into:

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             `("$F" "Weekly Plan & Review"
               (
                ;; 1. Completed tasks (past 7 days) from $W
                (agenda ""
                        ((org-agenda-span 7)
                         (org-agenda-start-day "-7d")
                         (org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-show-log 'closed)
                         (org-agenda-overriding-header "1. Completed Tasks (Past 7 Days)")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'notregexp "\\* DONE\\|CANCELLED"))))
                ;; 2. Main agenda with deadlines (30-day warning) from !w
                (agenda ""
                        ((org-agenda-span 7)
                         (org-agenda-start-day "0d")
                         (org-deadline-warning-days 30)
                         (org-agenda-overriding-header "2. Upcoming Schedule & Deadlines")))
                ;; 3. NEXT tasks from $W
                (todo "NEXT"
                      ((org-agenda-overriding-header "3. Next Actions")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                ;; 4. Unscheduled TODOs from !w
                (todo "TODO"
                      ((org-agenda-skip-function
                        '(or (org-entry-is-done-p)
                             (org-agenda-skip-if nil '(scheduled deadline))))
                       (org-agenda-overriding-header "4. Unscheduled TODOs")))
                ;; 5. Optional: Pending WAIT tasks from $W
                (todo "WAIT"
                      ((org-agenda-overriding-header "5. Pending Tasks")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline)))))
               ;; Optional: Work tag filter from $W
               ((org-agenda-tag-filter-preset '("+work")))))
#+end_src

(add-to-list org-agenda-custom-commands
      `("w" "Weekly Review"
         (
          ;; 1. Capturing (custom entry, not agenda)
          (tags "inbox"
                ((org-agenda-overriding-header "1. Capturing: Process your Inbox")
                 (org-agenda-files '("~/org/inbox.org"))))
          ;; 2. Clarifying (could be a checklist or manual step)
          (tags "clarify"
                ((org-agenda-overriding-header "2. Clarifying: Clarify and process captured items")
                 (org-agenda-files '("~/org/inbox.org"))))
          ;; 3. Past Events
          (agenda ""
                  ((org-agenda-span 'week)
                   (org-agenda-start-day "-7d")
                   (org-agenda-overriding-header "3. Past Events: Review last week's calendar")))
          ;; 4. Next Events
          (agenda ""
                  ((org-agenda-span 'week)
                   (org-agenda-start-day "+0d")
                   (org-agenda-overriding-header "4. Next Events: Prepare for upcoming week")))
          ;; 5. Next Actions
          (tags-todo "NEXT"
                     ((org-agenda-overriding-header "5. Next Actions: Review next actions")))
          ;; 6. Waiting For
          (tags-todo "WAITING"
                     ((org-agenda-overriding-header "6. Waiting For: Review waiting items")))
          ;; 7. Projects
          (tags-todo "PROJECT"
                     ((org-agenda-overriding-header "7. Projects: Review project list")))
          ;; 8. Someday/Maybe
          (tags-todo "SOMEDAY"
                     ((org-agenda-overriding-header "8. Someday/Maybe: Review someday/maybe")))
          ;; 9. Ideas
          (tags "idea"
                ((org-agenda-overriding-header "9. Ideas: Review and capture new ideas")
                 (org-agenda-files '("~/org/ideas.org"))))
          ;; 10. Finishing (custom entry, not agenda)
          ))
        )

#+begin_src emacs-lisp
;; (global-set-key (kbd "C-c $") (lambda () (interactive) (org-agenda nil "w")))  ;; Work view
;; (global-set-key (kbd "C-c @") (lambda () (interactive) (org-agenda nil "p")))  ;; Personal view
#+end_src

*** TODO Use a prefix like "c" (for custom) to group all custom agenda views, e.g., "cwt" and "cpn", to further avoid conflicts?

* Buggy commands
:PROPERTIES:
:header-args+: :tangle no
:END:

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("Ee" "Print reports (TODO)"
               ;; See ThinkingRock examples.
               ((agenda ""
                        ((org-agenda-overriding-header "Scheduled TODO's")
                         (org-agenda-prefix-format "%8e ")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'regexp "habit"))
                         (org-agenda-sorting-strategy '(todo-state-up))
                         (org-agenda-span 'week)
                         (org-agenda-todo-keyword-format "%-4s")))
                (tags-todo "thisweek"
                           ((org-agenda-overriding-iding-header
                             "Unscheduled TODO's; Also tasks (from which todo's were generated)")
                            (org-agenda-prefix-format "%-7e")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled))
                            (org-agenda-sorting-strategy '(todo-state-up))
                            (org-agenda-todo-keyword-format "%-10s"))))
               ((org-agenda-remove-tags t))
               ("~/org___agenda-de.html"))
             t)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("," . "Priorities...") t)

;; List only priority A tasks for the current day.
(add-to-list 'org-agenda-custom-commands
             '(",A" "Priority #A tasks for today"
               ((agenda ""))
               ((org-agenda-skip-function
                 '(org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]"))
                (org-agenda-span 'day)
                (org-agenda-overriding-header
                 "Today's priority #A tasks: ")))
             t)

;; List priority A and B tasks for the current day.
(add-to-list 'org-agenda-custom-commands
             '(",B" "Priority #A and #B tasks for today"
               ((agenda ""))
               ((org-agenda-overriding-header
                 "Today's priority #A and #B tasks: ")
                (org-agenda-skip-function
                 '(org-agenda-skip-entry-if 'regexp "\\=.*\\[#C\\]"))
                (org-agenda-span 'day)))
             t)
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'org-agenda-custom-commands
;;              '("A" . "0. Agenda...") t)
;;
;; (add-to-list 'org-agenda-custom-commands
;;              '("AF" "Agenda of upcoming due dates (6 months)"
;;                ;; FIXME We don't see DEADLINE with `-1m' (or so)
;;                ;; specifications (if they are more than 1m ahead of now)!
;;                ((agenda ""))
;;                ((org-agenda-skip-function
;;                  '(org-agenda-skip-entry-if 'notdeadline))
;;                 (org-agenda-span 'day)
;;                 (org-agenda-time-grid nil)
;;                 (org-deadline-warning-days 183)))
;;              t)
;;              ;; Some SCHEDULED are shown (when paired with a deadline and
;;              ;; scheduled in the past or for today).
#+end_src

* Unused code

#+begin_src emacs-lisp :tangle no
("d" "Daily Agenda"
 ((agenda ""
          ((org-agenda-todo-keyword-format "")
           (org-agenda-remove-tags t)))
  (tags "LEVEL=2+goals"
        ((org-agenda-remove-tags t)
         (org-agenda-prefix-format "  ")
         (org-agenda-todo-keyword-format "")))
  (todo "TODO"
        ((org-agenda-sorting-strategy '(tag-up))
         (org-agenda-show-inherited-tags nil)
         (org-agenda-todo-keyword-format "")))
  (todo "STRT"
        ((org-agenda-todo-keyword-format "")))
  (stuck ""
         ((org-agenda-remove-tags t)))))

("p" "Printed agenda"
 ((agenda ""
          ((org-agenda-span 'week)
           (org-agenda-start-on-weekday nil)
           (org-agenda-time-grid nil)
           ;; (org-agenda-repeating-timestamp-show-all t)
           (org-agenda-prefix-format "  -->  %t %s")
           (org-agenda-skip-function
            '(org-agenda-skip-entry-if 'deadline 'scheduled))))
  (agenda ""
          ((org-agenda-span 'day)
           (org-agenda-sorting-strategy '(time-up tag-up))
           (org-agenda-todo-keyword-format "[ ]")
           (org-agenda-scheduled-leaders '("" ""))
           (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
           (org-agenda-prefix-format "%t %T %s")
           ))
  (agenda ""
          ((org-agenda-span 'day)
           (org-deadline-warning-days 7)
           (org-agenda-time-grid nil)
           (org-agenda-include-diary nil)
           (org-agenda-todo-keyword-format "[ ]")
           (org-agenda-scheduled-leaders '("" ""))
           (org-agenda-overriding-header "Due Dates:")
           (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
           (org-agenda-prefix-format "%t %s")))
  (todo "TODO|STRT"
        ((org-agenda-sorting-strategy '(tag-up priority-down))
         (org-agenda-todo-ignore-with-date t)))
  (todo "WAIT"))
 ((org-agenda-with-colors nil)
  (org-agenda-prefix-format "%T [ ]")
  (org-agenda-todo-keyword-format "")
  (org-agenda-remove-tags t)
  (ps-number-of-columns 2)
  ;; (ps-print-header nil)
  (ps-landscape-mode t))
 ("~/org___agenda-storage.pdf"))
#+end_src

* Test cases

- Entries with no TODO keyword, but well with a DEADLINE.
- Scheduled date, but no deadline
- Scheduled date and deadline
  + on the same date
  + on different dates
- No scheduled date, well a deadline
- MAYB with a deadline date
- Entries with "timed" dates

* Org mode
:PROPERTIES:
:header-args+: :tangle no
:END:

** Lists

1. Inbox
2. Today
3. Next
4. Tomorrow
5. Scheduled
6. Maybe/Someday
7. Waiting for

#+begin_src emacs-lisp
(progn

  (setq org-agenda-custom-commands nil)

  (add-to-list 'org-agenda-custom-commands
               '("0" "Calendar for today" ; For the events.
                 ((agenda ""))
                 ((org-agenda-overriding-header "Calendar for today")
                  (org-agenda-entry-types '(:timestamp :sexp))
                  (org-agenda-span 'day)
                  (org-agenda-sorting-strategy '(time-up))
                  (org-agenda-time-grid '((daily remove-match)
                                          ""
                                          (800 1000 1200 1400 1600 1800 2000)))))
               t)

  (add-to-list 'org-agenda-custom-commands
               '("1" "Inbox"
                 ((tags-todo "TODO={MAYB}"))
                 ((org-agenda-overriding-header "Inbox")
                  (org-agenda-sorting-strategy '(category-up))))
               t)

  ;; Sorting by ascendant deadline does not work.
  (add-to-list 'org-agenda-custom-commands
               '("2" "Today"
                 ((tags-todo "SCHEDULED<\"<tomorrow>\"|DEADLINE<\"<tomorrow>\"")) ; For tasks with a time component for today.
                 ((org-agenda-overriding-header "Today")
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)

  (add-to-list 'org-agenda-custom-commands
               '("3" "Next"
                 ((tags-todo "TODO<>{MAYB\\|WAIT}"))
                 ((org-agenda-overriding-header "Next")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)

  (add-to-list 'org-agenda-custom-commands
               '("4" "Tomorrow"
                 ((tags-todo "SCHEDULED>=\"<+1d>\"+SCHEDULED<\"<+2d>\""))
                 ((org-agenda-overriding-header "Tomorrow")
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)

  (add-to-list 'org-agenda-custom-commands
               '("6" "Maybe/Someday"
                 ((tags-todo "TODO={MAYB}"))
                 ((org-agenda-overriding-header "Maybe/Someday")
                  (org-agenda-filter-preset '("+MAYB"))
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)

  (add-to-list 'org-agenda-custom-commands
               '("7" "Waiting for"
                 ((tags-todo "TODO={WAIT}"))
                 ((org-agenda-overriding-header "Waiting for")
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)

)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
             '("Z" "Full list"
               ((agenda ""
                        ((org-agenda-overriding-header "Calendar for today")
                         (org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-span 'day)
                         (org-agenda-sorting-strategy '(time-up))
                         (org-agenda-time-grid '((daily remove-match)
                                                 ""
                                                 (800 1000 1200 1400 1600 1800 2000)))))

               (tags-todo "TODO={MAYB}"
                           ((org-agenda-overriding-header "Inbox")
                            (org-agenda-sorting-strategy '(category-up))))

               (tags-todo "SCHEDULED<\"<tomorrow>\"|DEADLINE<\"<tomorrow>\"" ; For tasks with a time component for today.
                           ((org-agenda-overriding-header "Today")
                            (org-agenda-sorting-strategy '(deadline-up))))

               (tags-todo "TODO<>{MAYB\\|WAIT}"
                           ((org-agenda-overriding-header "Next")
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                            (org-agenda-sorting-strategy '(deadline-up))))

               (tags-todo "SCHEDULED>=\"<+1d>\"+SCHEDULED<\"<+2d>\""
                           ((org-agenda-overriding-header "Tomorrow")
                            (org-agenda-sorting-strategy '(deadline-up))))

               (tags-todo "TODO={MAYB}"
                           ((org-agenda-overriding-header "Maybe/Someday")
                            (org-agenda-filter-preset '("+MAYB"))
                            (org-agenda-sorting-strategy '(deadline-up))))
               ;; Ignore DEADLINE < tomorrow.
               (tags-todo "TODO={WAIT}"
                          ((org-agenda-overriding-header "Waiting for")
                           (org-agenda-sorting-strategy '(deadline-up))))))
             t)
#+end_src

Chercher l'erreur :

- WAIT avec ASSIGNEE property
- MAYB avec SCHEDULED date
- WAIT avec SCHEDULED (plutôt que DEADLINE)

#+begin_src emacs-lisp
(progn

  (setq org-agenda-custom-commands nil)

  (add-to-list 'org-agenda-custom-commands
               '("E1" "Maybe/Someday with a SCHEDULED date"
                 ((tags-todo "TODO={MAYB}"))
                 ((org-agenda-overriding-header "Maybe/Someday")
                  (org-agenda-filter-preset '("+MAYB"))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
                  (org-agenda-sorting-strategy '(deadline-up))))
               t)


  (defun org-cmp-assignee (a b)
    "Compare the assignee values of strings A and B."
    (let ((aa (or (get-text-property 1 'assignee a) ""))
          (ab (or (get-text-property 1 'assignee b) "")))
      (cond ((string-lessp aa ab) -1)
            ((string-lessp ab aa) +1)
            (t nil)                   ; Same assignee.
            )))

  (setq org-agenda-sorting-strategy
        (quote ((agenda user-defined-up)
                (todo user-defined-up)
                (tags user-defined-up)
                (search user-defined-up))))

  (setq org-agenda-cmp-user-defined 'org-cmp-assignee)

  (add-to-list 'org-agenda-custom-commands
               '("E7" "Delegated"
                 ((tags-todo "TODO={WAIT}"))
                 ((org-agenda-overriding-header "Waiting For")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                  (org-agenda-sorting-strategy '(user-defined-up))
                  (org-agenda-cmp-user-defined 'org-cmp-assignee)
                  (org-agenda-overriding-columns-format "%80ITEM(Task) %32Assignee(Assignee)")
                  (org-agenda-view-columns-initially t)
                 ))
               t)
)
#+end_src

Ignore ~SCHEDULED~?
1. ~(org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))~ WORKS
2. ~org-agenda-todo-ignore-scheduled~

* Tips and tricks

** DEADLINE

Writing ~DEADLINE={}~ is wrong. You must write:

#+begin_example
DEADLINE=""
#+end_example

** Tasks with a time component

To be sure to get tasks with a time component in the lists, use

#+begin_example
  < <tomorrow>
#+end_example

instead of

#+begin_example
  = <today>
#+end_example

** Cas d'erreurs

|              | no state  | with TODO                |
|--------------+-----------+--------------------------|
| active ts    | in agenda | in agenda                |
| scheduled ts | in agenda | in agenda + in tags-todo |

Les cas:

- sans state mais avec SCHEDULED date
- avec state mais un timestamp actif

devraient être considérés comme erronés...

* Footer

#+begin_src emacs-lisp
(provide 'org-leuven-agenda-views)

;;; org-leuven-agenda-views.el ends here
#+end_src

* COMMENT Notes

> Is it possible, for tasks that have a repeated DEADLINE, to get Org-Mode to
> clear the non-repeated SCHEDULED date?

Simply add a repeater to the scheduled date too:

#+begin_src org :tangle no
,* TODO My Weekly Task
  DEADLINE <2013-08-10 Sat +1w> SCHEDULED: <2013-08-08 Thu +1w>
#+end_src

You may also want to have a look at this option:

#+begin_example
C-h v org-agenda-skip-deadline-prewarning-if-scheduled RET
#+end_example

** Remove TODO keywords

So, for example: to hide TODO keywords from the agenda:

#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
      '(("a" agenda ""
         ((org-agenda-todo-keyword-format "")))))
#+end_src

* Tasks                                                               :noexport:

** Only show the REFILE section if items are there

https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00266.html

** Count of items

"3 of 6"

Overall count: 6 projects.

** See Jira workflows

https://www.idalko.com/jira-workflow-best-practices/

** JIRA Priority Definition for Bugs

Use this guideline to setup the mandatory "JIRA Priority" field.

- Highest ::

     Catastrophic defect that causes total failure of the software or
     unrecoverable data loss with no available workaround. Complete shut-down of
     the process, nothing can proceed further. Blocks testing of the product
     / feature.

     Must be fixed in the next build.

- High ::

     Severely impaired functionality. Erratic performance and reduced system
     availability. It may cause major components or features of the system to be
     unavailable although certain parts of the system remain
     functional. A workaround may exist but its use is unsatisfactory or at
     a high time cost (manual intervention required).

     Must be fixed in any of the upcoming builds and should be included in the
     current release.

- Medium ::

     Failure of non-critical aspects of the system but results in an
     inconvenient situation. It causes some undesirable behavior, but the system
     is still functional. There is a reasonably satisfactory workaround. It is
     still a valid defect that should be corrected

     May be fixed after the release or in the next release.

- Low ::

     It won't cause any major break-down of the system. It does not result in
     the termination of services, does not impact usability of the system and
     the desired results can be easily obtained by a workaround.

     Fix can be deferred until after more serious defect have been fixed.

- Lowest ::

     No impact to the functionality. More related to the enhancement of the
     system.

     May or may not be fixed at all

** TODO Look at Podio for nice colors for the agenda buffer

** TODO [#C] Organize your tasks, your team and your files

http://manageitapp.com/ (nice look for Web site as well)

** TODO Check interesting stuff from LiquidPlanner

http://www.liquidplanner.com/support/videos/daily-task-management/

** TODO Convert <+0d> into <today>

Check first that all the correct tasks are shown, the ones with a time part and
the ones without...

** TODO Si restriction à un fichier (TODO-Org.org), f7 (C-a f .) montre les tâches comme venant du inbox!

** TODO Voir s'il faut montrer les tâches quel que soit leur niveau

Éventuellement, ne montrer que les tâches de niveau <= 2.

Dans ce cas, il faudrait que des tâches de niveau 3 ou plus qui aient un
~SCHEDULE~ ou un ~DEADLINE~ rendent leur tâche parent visible dans l'agenda !

Cela permettrait de garder des status TODO sur les sous-tâches (ce qui
bloquerait une fermeture trop aisée de la tâche parent, comme avec des [ ]),
tout en ne polluant pas trop les agendas (et les comptes de tâches).

** TODO Add limits to number of items in TODO views

See Scrum + Kanban = Scrumban at
https://dzone.com/articles/scrum-kanban-scrumban.
