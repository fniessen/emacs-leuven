# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Org-Leuven (Getting Things Done)
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:  emacs, dotfile, config
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2
#+EXCLUDE_TAGS: noexport

#+PROPERTY:  header-args :eval never :padline yes :tangle yes

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* To move

#+begin_src emacs-lisp
    ;; Enable on-the-fly spell checking.
    (add-hook 'org-mode-hook
              #'(lambda ()
                  (if (or (eq (aref (buffer-name) 0) ?\s)
                                        ; Buffer starting with " *".
                          (and (boundp 'org-babel-exp-reference-buffer)
                               org-babel-exp-reference-buffer))
                                        ; Export buffer.
                      (message "[DON'T TURN ON Flyspell mode in `%s']" (buffer-name))
                    (message "[Turning on Flyspell mode in `%s']" (buffer-name))
                    (flyspell-mode))))
#+end_src


#+begin_src emacs-lisp :tangle no
    (defun org-export-as--org-export-as-around (orig-fun &rest args)
      "Turn off Text mode hooks (Flyspell, etc.) when exporting current Org buffer."
      (let ((text-mode-hook nil))
        (apply orig-fun args)))
    (advice-add 'org-export-as :around #'org-export-as--org-export-as-around)
#+end_src

* XXX
:PROPERTIES:
:ID:       737b836b-ac1f-4120-94ca-c9e0282268f0
:END:

- 40 variables most frequently customized in Org
  http://orgmode.org/worg/org-configs/org-customization-survey.html

- Org config examples
  http://repo.or.cz/w/Worg.git/tree/HEAD:/org-configs

#+begin_src emacs-lisp
;; (info "(org)Top") outline-based notes management and organizer
#+end_src

After all the configuration has been done, you can easily manage your daily
work and tasks with Org mode.

#+begin_src emacs-lisp
;;* 1 (info "(org)Introduction")

;;** 1.2 (info "(org)Installation")

;; Autoloads.
(try-require 'org-loaddefs)

;; Getting started.
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))

(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "C-c a") #'org-agenda)

;; Using links outside Org.
(global-set-key (kbd "C-c L") #'org-insert-link-global)
(global-set-key (kbd "C-c O") #'org-open-at-point-global)

(when (or (not (boundp 'org-agenda-files))
          (null org-agenda-files))
  (message "[Found no entries in `org-agenda-files']")
  (sit-for 1.5))

(with-eval-after-load "org"
  ;; Unbind `C-j' and `C-''.
  (define-key org-mode-map (kbd "C-j") nil)
  (define-key org-mode-map (kbd "C-'") nil) ; `org-cycle-agenda-files'.
  (define-key org-mode-map (kbd "<C-S-down>") nil)
  (define-key org-mode-map (kbd "<C-S-up>") nil)

  ;; Double-clicking on the fringe cycles the corresponding subtree.
  (define-key org-mode-map (kbd "<left-fringe> <double-mouse-1>") #'org-cycle))
#+end_src

These variables need to be set before Org mode is loaded.

#+begin_src emacs-lisp
;; These variables need to be set before org.el is loaded...

;; ;; Face to be used by `font-lock' for highlighting in Org mode Emacs
;; ;; buffers, and tags to be used to convert emphasis fontifiers for HTML
;; ;; export. XXX Format changed!
;; (setq org-emphasis-alist              ; Remove the strike-through emphasis.
;;       '(("*" bold "<b>" "</b>")
;;         ("/" italic "<i>" "</i>")
;;         ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
;;         ("=" org-verbatim "<code>" "</code>" verbatim)
;;         ("~" org-code "<code>" "</code>" verbatim)))

;; (setq org-emphasis-alist
;;       '(("&" (:weight ultra-bold :foreground "#000000" :background "#FBFF00"))
;;         ;; ("?" (:box t))
;;         ("!" (:weight ultra-bold :foreground "#B40000")) ; = alert in some Wikis
#+end_src

~org-emphasis-alist~ has a ~:set~ handler ~org-set-emph-re~ which will do the job of
setting up the regexps. I don't want to call ~org-set-emph-re~ directly, instead
I set ~org-emphasis-alist~ to itself and let the customize interface call the
handler for me.

#+begin_src emacs-lisp
(with-eval-after-load "org"
  ;; Allow both single and double quotes in the border.
  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n,")
  (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist)))
#+end_src

#+begin_src emacs-lisp
;; Single character alphabetical bullets (a, b, c, ..., X, Y, Z) are allowed.
(setq org-list-allow-alphabetical t)
#+end_src

If you use ~org-emphasis-alist~ to do simple highlighting, you should better use
[[http://www.emacswiki.org/emacs/AddKeywords][font-lock-add-keywords]].

#+begin_src emacs-lisp
;; Libraries that should (always) be loaded along with `org.el'
;; (loaded when opening the first Org file).
(setq org-modules nil)
#+end_src

Original value was:
- ~org-bbdb~
- ~org-bibtex~
- ~org-docview~
- ~org-gnus~
- ~org-info~
- ~org-jsinfo~
- ~org-irc~
- ~org-mew~
- ~org-mhe~
- ~org-rmail~
- ~org-vm~
- ~org-w3m~
- ~org-wl~

When you have ~org-id~ in ~org-modules~, unique *ID's* are generated when you link
to a task (using ~org-id-get-create~) --- instead of links containing *headline
text*.

ID's are saved in =~/.emacs.d/.org-id-locations= on my system (see
~org-id-locations-file~).

#+begin_src emacs-lisp
;; Check that org-checklist is found before adding it!
;;
;;   ;; Set the RESET_CHECK_BOXES and LIST_EXPORT_BASENAME properties in items as
;;   ;; needed.
;;   (add-to-list 'org-modules 'org-checklist) ; From org-contrib.
#+end_src

#+begin_src emacs-lisp
;; Globally unique ID for Org mode entries (see `org-store-link')
;; (takes care of automatically creating unique targets for internal
;; links, see `C-h v org-id-link-to-org-use-id RET').
(add-to-list 'org-modules 'org-id)
#+end_src

#+begin_note
If you want to insert a *link to a file* in an Org mode document, you can also
call ~org-insert-link~ (~C-c C-l~) with a ~C-u~ prefix (to get the regular ~find-file~
interface).
#+end_note

#+begin_src emacs-lisp
;; Support for links to Gnus groups and messages from within Org mode.
(add-to-list 'org-modules 'org-gnus)
#+end_src

#+begin_src emacs-lisp
;; Habit tracking code for Org mode.
(add-to-list 'org-modules 'org-habit)
#+end_src

#+begin_src emacs-lisp
;; Make sure to turn `org-info' on in order to link to info nodes.
(add-to-list 'org-modules 'org-info)
#+end_src

*************** TODO Look at other modules
- ~org-eval~
- ~org-eval-light~
- ~org-exp-bibtex~
- ~org-exp-blocks~ (supported by the new exporter out of the box)
- ~org-man~
- ~org-mouse~
- ~org-mtags~
- ~org-panel~
- ~org-R~
*************** END

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          #'(lambda ()
              ;; ;; Create a binding for `org-show-subtree'.
              ;; (local-set-key (kbd "C-c C-S-s") #'org-show-subtree)
              ;; (local-set-key (kbd "C-c s") #'org-show-subtree)

              ;; (local-set-key (kbd "C-c h") #'hide-other) ; XXX Helm

              ;; Remove some bindings.
              (local-unset-key (kbd "C-c SPC")) ; Used by Ace Jump.
              (local-unset-key (kbd "C-c C-<")) ; Used by Multiple Cursors.
              ;; (local-unset-key (kbd "C-c %")) ; XXX
              ;; (local-unset-key (kbd "C-c &")) ; XXX

              ))
#+end_src

#+begin_note
See ~(define-key flyspell-mode-map (kbd "C-;") nil))~ for an alternative manner of
unsetting local keys?
#+end_note

* Activation

#+begin_src emacs-lisp
(add-to-list 'package-selected-packages 'helm-org)
(add-to-list 'package-selected-packages 'org-plus-contrib)
(add-to-list 'package-selected-packages 'orgalist)
(add-to-list 'package-selected-packages 'ox-jira)

(with-eval-after-load "org"
  (message "[... Org Introduction]")

  ;;** 1.3 (info "(org)Activation")

  (leuven--section "1.3 (org)Activation")

  ;; Insert the first line setting Org mode in empty files.
  (setq org-insert-mode-line-in-empty-file t))
#+end_src

* Document Structure

#+begin_src emacs-lisp
;;* 2 (info "(org)Document Structure")

(with-eval-after-load "org"
  (message "[... Org Document Structure]")

  ;; Ellipsis to use in the Org mode outline.
  (if (char-displayable-p ?\u25BA)      ; This test takes ~ 0.40s hence,
                                        ; wrapped in `with-eval-after-load'.
      ;; String (black right-pointing pointer).
      (setq org-ellipsis " \u25BA")

    ;; Face.
    (set-face-attribute 'org-ellipsis nil
                        :box "#999999"
                        :foreground "#999999" :background "#FFF8C0"
                        :underline nil)

    (setq org-ellipsis 'org-ellipsis)))

;; RET follows links (except in tables, where you must use `C-c C-o').
(setq org-return-follows-link t)

;; Blank lines.
(setq org-blank-before-new-entry
      '(;; Insert a blank line before new heading.
        (heading . t)

        ;; Try to make an intelligent decision whether to insert a
        ;; blank line or not before a new item.
        (plain-list-item . auto)))
#+end_src

** Headlines

~C-e~ goes *right before* the end of the invisible region and ~TAB~ will unfold as
expected, both in a folded subtree or in a folded drawer.

#+begin_src emacs-lisp
;;** (info "(org)Headlines")

(leuven--section "2.2 (org)Headlines")

;; `C-a' and `C-e' behave specially in headlines and items.
(setq org-special-ctrl-a/e 'reversed)
#+end_src

The package =org-inlinetask.el= (for *tasks independent of outline hierarchy*)
installs the key binding ~C-c C-x t~ to insert a new *inline task*.

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (message "[... Org Headlines]")

  ;; Insert an inline task (independent of outline hierarchy).
  (try-require 'org-inlinetask))      ; Needed.

(with-eval-after-load "org-inlinetask"

  ;; Initial state (TODO keyword) of inline tasks.
  (setq org-inlinetask-default-state "TODO")

  ;; ;; Template for inline tasks in HTML exporter.
  ;; (defun leuven--org-html-format-inlinetask
  ;;     (todo todo-type priority text tags contents &optional info)
  ;;   "Format an inline task element for HTML export."
  ;;   (let ((todo-kw
  ;;          (if todo
  ;;              (format "<span class=\"%s %s\">%s</span> " todo-type todo todo)
  ;;            ""))
  ;;         (full-headline-w/o-todo-kw
  ;;          (concat
  ;;           (when priority (format "[#%c] " priority))
  ;;           text
  ;;           (when tags
  ;;             (concat "&nbsp;&nbsp;&nbsp;"
  ;;                     "<span class=\"tag\">"
  ;;                     (mapconcat #'(lambda (tag)
  ;;                                  (concat "<span class= \"" tag "\">" tag
  ;;                                          "</span>"))
  ;;                                tags
  ;;                                "&nbsp;")
  ;;                     "</span>")))))
  ;;     (concat "<table class=\"inlinetask\" width=\"100%\">"
  ;;               "<tr>"
  ;;                 "<td valign=\"top\"><b>" todo-kw "</b></td>"
  ;;                 "<td width=\"100%\"><b>" full-headline-w/o-todo-kw "</b><br />"
  ;;                   (or contents "") "</td>"
  ;;               "</tr>"
  ;;             "</table>")))
  ;;
  ;; ;; Function called to format an inlinetask in HTML code.
  ;; (setq org-html-format-inlinetask-function
  ;;       'leuven--org-html-format-inlinetask)
  ;;
  ;; ;; Template for inline tasks in LaTeX exporter.
  ;; (defun leuven--org-latex-format-inlinetask
  ;;     (todo todo-type priority text tags contents &optional info)
  ;;   "Format an inline task element for LaTeX export."
  ;;   (let* ((tags-string (format ":%s:" (mapconcat 'identity tags ":")))
  ;;          (opt-color
  ;;           (if tags
  ;;               (cond ((string-match ":info:" tags-string)
  ;;                      "color=yellow!40")
  ;;                     ((string-match ":warning:" tags-string)
  ;;                      "color=orange!40")
  ;;                     ((string-match ":error:" tags-string)
  ;;                      "color=red!40")
  ;;                     (t ""))
  ;;             ""))
  ;;          (full-headline
  ;;           (concat
  ;;            (when todo
  ;;              (format "{\\color{red}\\textbf{\\textsf{\\textsc{%s}}}} "
  ;;                      todo))
  ;;            (when priority
  ;;              (format "\\textsf{\\framebox{\\#%c}} " priority))
  ;;            text
  ;;            (when tags
  ;;              (format "\\hfill{}:%s:"
  ;;                      (mapconcat 'identity tags ":")))))
  ;;          (opt-rule
  ;;           (if contents
  ;;               "\\\\ \\rule[.3em]{\\textwidth}{0.2pt}\n"
  ;;             ""))
  ;;          (opt-contents
  ;;           (or contents "")))
  ;;     ;; This requires the `todonotes' package.
  ;;     (format (concat "\\todo[inline,caption={},%s]{\n"
  ;;                     "  %s\n"
  ;;                     "  %s"
  ;;                     "  %s"
  ;;                     "}")
  ;;             opt-color
  ;;             full-headline
  ;;             opt-rule
  ;;             opt-contents)))
  ;;
  ;; ;; Function called to format an inlinetask in LaTeX code.
  ;; (setq org-latex-format-inlinetask-function
  ;;       'leuven--org-latex-format-inlinetask)
  )                                   ; with-eval-after-load "org-inlinetask" ends here.
#+end_src

#+begin_src emacs-lisp :tangle no
(defun org-latex-format-inlinetask-default-function
  (todo _todo-type priority title tags contents info)
  "Default format function for a inlinetasks.
See `org-latex-format-inlinetask-function' for details."
  (let ((full-title
         (concat (when todo (format "\\textbf{\\textsf{\\textsc{%s}}} " todo))
                 (when priority (format "\\framebox{\\#%c} " priority))
                 title
                 (when tags
                   (format "\\hfill{}\\textsc{:%s:}"
                           (mapconcat
                            #'(lambda (tag) (org-latex-plain-text tag info))
                            tags ":"))))))
    (concat "\\begin{center}\n"
            "\\fcolorbox{black}{yellow}{\n"
            "\\begin{minipage}[c]{\\textwidth}\n"
            full-title "\n\n"
            (and (org-string-nw-p contents)
                 (concat "\\rule[.8em]{\\textwidth}{2pt}\n\n" contents))
            "\\end{minipage}\n"
            "}\n"
            "\\end{center}")))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq org-inlinetask-export-templates
      '((latex "%s\\footnote{%s\\\\ %s}\\marginpar{\\fbox{\\thefootnote}}"
               '((unless
                     (eq todo "")
                   (format "\\fbox{\\textsc{%s%s}}" todo priority))
                 heading content))))
#+end_src

*************** TODO Use todonotes
Why use footnotes when you can use ~todonotes~
(https://www.ctan.org/pkg/todonotes)?

It can even make a ~list-of-todo-notes~.  See also
http://tex.stackexchange.com/questions/9796/how-to-add-todo-notes for more
options.
*************** END

*************** TODO Have a solution for base article, report, book (w/o todonotes)

** Visibility cycling

#+begin_src emacs-lisp
;;** (info "(org)Visibility cycling")

(leuven--section "2.3 (org)Visibility cycling")

;; Switch to OVERVIEW (fold all) at startup.
(setq org-startup-folded t)

;; Inhibit startup when preparing agenda buffers -- agenda optimization.
(setq org-agenda-inhibit-startup t)   ; XXX
#+end_src

#+begin_src emacs-lisp
(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'hyper)       ; Apps key.

(with-eval-after-load "org"
  ;; Create indirect buffer and narrow it to current subtree.
  (define-key org-mode-map (kbd "<H-RET>") #'org-tree-to-indirect-buffer))
#+end_src

Note that *Imenu* does display the current *Org subtree* in the mode line, not the
full outline path.

** 2.4 Motion

#+begin_src emacs-lisp
;;** (info "(org)Motion")

(leuven--section "2.4 (org)Motion")

;; Outline-node based navigation similar to the behavior of paredit-mode in
;; Lisp files.
(add-hook 'org-mode-hook
          #'(lambda ()
              ;; (local-set-key (kbd "M-n")   #'outline-next-visible-heading)
              ;; (local-set-key (kbd "C-M-n") #'outline-next-visible-heading)

              ;; (local-set-key (kbd "M-p")   #'outline-previous-visible-heading)
              ;; (local-set-key (kbd "C-M-p") #'outline-previous-visible-heading)

              ;; (local-set-key (kbd "C-M-u") #'outline-up-heading)
              ))
#+end_src

Move through an Org file like ~cd~ on a file system with ~org-goto~:
~C-c C-j /foo/bar/baz RET~

vs ~C-u C-c C-j~

#+begin_src emacs-lisp
;; Headlines in the current buffer are offered via completion
;; (interface also used by the `refile' command).
(setq org-goto-interface 'outline-path-completion)
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load "org"

  (defun leuven-org-reveal (&optional all-siblings)
    "Show all siblings of current level.
`C-u C-c C-r' does the same as default Org mode: show all hidden siblings."
    (interactive "P")
    (if all-siblings
        (org-reveal t)
      (org-show-siblings)))

  (define-key org-mode-map (kbd "C-c C-r") #'leuven-org-reveal))
#+end_src

See also [[id:a9fe61b7-cdbd-478e-a4af-da9e122fb2d9][Sparse trees]] for behavior when revealing a location.

** Structure editing

#+begin_src emacs-lisp
;;** (info "(org)Structure editing")

(leuven--section "2.5 (org)Structure editing")

;; Don't adapt indentation to outline node level.
(setq org-adapt-indentation nil)

;; ;; FIXME Choose the right value!
;; (setq org-M-RET-may-split-line nil)
#+end_src

** Sparse trees
:PROPERTIES:
:ID:       a9fe61b7-cdbd-478e-a4af-da9e122fb2d9
:END:

#+begin_src emacs-lisp
;;** (info "(org)Sparse trees")

(leuven--section "2.6 (org)Sparse trees")

(with-eval-after-load "org"
#+end_src

To control visibility when revealing a location, see ~org-show-context-detail~:

#+begin_src emacs-lisp
  (when (boundp 'org-show-context-detail)
    ;; (setq org-show-context-detail '((default . local)))
    (add-to-list 'org-show-context-detail '(tags-tree . ancestors))
    (add-to-list 'org-show-context-detail '(occur-tree . ancestors))))
#+end_src

** Plain lists

An empty line does not end all plain list levels: if you need to separate
consecutive lists with blank lines, always use two of them.

#+begin_src emacs-lisp
;;** (info "(org)Plain lists")

(leuven--section "2.7 (org)Plain lists")

;; Maximum indentation for the second line of a description list.
(setq org-description-max-indent 3)

;; Don't make tab cycle visibility on plain list items.
(setq org-cycle-include-plain-lists nil) ;; 'integrate?

;; (setq org-cycle-separator-lines -2)
#+end_src

** Footnotes 

#+begin_src emacs-lisp
;;** (info "(org)Footnotes")

(leuven--section "2.10 (org)Footnotes")

;; Use `C-c C-x f' to add a footnote, to go back to the message
;; *and* to go to a footnote.
(global-set-key (kbd "C-c C-x f") #'org-footnote-action)
#+end_src

* Tables

See [[http://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html][Org as a spreadsheet system: a short introduction]].

#+begin_src emacs-lisp
;;* 3 (info "(org)Tables")

(setq org-table-use-standard-references 'from)

;;** 3.1 The (info "(org)Built-in table editor")

(leuven--section "3.1 The (org)Built-in table editor")

;; Default export parameters for `org-table-export'.
(setq org-table-export-default-format "orgtbl-to-csv")

;;** 3.5 (info "(org)The spreadsheet")

(leuven--section "3.5 (org)The spreadsheet")

(with-eval-after-load "org-table"
  ;; Some Calc mode settings for use in `calc-eval' for table formulas.
  (setcar (cdr (memq 'calc-float-format org-calc-default-modes))
          '(float 12)))               ; [Default: 8]
#+end_src

To *update all tables* in a file, use ~org-table-recalculate-buffer-tables~ if the
dependencies are only backwards.

If you have dependencies in both directions, to iterate all tables in a file,
in order to converge table-to-table dependencies, use
~org-table-iterate-buffer-tables~.

* Hyperlinks

#+begin_src emacs-lisp
;;* 4 (info "(org)Hyperlinks")
#+end_src

If you insert a http:// link containing equal signs (such as
http://test/test?name=me), the verbatim link being inserted in the Org document
has the equal signs escaped, unless you have:

#+begin_src emacs-lisp
;; Don't hexify URL when creating a link.
(setq org-url-hexify-p nil)
#+end_src

** External links

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (message "[... Hyperlinks]")

  ;; ;; Open non-existing files.
  ;; (setq org-open-non-existing-files t)

  ;; Function and arguments to call for following `mailto' links.
  (setq org-link-mailto-program '(compose-mail "%a" "%s")))
#+end_src

#+begin_src emacs-lisp
;; Support for links to Gnus groups and messages from within Org mode.
(with-eval-after-load "org-gnus"

  ;; Create web links to Google groups or Gmane (instead of Gnus messages).
  (setq org-gnus-prefer-web-links t))
#+end_src

** Handling links

#+begin_src emacs-lisp
;; Global identifiers for Org mode entries.
(with-eval-after-load "org-id"

  ;; Storing a link to an Org file will use entry IDs.
  (setq org-id-link-to-org-use-id
        'create-if-interactive-and-no-custom-id))
#+end_src

PDF viewer?  See ~org-file-apps~.  Just change to your favorite viewer.  And make
sure that you're calling ~org-return~ to open (it's bound to ~C-m~).

#+begin_warning
There is no more "sexp" case in ~org-file-apps~ in development version (9.0).  You
can use a function instead.
#+end_warning

If I inline an image in an Org file, I can toggle its display with ~C-c C-x C-v~
and resize it to a specific width.

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (message "[... Handling links]")

  ;; 4.4 Show inline images when loading a new Org file.
  (setq org-startup-with-inline-images t) ; Invokes org-display-inline-images.

  ;; 4.4 Try to get the width from an #+ATTR.* keyword and fall back on 320px
  ;; width if none is found.
  ;; (setq org-image-actual-width '(320)) ; crashes Emacs with Org 9?
#+end_src

Search for backlinks:

#+begin_src emacs-lisp
  (defun leuven-org-search-backlinks ()
    "Show all entries that point to the current node.  Also show the current
node itself.

This makes ID links quasi-bidirectional."
    (interactive)
    (let ((org-agenda-files
           (add-to-list 'org-agenda-files (buffer-file-name))))
      (org-search-view nil (org-entry-get nil "ID" t))))
#+end_src

** Link abbreviations

Link abbreviations provide a quick way of linking to resources that are
frequently referenced, so that you can type just the key term instead of the
complete URL.

Here is an example: every time you need to use
http://www.google.com/search?q=searchterms, you can just type
~[[google:searchterms]]~ or ~[[google:searchterms][description]]~ instead.

#+begin_src emacs-lisp
  ;; Shortcut links.
  (setq org-link-abbrev-alist
        '(("cache" .
           "http://www.google.com/search?q=cache:%s")
          ("dictionary" .
           "http://www.dict.org/bin/Dict?Database=*&Form=Dict1&Strategy=*&Query=%s")
          ("google" .
           "http://www.google.com/search?q=%s")
          ("googlegroups" .
           "http://groups.google.com/groups?q=%s")
          ("googlemaps" .
           "http://maps.google.com/maps?q=%s")
          ("imdb" .
           "http://us.imdb.com/Title?%s")
          ("openstreetmap" .
           "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
          ("wpen" .
           "http://en.wikipedia.org/wiki/%s")
          ("wpfr" .
           "http://fr.wikipedia.org/wiki/%s"))))
#+end_src

* "TODO" Items

#+begin_src emacs-lisp
;;* 5 (info "(org)TODO Items")
#+end_src

** Basic TODO functionality

#+begin_src emacs-lisp
;;** 5.1 (info "(org)TODO basics") functionality

(leuven--section "5.1 (org)TODO basics functionality")

;; 5.1 Select a TODO state and bypass any logging associated with that.
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

;; Some commands act upon headlines in the active region.
(setq org-loop-over-headlines-in-active-region 'start-level)
#+end_src

** Extended use of TODO keywords

We use statuses to *create a workflow* for tasks.

The statuses we use are a simple as possible to work well in the context of
work.

We use the following 4-letter status keywords:

- ~TODO~ ::
     Approved task, to be done.

- ~STRT~ ::
     Some progress has already been done on the task.

- ~WAIT~ ::
     Task delegated to someone else.  Or waiting for some external event to be
     able to work on the task.

- ~SDAY~ ::
     Task to be approved (and eventually done) in the future.

- ~DONE~ ::
     Task is completed.

- ~CANX~ ::
     Task is declined (but kept documented, instead of being deleted).

There is just 1 exception (made on purpose) to the 4-letter scheme:

- ~NEW~ ::
     Proposed task, idea or wish, *not approved yet*.  Draft.

One could add a ~CLSD~ or ~VRFD~ state for bug fixes, for example, which need to be
verified before really closing the task.

Extra status for invoices:

- ~DRAFT~ ::
     Invoice created, but you have *not sent* it to your client.

- ~UNPAID~ (or ~SENT~?) ::
     Your client has been notified.

- ~PAID~ ::
     Your client has *paid* this invoice -- you have received their payment.

(See FreshBooks, LessAccounting and BlinkSale)

#+begin_src emacs-lisp
;;** 5.2 Use of (info "(org)TODO extensions")

(leuven--section "5.2 Use of (org)TODO extensions")

;; List of TODO entry keyword sequences (+ fast access keys and specifiers
;; for state change logging).
(setq org-todo-keywords
      '((sequence "NEW(n!)"             ; Proposal, idea (under review), to be
                                        ; prioritized.
                  "TODO(t!)"            ; Open, not (yet) started.
                  "STRT(s!)"            ; In progress, working on, doing.
                  "WAIT(w!)"            ; On hold, to be discussed, assigned,
                                        ; feedback.
                  "SDAY(y!)"            ; Someday, maybe, perhaps, wish.
                  "|"
                  "DONE(d!)"            ; Completed, closed, fixed, resolved,
                                        ; verified.
                  "CANX(x!)")           ; Wontfix, rejected, ignored.

        (sequence "QTE(q!)"             ; Planning.
                  "QTD(Q!)"             ; Awaiting approval.
                  "|"
                  "APP(A!)"             ; Approved.
                  "REJ(R!)")            ; Rejected.

        (sequence "OPENPO(O!)"
                  "|"
                  "CLSDPO(C!)")))
#+end_src

~SDAY~ is *not* a completion state (in order not to be struck through).

#+begin_src emacs-lisp
(with-eval-after-load "org-faces"

  ;; Faces for specific TODO keywords.
  (setq org-todo-keyword-faces
        '(("NEW"  . leuven-org-created-kwd)
          ("TODO" . org-todo)
          ("STRT" . leuven-org-in-progress-kwd)
          ("WAIT" . leuven-org-waiting-for-kwd)
          ("SDAY" . leuven-org-someday-kwd)
          ("DONE" . org-done)
          ("CANX" . org-done)

          ("QTE" . leuven-org-quote-kwd)
          ("QTD" . leuven-org-quoted-kwd)
          ("APP" . leuven-org-approved-kwd)
          ("REJ" . leuven-org-rejected-kwd)

          ("OPENPO" . leuven-org-openpo-kwd)
          ("CLSDPO" . leuven-org-closedpo-kwd)))

  ;; Org standard faces.
  (set-face-attribute 'org-todo nil
                      :weight 'bold :box "#D8ABA7"
                      :foreground "#D8ABA7" :background "#FFE6E4")

  (set-face-attribute 'org-done nil
                      :weight 'bold :box "#BBBBBB"
                      :foreground "#BBBBBB" :background "#F0F0F0")

  ;; Org non-standard faces.
  (defface leuven-org-created-kwd
    '((t :weight bold :box "#FFE8A3"
         :foreground "#1F8DD6" :background "#FFFFFF"))
    "Face used to display state NEW.")
  (defface leuven-org-in-progress-kwd
    '((t :weight bold :box "#D9D14A"
         :foreground "#D9D14A" :background "#FCFCDC"))
    "Face used to display state STRT.")
  (defface leuven-org-waiting-for-kwd
    '((t :weight bold :box "#89C58F"
         :foreground "#89C58F" :background "#E2FEDE"))
    "Face used to display state WAIT.")
  (defface leuven-org-someday-kwd
    '((t :weight bold :box "#9EB6D4"
         :foreground "#9EB6D4" :background "#E0EFFF"))
    "Face used to display state SDAY.")

  (defface leuven-org-quote-kwd
    '((t :weight bold :box "#FC5158"
         :foreground "#FC5158" :background "#FED5D7"))
    "Face used to display .")
  (defface leuven-org-quoted-kwd
    '((t :weight bold :box "#55BA80"
         :foreground "#55BA80" :background "#DFFFDF"))
    "Face used to display .")
  (defface leuven-org-approved-kwd
    '((t :weight bold :box "#969696"
         :foreground "#969696" :background "#F2F2EE"))
    "Face used to display .")
  (defface leuven-org-rejected-kwd
    '((t :weight bold :box "#42B5FF"
         :foreground "#42B5FF" :background "#D3EEFF"))
    "Face used to display state REJECTED.")

  (defface leuven-org-openpo-kwd
    '((t :weight bold :box "#FC5158"
         :foreground "#FC5158" :background "#FED5D7"))
    "Face used to display OPEN purchase order.")
  (defface leuven-org-closedpo-kwd
    '((t :weight bold :box "#969696"
         :foreground "#969696" :background "#F2F2EE"))
    "Face used to display CLOSED purchase order."))
#+end_src

#+begin_src emacs-lisp
;; Block switching entries to DONE if
;; 1) there are undone child entries, or
;; 2) the parent has an `:ORDERED:' property and there are prior
;;    siblings not yet done.
(setq org-enforce-todo-dependencies t)
#+end_src

#+begin_src emacs-lisp
;; 5.2.7 Don't dim blocked tasks in the agenda display -- agenda optimization.
(setq org-agenda-dim-blocked-tasks nil) ; XXX not sure about this one
#+end_src

#+begin_src emacs-lisp
;; Block switching the parent to DONE if there are unchecked checkboxes.
(setq org-enforce-todo-checkbox-dependencies t)
#+end_src

** Progress logging

#+begin_src emacs-lisp
;;** 5.3 (info "(org)Progress logging")

(leuven--section "5.3 (org)Progress logging")

;; ;; 5.3.1 Don't insert a CLOSED time stamp each time a TODO entry is marked DONE.
;; (setq org-log-done nil)

;; 5.3.2 The notes will be ordered according to time.
(setq org-log-states-order-reversed nil)

;; 5.3.2 Insert state change notes and time stamps into a LOGBOOK drawer.
(setq org-log-into-drawer t)          ; should be the DEFAULT!

;; ~5.3.2 Heading for state change added to entries.
(with-eval-after-load "org"
  (message "[... Progress logging]")

  (setcdr (assq 'state org-log-note-headings)
          "State %-12S  ->  %-12s %t")) ; "State old -> new + timestamp".
#+end_src

Warning! The docstring of ~org-log-note-headings~ mentions that "in fact, it is
*not a good idea to change the `state' entry*, because agenda log mode depends
on the format of these entries."

#+begin_src emacs-lisp
(with-eval-after-load "org-habit"

  ;; Show habits for future days.
  (setq org-habit-show-habits-only-for-today nil)

  ;; Use character "heavy check mark" to show completed days on which a task
  ;; was done.
  (setq org-habit-completed-glyph ?\u2714)

  ;; Use character "heavy quadruple dash vertical" to identify today.
  (setq org-habit-today-glyph ?\u250B))
#+end_src

** Breaking down tasks

#+begin_src emacs-lisp
;;** 5.5 (info "(org)Breaking down tasks")

(leuven--section "5.5 (org)Breaking down tasks")

;; Automatically change a TODO entry to DONE when all children are done.
(defun leuven--org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)  ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook #'leuven--org-summary-todo)
#+end_src

* Tags

Context (place, time or particular resources for doing a task) and people are
something best implemented with tags.

By convention, *user-defined tags are written in lowercase*; built-in tags with
special meaning are written with all capitals.

~org-use-tag-inheritance~ can be setup to a regular expression, for example so
that all tags starting with ~@~ or ~#~ will be excluded from inheritance with:

#+begin_example
(setq org-use-tag-inheritance "^[^@#]")
#+end_example

#+begin_src emacs-lisp
;;* 6 (info "(org)Tags")

;; Column to which tags should be indented in a headline.
(setq org-tags-column -80)

;; 6.2 List of tags ("contexts") allowed in Org mode files.
(setq org-tag-alist '(("FLAGGED"     . ?1) ; = ASAP.
                      (:startgroup  . nil)
                      ("work"       . ?2)
                      ("personal"   . ?3)
                      (:endgroup    . nil)
                      ;; ("now"      . XXX)

                      ("notbillable" . ?B)

                      ("call"        . ?c)
                      ("errands"     . ?e)
                      ;; childcare
                      ;; event
                      ("finance"     . ?f) ; = Bills, statements, receipts.
                      ;; shopping
                      ;; family
                      ;; friends
                      ("mail"        . ?m)

                      ;; ("reading"  . ?r)
                      ;; ("proj"     . ?P)

                      ("ARCHIVE"     . ?a) ; Speed command + action in task list.
                      ("crypt"       . ?C)
                      ))

;; Faces for specific tags.
(setq org-tag-faces
      '(("FLAGGED"                    ; Important.
         (:slant italic :foreground "#FF0000"))
        ("work"
         (:slant italic :foreground "#FF9900"))
        ("personal"
         (:slant italic :foreground "#009900"))
        ("now"                        ; To do.
         (:slant italic :foreground "#3333FF"))
        ("refile"                     ; Later.
         (:slant italic :foreground "#993399"))
        ("notbillable"
         (:slant italic :foreground "#A9876E"))
        ))

;; 6.2 Exit fast tag selection after first change (toggle this with `C-c').
(setq org-fast-tag-selection-single-key t)
#+end_src

*************** TODO Extend the following function to take ~filetags~ into account

*************** TODO Check whether this function removes tags of DIRECT parent

#+begin_src emacs-lisp
;; Remove redundant tags of headlines (from David Maus).
(defun leuven-org-remove-redundant-tags ()
  "Remove redundant tags of headlines in current buffer.
A tag is considered redundant if it is local to a headline and inherited by
a parent headline."
  (interactive)
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (org-map-entries
       #'(lambda ()
           (let ((alltags (split-string
                           (or (org-entry-get (point) "ALLTAGS") "")
                           ":"))
                 local inherited tag)
             (dolist (tag alltags)
               (if (get-text-property 0 'inherited tag)
                   (push tag inherited)
                 (push tag local)))
             (dolist (tag local)
               (when (member tag inherited)
                 (org-toggle-tag tag 'off)))))
       t nil))))

;; ;; Always offer completion for all tags of all agenda files.
;; (setq org-complete-tags-always-offer-all-agenda-tags t)
#+end_src

* Properties and Columns

By convention, *user-defined properties are capitalized*; built-in properties with
special meaning are written with all capitals.

#+begin_src emacs-lisp
;;* 7 (info "(org)Properties and Columns")

;;** 7.1 (info "(org)Property syntax")

(leuven--section "7.1 (org)Property syntax")

;; List of property/value pairs that can be inherited by any entry.
(setq org-global-properties
      '(("Effort_ALL" .
         "0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00"
         ;; "0d 1d 2d 3d 4d 5d 6d 7d 8d 10d"
         ;; "0 1:00 4:00 1d 2d 1w 2w"
         )))
#+end_src

* Dates and Times

#+begin_src emacs-lisp
;;* 8 (info "(org)Dates and Times")

(leuven--section "8 (org)Dates and Times")

;; Insinuate appt if Org mode is loaded.
(with-eval-after-load "org"
  (message "[... Org Dates and Times]")

  (try-require 'appt))
#+end_src

** Creating time stamps

#+begin_src emacs-lisp
;;** 8.2 (info "(org)Creating timestamps")

(leuven--section "8.2 (org)Creating time stamps")

;; Prefer the future for incomplete dates.
(setq org-read-date-prefer-future 'time)

;; ;; Advise `org-read-date' to bury the calendar buffer after selecting a date,
;; ;; so it is out of the way.
;; (defadvice org-read-date
;;   (after leuven-bury-calendar-after-org-read-date
;;          (&optional with-time to-time from-string prompt
;;          default-time default-input) protect)
;;   "Bury the *Calendar* buffer after reading a date."
;;   (bury-buffer "*Calendar*"))
;; (ad-activate 'org-read-date)

;; Number of minutes to round time stamps to.
(setq org-time-stamp-rounding-minutes '(1 1))
#+end_src

** Deadlines and scheduling

#+begin_src emacs-lisp
;;** 8.3 (info "(org)Deadlines and scheduling")

(leuven--section "8.3 (org)Deadlines and scheduling")
#+end_src

#+begin_src emacs-lisp
;; Information to record when the scheduling date is modified.
(setq org-log-reschedule nil)

;; Information to record when the deadline date is modified.
(setq org-log-redeadline 'time)
#+end_src

*** Inserting deadline/schedule

Schedule it with ~C-c C-s~:

- ~RET~ ::
     Today.

- ~+1d RET~ ::
     Tomorrow.

- ~+1w RET~ ::
     Next week.

- ~+4w RET~ ::
     Next "month".

Remove scheduling date with ~C-u C-c C-s~.

#+begin_src emacs-lisp
;; Number of days before expiration during which a deadline becomes active.
(setq org-deadline-warning-days 7)

;; Skip deadline prewarning (up to 7 days before the actual deadline) when
;; entry is also scheduled.
(setq org-agenda-skip-deadline-prewarning-if-scheduled 7)

;; Don't show deadlines when the corresponding item is done.
(setq org-agenda-skip-deadline-if-done t)

;; Skip scheduling line if same entry shows because of deadline.
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)

;; Don't show scheduled items in agenda when they are done.
(setq org-agenda-skip-scheduled-if-done t)

;; ~8.3 Don't select item by time stamp or -range if it is DONE.
(setq org-agenda-skip-timestamp-if-done t)

;; ;; Show all days between the first and the last date.
;; (setq org-timeline-show-empty-dates t)
#+end_src

*** Repeated tasks

#+begin_src emacs-lisp
;; TODO state to which a repeater should return the repeating task.
(setq org-todo-repeat-to-state "TODO")
#+end_src

** Clocking work time (Time tracking, Log work)

*************** TODO Resume clocks when opening the first Org file
Alternative to requiring org-clock in every Emacs session.
*************** END

#+begin_src emacs-lisp
;;** 8.4 (info "(org)Clocking work time")

(leuven--section "8.4 (org)Clocking work time")

(global-set-key (kbd "C-c C-x C-i") #'org-clock-in)
(global-set-key (kbd "C-c C-x C-j") #'org-clock-goto)
(global-set-key (kbd "C-c C-x C-o") #'org-clock-out)

(defun leuven-helm-org-clock-in (marker)
  "Clock into the item at MARKER"
  (with-current-buffer (marker-buffer marker)
    (goto-char (marker-position marker))
    (org-clock-in)))

;; Add action "Clock into task" directly from helm-org session
(with-eval-after-load 'helm-org
  (nconc helm-org-headings-actions
         (list (cons "Clock into task" #'leuven-helm-org-clock-in))))

;; The time clocking code for Org mode.
;; (require 'org-clock)                 ;! needed for trying to automatically
                                        ;! re-clock at Emacs startup

;; XXX Under test!
(add-hook 'org-mode-hook
          #'(lambda ()
              (require 'org-clock)
              (setq org-clock-persist t)
              (org-clock-persistence-insinuate)))

(with-eval-after-load "org-clock"

  ;; ;; 8.4 Save both the running clock and the entire clock history when Emacs
  ;; ;; is closed, and resume it next time Emacs is started up.
  ;; (setq org-clock-persist t)
  ;;
  ;; ;; 8.4 Set up hooks for clock persistence.
  ;; (org-clock-persistence-insinuate)

  ;; Resume clocking task on clock-in if the clock is open.
  (setq org-clock-in-resume t)

  ;; Number of clock tasks to remember in history.
  (setq org-clock-history-length 35)  ; 1-9A-Z

  ;; 8.4.2 Include the current clocking task time in clock reports.
  (setq org-clock-report-include-clocking-task t)

  ;; 8.4.2 Format string used when creating CLOCKSUM lines and when generating
  ;; a time duration (avoid showing days).
  (setq org-duration-format 'h:mm)    ; Introduced in Emacs 26.1 / Org 9.1.

  ;; Format string for the total time cells.
  (setq org-clock-total-time-cell-format "%s")

  ;; Format string for the file time cells.
  (setq org-clock-file-time-cell-format "%s")

  (defun leuven-org-clock-in-interrupted-task ()
    "Clock back into the task that has been interrupted, if there is one."
    (interactive)
    (if (and (not org-clock-resolving-clocks-due-to-idleness)
             (marker-buffer org-clock-marker)
             (marker-buffer org-clock-interrupted-task))
        (org-with-point-at org-clock-interrupted-task
          (org-clock-in nil))
      (org-clock-out)))

  (global-set-key (kbd "C-c C-x C-q") #'leuven-org-clock-in-interrupted-task)

  ;; 8.4.3 Resolve open clocks if the user is idle more than X minutes.
  (setq org-clock-idle-time 240)

  (defun leuven--org-switch-to-started (kwd)
    "Switch task state to STRT.
Skip normal headlines and capture tasks."
    (if (and kwd
             (not (string-equal kwd "STRT"))
             (not (and (boundp 'org-capture-mode) org-capture-mode)))
        "STRT"
      nil))

  ;; 8.4.3 Set task to todo state STRT while clocking it.
  (setq org-clock-in-switch-to-state 'leuven--org-switch-to-started)

  ;; Clock won't be stopped when the clocked entry is marked DONE.
  (setq org-clock-out-when-done nil)

  ;; Time included for the mode line clock is all time clocked into this task
  ;; today.
  (setq org-clock-mode-line-total 'today)
  (setq org-clock-mode-line-total 'all)

  ;; Get an alert (notification) when your planned time is over.
  (setq org-clock-sound "~/Public/Music/Sounds/alarm.wav")
  ;;! Use start-process to have an external program play the sound to
  ;;! avoid ignored keystrokes until after the sound plays (start-process
  ;;! "ding" nil "play" "~/Public/Music/Sounds/alarm.wav")

  ;; Default range when displaying clocks with `org-clock-display'.
  (setq org-clock-display-default-range 'untilnow)

  ;; Remove the clock line when the resulting time is 0:00.
  (setq org-clock-out-remove-zero-time-clocks t)

  ;; ;; When clocking into a task with a clock entry which has not been
  ;; ;; closed, resume the clock from that point.
  ;; (setq org-clock-in-resume t)

  ;; Ask the user if they wish to clock out before killing Emacs.
  (defun leuven--org-query-clock-out ()
    "Ask the user before clocking out.
This is a useful function for adding to `kill-emacs-query-functions'."
    (if (and (featurep 'org-clock)
             (funcall 'org-clocking-p)
             (y-or-n-p "You are currently clocking time, clock out? "))
        (org-clock-out)
      t))                             ; Only fails on keyboard quit or error.

  (add-hook 'kill-emacs-query-functions #'leuven--org-query-clock-out)

  )                                   ; with-eval-after-load "org-clock" ends here.
#+end_src

** Effort estimates

If you have an ~Effort~ property defined, the *estimated time* is also shown in
the mode line, against the *actual time* spent (reported through *time clocking*).

When clocking in, ask for a time estimate if the property is not yet defined.

#+begin_src emacs-lisp
;;** 8.5 (info "(org)Effort estimates")

(leuven--section "8.5 (org)Effort estimates")

;; Add an effort estimate on the fly when clocking in.
(defun leuven--org-ask-effort ()
  "Ask for an effort estimate when clocking in."
  (unless (org-entry-get (point) "Effort")
    (let ((effort
           (completing-read
            "Estimated time (H:MM): "
            (org-entry-get-multivalued-property (point) "Effort"))))
      (unless (equal effort "")
        (org-set-property "Effort" effort)))))

(add-hook 'org-clock-in-prepare-hook #'leuven--org-ask-effort)
#+end_src

XXX We could forbid an empty answer to the effort estimate question!

XXX When clocking out, show the remaining effort (allows to re-estimate for
a better schedule).

* Capture - Refile - Archive

** Capture

The ultimate capture tool to *quickly add* tasks or notes.

Structure:
- Contacts
- Calendar
- Tasks
- Notes
- Journal

#+begin_src emacs-lisp
;;* 9 (info "(org)Capture - Refile - Archive")

(leuven--section "9.1 (org)Capture")

;; 9.1.2 Directory with Org files.
(setq org-directory
      (directory-file-name            ; This function removes the final slash.
       (cond ((file-directory-p "~/org/") "~/org/")
             ((file-directory-p "~/org-files/") "~/org-files/")
             (t "~/"))))

;; 9.1.2 Default target for storing notes.
(setq org-default-notes-file            ; Inbox for collecting
                                        ; [Default: "~/.notes"].
      (if (file-exists-p (concat org-directory "/0-refile.org"))
          (concat org-directory "/0-refile.org")
        (concat org-directory "/refile.org")))
#+end_src

~%~-escapes:

- ~%a~ ::
     Annotation (*link*).

- ~%i~ ::
     Initial content (*selected text*).

- ~%?~ ::
     Cursor position.

- ~%^T~ ::
     Prompt for a date and time.

- ~%^G~ ::
     Prompt for tags with completion on tags in all agenda files.

- ~%t~ ::
     Time stamp (date only).

- ~%^{prompt}~ ::
     Prompt the user for a string.

- ~%[file]~ ::
     Insert the contents of the file.

- ~%U~ ::
     Inactive time stamp with date and time.

Looking at the info manual I found the documentation for "immediate-finish", but
not for "jump-to-captured". I found it in the code and it seems to be exactly
what I want.

Use ~:jump-to-captured~ to tell capture to jump to the note after storing it.

*************** TODO Look at ~:kill-buffer~

#+begin_src emacs-lisp
;; 9.1.2 templates for the creation of capture buffers

;; ("Receipt"   ?r "** %^{BriefDesc} %U %^g\n%?"   "~/Personal/finances.org")

;; Fast note taking in Org mode (the ultimate capture tool).
(with-eval-after-load "org-capture"

  (add-to-list 'org-capture-templates
               `("t" "Task" entry
                 (file+headline ,org-default-notes-file "Tasks")
                 "* NEW %^{Task}%?

%i"
                 :empty-lines 1) t)

  (add-to-list 'org-capture-templates
               `("T" "Task in current file" entry
                 (file+headline
                  (buffer-file-name (org-capture-get :original-buffer))
                  "Tasks")
                 "* TODO %?
%U %a %n"
                 :prepend t) t)

  (add-to-list 'org-capture-templates
               `("a" "Appt" entry
                 (file+headline ,org-default-notes-file "Events")
                 "* %^{Appointment}%?
%^T

%i"
                 :empty-lines 1) t)
  ;; TODO Prompt only for date, not time...
#+end_src

*** TODO Ask for refile location

Find a location for refiling on capture.

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               `("Z" "Refile me!" entry
                 (function leuven--find-location)
                 "** TODO Put this in some other file\n\n"
                 :prepend t) t)

  (defun leuven--find-location ()
    "Find my CollectBox file and some headline in the current buffer."
    (find-file org-default-notes-file)
    (goto-char (point-min))
    (helm-org-in-buffer-headings)
    (org-forward-heading-same-level 1))
#+end_src

*** TODO Email-to-task

Instantly *create tasks* and notes *from emails*, with a *link* back *to the emails*.

The following rules will apply to interpret an email to a task:

- Email subject ::
     Task name.

- Person in the ~From:~ field ::
     Task creator.

- Person(s) in the ~To:~ field ::
     Task assignee(s).

- Email body (or selected region) ::
     Inserted into the task's description.

- Email attachment(s) ::
     Inserted as task's attachment(s).

     XXX Wouldn't it be great if files attached to email can be quickly added
     to the tasks or projects you create?

Additional parameters can be included via the commands you use:

- Create a ~TODO~ Action ::
     Create a new action.

- Create a ~TODO~ Action Remind 3 ::
     Create a new action.  Set reminder in 3 days.

- Create a ~TODO~ Action Due Date 7 ::
     Create a new action.  Set due date in 7 days.

- Create a ~TODO~ Action of an existing Project ::
     Attach it to something that we're already working on.

- Create a ~WAIT~ Item ::
     Create a new "Waiting For" item, eventually with an "Assignee" property.

- Create a ~SDAY~ Item ::
     Create a new "Someday" item.

- Create a Reference Item ::
     Create a new "Reference" item.

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               `("m" "Email processing") t)

  (add-to-list 'org-capture-templates
               `("mT" "Create a TODO Action + edit" entry
                 (file+headline ,org-default-notes-file "Messages") ; #+FILETAGS: :mail:
                 "* TODO %^{Creating action}%? (from %:fromname)
%:date-timestamp-inactive

#+begin_verse
%i
#+end_verse

From the address <%a>"
                 :empty-lines 1) t)

  (add-to-list 'org-capture-templates
               `("mt" "Create a TODO Action" entry
                 (file+headline ,org-default-notes-file "Messages") ; #+FILETAGS: :mail:
                 "* TODO %:subject%? (from %:fromname)
%:date-timestamp-inactive

#+begin_verse
%i
#+end_verse

From the address <%a>"
                 :empty-lines 1
                 :immediate-finish t) t)

  (add-to-list 'org-capture-templates
               `("mn" "Create a note" entry
                 (file+headline ,org-default-notes-file "Notes") ; #+FILETAGS: :mail:
                 "* %:subject%? (from %:fromname)
%:date-timestamp-inactive

#+begin_verse
%i
#+end_verse

From the address <%a>"
                 :empty-lines 1
                 :immediate-finish t) t)
#+end_src

The property ~:immediate-finish~, when set, immediately files the item without
further prompt (skipping ~C-c C-c~); very handy for quick storing of emails.

With the clock options, ~org-capture~ automatically clocks in.  When pressing
~C-c C-c~, it clocks out.

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               `("p" "Phone call" entry
                 (file+headline ,org-default-notes-file "Phone calls")
                 "* %?"
                 :clock-in t
                 :clock-resume t
                 :empty-lines 1) t)

  (add-to-list 'org-capture-templates
               `("i" "Interruption" entry
                 (file ,org-default-notes-file)
                 "A TEMPLATE HERE"
                 :clock-in t
                 :clock-resume t) t)
#+end_src

#+begin_src emacs-lisp
  ;; Thought.
  (add-to-list 'org-capture-templates
               `("n" "Note" entry
                 (file+headline ,org-default-notes-file "Notes")
                 "* %^{Thought}%?

%i"
                 :empty-lines 1) t)

  ;; Shopping list (stuff to buy).
  (add-to-list 'org-capture-templates
               `("b" "Buy" checkitem
                 (file+headline ,org-default-notes-file "Shopping")) t)

  ;; Add a note to the currently clocked task.
  (add-to-list 'org-capture-templates
               `("c" "Clock sibling" entry
                 (clock)
                 "* %^{Title}
%U
%a

%i") t)

  (add-to-list 'org-capture-templates
               `("S" "Secure safe" entry
                 (file+datetree+prompt "~/.dotfiles/.hide/safe.gpg")
                 "* %(format-time-string \"%H:%M\") %^{Entry} %^G
%i%?") t)
#+end_src

#+begin_src emacs-lisp
  ;;          ("w" "org-protocol" entry
  ;;           (file ,org-default-notes-file)
  ;;           "* TODO Review %c
  ;; %U"
  ;;           :clock-in t
  ;;           :clock-resume t
  ;;           :immediate-finish t)
  ;;
  ;; ("web-clippings" ?w
  ;;  "* %^{Title} %^g \n  :PROPERTIES:\n  :date: %^t\n  :link: %^{link}\n  :END:\n\n %x %?"
  ;;  "~/org/data.org" "Web Clippings")

  ;; Default `org-capture-templates' key to use.
  (setq org-protocol-default-template-key "w")
#+end_src

#+begin_src emacs-lisp
  )                                   ; with-eval-after-load "org-capture" ends here.
#+end_src

** Attachments

Use the following for conveniently accessing your data.

#+begin_src emacs-lisp
;; bug when C-c C-l
;; ;; 4.6 Shortcut links.
;; (add-to-list 'org-link-abbrev-alist '(("att" . org-attach-expand-link)))
#+end_src

Instead of modifying ~org-link-abbrev-alist~, you can also use

: #+LINK: att %(org-attach-expand-link)

in your Org buffers.

** Protocols for external access

Open Org source (and Capture) from Firefox.

Have a look at [[http://vimeo.com/5662410][Store links in Emacs Org using org-protocol.el]].

#+begin_src emacs-lisp
(leuven--section "9.4 (org)Protocols")

;; 9.4 Capture from Firefox (to store links and text).
(with-eval-after-load "org-protocol"

  ;; Map online URL to an existing working file.
  (add-to-list 'org-protocol-project-alist
               '("Worg at http://orgmode.org/worg/"
                 :online-suffix ".html"
                 :working-suffix ".org"
                 :base-url "http://orgmode.org/worg/"
                 :working-directory "~/Public/Repositories/worg/") t))
#+end_src

** Refile and copy

Once a date has been scheduled, *move the task to the appropriate project*, by
using the *refile* command ~C-c C-w~.  This lets me select (with completion) the
header under which the entry will be placed.

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (message "[... Org Refile]")

  (defvar leuven-org-refile-extra-files
    (if (file-exists-p "~/org/notes/")
        (directory-files "~/org/notes/" t "^[^\\.#].*\\.\\(txt\\|org\\)$")
      nil)
    "List of extra files to be used as targets for refile commands.")

  ;; 9.5 Any headline with level <= 3 is a target.
  (setq org-refile-targets
        `((nil
           :maxlevel . 4)             ; Current file.
          (,(append org-agenda-files leuven-org-refile-extra-files)
           :maxlevel . 2)))

  ;; Cache refile targets to speed up the process.
  (setq org-refile-use-cache t)

  ;; 9.5 Provide refile targets as paths, including the file name (without
  ;; directory) as level 1 of the path.
  (setq org-refile-use-outline-path 'file)

  ;; 9.5 Allow to create new nodes (must be confirmed by the user) as refile
  ;; targets.
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Refile only within the current buffer.
  (defun leuven-org-refile-within-current-buffer ()
    "Move the entry at point to another heading in the current buffer."
    (interactive)
    (let ((org-refile-targets '((nil :maxlevel . 4))))
      (org-refile)))
  ;; FIXME Add a smart key binding
  #+end_src

#+begin_src emacs-lisp
  ;; Exclude DONE state tasks from refile targets.
  (defun bh/verify-refile-target ()
    "Exclude TODO keywords with a DONE state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src

** Archiving

#+begin_src emacs-lisp
  (leuven--section "9.6 (org)Archiving")

  ;; 9.6.1 Subtrees should be archived in the current file.
  (setq org-archive-location "::* Archive")

  )
#+end_src

* Agenda Views

#+begin_src emacs-lisp
(leuven--section "10 (org)Agenda Views")

;;* 10 (info "(org)Agenda Views")

(with-eval-after-load "org-agenda"

  ;; Multiple same-day time stamps in entry make multiple agenda lines.
  (setq org-agenda-skip-additional-timestamps-same-entry nil)

  ;; Show outline path in echo area after line motion (though, may bring some
  ;; slowness).
  (setq org-agenda-show-outline-path t)

  ;; 10.0 Restore the window configuration when exiting the agenda.
  (setq org-agenda-restore-windows-after-quit t)
#+end_src

#+begin_src emacs-lisp
  ;; ;; Speed up agenda by avoiding to update some text properties.
  ;; (setq org-agenda-ignore-properties '(effort category)) ; org.el
#+end_src

#+begin_src emacs-lisp
  ;; Normally hide the "someday" (nice-to-have) things.
  ;; (setq org-agenda-filter-preset '("-SDAY"))
#+end_src

** Agenda files

#+begin_src emacs-lisp
  ;;** 10.1 (info "(org)Agenda files")

  (leuven--section "10.1 (org)Agenda files")

  (when (boundp 'org-agenda-files)
    (message "[Found %s entries in `org-agenda-files']"
             (length org-agenda-files))
    ;; (sit-for 0.5)
    )
#+end_src

Avoid any possibility of getting a customized version of ~org-agenda-files~ added
at the end of your =.emacs= file.

#+begin_example
    (add-hook 'org-mode-hook
              #'(lambda ()
                  (local-unset-key (kbd "C-c ["))
                  (local-unset-key (kbd "C-c ]"))))
#+end_example

Otherwise, through this hook, every org file is automatically "filed" and any to
do items inside will be found by the org-mode agenda builder.

#+begin_src emacs-lisp :tangle no
  ;; Add Org files to the agenda when we save them.
  (defun to-agenda-on-save-org-mode-file()
    "XXX"
    (when (string= (message "%s" major-mode) "org-mode")
      (org-agenda-file-to-front)))

  (add-hook 'after-save-hook 'to-agenda-on-save-org-mode-file)
#+end_src

This does mean that when files are deleted or moved the org agenda complains.

** The agenda dispatcher

#+begin_src emacs-lisp
  ;;** 10.2 (info "(org)Agenda dispatcher")

  (leuven--section "10.2 (org)Agenda dispatcher")

  ;; Enable sticky agenda: `q' key will bury agenda buffers (instead of
  ;; killing).
  (setq org-agenda-sticky t)
#+end_src

** The Built-in agenda views

#+begin_src emacs-lisp
  ;;** 10.3 The (info "(org)Built-in agenda views")

  (leuven--section "10.3 (org)Built-in agenda views")
#+end_src

Press ~C-c a a~ to jump you to this week's task page from anywhere.

#+begin_src emacs-lisp
  ;; Default duration for appointments that only have a starting time.
  (setq org-agenda-default-appointment-duration nil)

  ;; ;; Duration of an appointment will add to day effort.
  ;; (setq org-agenda-columns-add-appointments-to-effort-sum t)
#+end_src

~C-c a t~ should show *all* the ~TODO~ items... but...

#+begin_src emacs-lisp
  ;; Show dated entries in the global `todo' list.
  (setq org-agenda-todo-ignore-with-date nil)
                                        ;!! tricky setting
#+end_src

#+begin_src emacs-lisp
  ;; Show entries with a time stamp in the global `todo' list.
  (setq org-agenda-todo-ignore-timestamp nil)
#+end_src

Don't tell me about stuff that isn't due yet: tasks scheduled in the future
should no longer show up in global todo or tags searches until that date
arrives -- at which point it will be in all lists.

#+begin_src emacs-lisp
  ;; 10.3.2 Don't show scheduled entries in the global `todo' list.
  (setq org-agenda-todo-ignore-scheduled 'future)
                                        ;!! Tricky setting.
  (setq org-agenda-todo-ignore-scheduled nil)
#+end_src

#+begin_src emacs-lisp
  ;; 10.3.2 Don't show entries scheduled in the future in the global
  ;; `todo' list (until they are within the warning period).
  (setq org-agenda-todo-ignore-deadlines 'near)
                                        ;!! Tricky setting.
  (setq org-agenda-todo-ignore-deadlines nil)
#+end_src

#+begin_src emacs-lisp
  ;; 10.3.2 Check also the sublevels of a TODO entry for TODO entries,
  ;; resulting in potentially much longer `todo' lists.
  (setq org-agenda-todo-list-sublevels t)

  ;; 10.3.3 Honor `todo' list `org-agenda-todo-ignore...' options also
  ;; in the `tags-todo' list.
  (setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

*** Advanced Search

#+begin_src emacs-lisp
  ;; 10.3.5 List of extra files to be searched by text search commands
  ;; (C-c a s).
  (setq org-agenda-text-search-extra-files nil) ; org.el

  (defvar leuven-org-search-extra-files nil
    "List of extra files to be searched by custom search commands (`R s' and `R S').")

  ;; Turn on individual word search (for Google addicts).
  (setq org-agenda-search-view-always-boolean t
        org-agenda-search-view-search-words-only t)

  ;; Match part of a word.
  (setq org-agenda-search-view-force-full-words nil)

  ;; Don't search headline for a time-of-day (unwanted side effects).
  (setq org-agenda-search-headline-for-time nil)
#+end_src

#+begin_src emacs-lisp
  ;; 10.3.6 How to identify stuck projects.
  (setq org-stuck-projects
        '("+LEVEL=2/-DONE"            ; Identify a project.
          ("TODO" "STRT")             ; Todo keywords.
          nil ""))                    ; Tags, regexp.
#+end_src

** Presentation and sorting

See
http://www.dgtale.ch/index.php?option=com_content&view=article&id=52&Itemid=61

#+begin_src emacs-lisp
  ;;** 10.4 (info "(org)Presentation and sorting")

  (leuven--section "10.4 (org)Presentation and sorting")
#+end_src

You can modify ~org-agenda-prefix-format~ to show extra information in the lists.

#+begin_note
If none of the built-in format specifiers are sufficient, you can use
~%(my-function-here)~ as a specifier and ~my-function-here~ will be called on each
headline (to return any kind of string you want).
#+end_note

#+begin_src emacs-lisp
  ;; 10.4 Format specifications for the prefix of items in the agenda views.
  (setq org-agenda-prefix-format
        '((agenda   . " %-11s%i %?-12t") ; Agenda.
          (timeline . " % s")         ; Timeline.
          (todo     . " %i %-12:c")   ; Todo, alltodo.
          (tags     . " %i %-12:c")   ; Tags, tags-todo, stuck.
          (search   . " %i %-12:c"))) ; Search.

  ;; Type "(" in agenda and todo buffers to show category name and task
  ;; length for each task.
  (defvar leuven--org-agenda-show-tasks-details nil)
  (defun leuven-org-agenda-toggle-tasks-details ()
    "Hide/show tasks details (category and time estimate) in agenda views."
    (interactive)
    (if leuven--org-agenda-show-tasks-details
        (progn
          (setq leuven--org-agenda-show-tasks-details nil)
          (setq org-agenda-prefix-format
                '((agenda    . " %-11s%i %?-12t")
                  (timeline  . " % s")
                  (todo      . " ")
                  (search    . " ")
                  (tags      . " "))))
      (setq leuven--org-agenda-show-tasks-details t)
      (setq org-agenda-prefix-format
            '((agenda   . " %-11s%i %-12:c%?-12t%7e ")
              (timeline . " % s")
              (todo     . " %i %-12:c")
              (search   . " %i %-12:c")
              (tags     . " %i %-12:c"))))
    (org-agenda-redo))

  (define-key org-agenda-mode-map
    (kbd "(") #'leuven-org-agenda-toggle-tasks-details)
#+end_src

#+begin_src emacs-lisp
  ;; Text preceding scheduled items in the agenda view.
  (setq org-agenda-scheduled-leaders
        '("Scheduled  "
          "           "))

  ;; Text preceding item pulled into the agenda by inactive time stamps.
  (setq org-agenda-inactive-leader "[")

  ;; Text preceding deadline items in the agenda view.
  (setq org-agenda-deadline-leaders
        '("Deadline   "
          "In %d d"                   ; Or "%d d left".
          "%d d ago"))

  )                                   ; with-eval-after-load "org-agenda" ends here.

(with-eval-after-load "org-faces"

  ;; Faces for showing deadlines in the agenda.
  (setq org-agenda-deadline-faces
        '((1.0001 . leuven-org-deadline-overdue)
          (0.9999 . leuven-org-deadline-today)
          (0.8571 . leuven-org-deadline-tomorrow) ; = 6/7, see `org-deadline-warning-days'
          (0.0000 . leuven-org-deadline-future)))

  ;; See http://www.dgtale.ch/index.php?option=com_content&view=article&id=52&Itemid=61.

  ;; Org non-standard faces.
  (defface leuven-org-deadline-overdue
    '((t :foreground "#F22659"))
    "Face used to highlight tasks whose due date is in the past.")

  (defface leuven-org-deadline-today
    '((t :weight bold :foreground "#4F4A3D" :background "#FFFFCC"))
    "Face used to highlight tasks whose due date is today.")

  (defface leuven-org-deadline-tomorrow
    '((t :foreground "#40A80B"))
    "Face used to highlight tasks whose due date is tomorrow.")

  (defface leuven-org-deadline-future
    '((t :foreground "#40A80B"))
    "Face used to highlight tasks whose due date is for later."))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load "org-agenda"

  ;; ;; 10.4 Column to shift tags to (in agenda items).
  ;; (setq org-agenda-tags-column -132)

  ;; Right-justify tags in the agenda buffer.
  (defun leuven--org-agenda-right-justify-tags ()
    "Justify the tags to the right border of the agenda window."
    (let ((org-agenda-tags-column (- 2 (window-width))))
      (org-agenda-align-tags)))
  (add-hook 'org-agenda-finalize-hook #'leuven--org-agenda-right-justify-tags))
#+end_src

Show the time grid in the daily agenda but not in the weekly agenda, except
for today's date:

#+begin_src emacs-lisp
;; 10.4.2 Settings for time grid for agenda display.
(setq org-agenda-time-grid '((daily remove-match)
                             ""
                             (0800 1000 1200 1400 1600 1800 2000)))

;; Recent Org-mode.
(setq org-agenda-time-grid '((daily today remove-match)
                             (0800 1000 1200 1400 1600 1800 2000)
                             "...... " ""))

;; String for the current time marker in the agenda.
(setq org-agenda-current-time-string "Right now")
#+end_src

~time-up~ will only be applied to those items have a time stamp for the day in
question, so that other sorting parameters will not be outranked by ~time-up~ for
the rest of the entries.

#+begin_note
The file =0-refile.org= should come first.  My current workaround is to add
~:CATEGORY: @refile~ in its subtrees, as the ~@~ symbol is alphabetically before the
letters.
#+end_note

Agenda view: put related tasks together, then by priority.

#+begin_note
Not sure about that anymore: the agenda view is to work on tasks, hence prior
tasks (then grouped by project) should arrive ahead; on the opposite, when doing
a review, it's good to have all tasks grouped by project.
#+end_note

*************** TODO Sort agenda by prior, then categ, then date
Inverting ~category-up~ and ~priority-down~ in the agenda does unexpected
sorting: first by priority (OK), but then by scheduled time (while it should be
grouped by category)!
*************** END

#+begin_src emacs-lisp
;; 10.4.3 Sorting structure for the agenda items of a single day.
(setq org-agenda-sorting-strategy   ; custom value
      '((agenda time-up category-up priority-down effort-down)
        ;; (agenda priority-down time-up category-up effort-down)
        (todo category-up priority-down effort-down)
        (tags category-up priority-down effort-down)
        (search category-up)))

;; Show agenda in the current window, keeping all other windows.
(setq org-agenda-window-setup 'current-window)
#+end_src

With this function, the new sort order is temporary.  Pressing ~r~ for refresh
will restore the default sort order for the buffer:

#+begin_src emacs-lisp
(defun leuven-org-agenda-change-sorting-strategy (strategy)
  "Change the sorting strategy."
  (interactive (list
                (completing-read "Choose a strategy: "
                                 (mapcar 'cdr (cdr org-sorting-choice))
                                 nil t)))
  ;; adjust the following types as needed - e.g., add 'agenda, etc.
  (org-agenda-check-type t 'todo 'tags 'search)
  (let ((org-agenda-sorting-strategy (list (intern strategy))))
    (org-agenda-redo)))
#+end_src

** Agenda commands

#+begin_src emacs-lisp
;;** 10.5 (info "(org)Agenda commands")

(leuven--section "10.5 (org)Agenda commands")

;; Get a compact view during follow mode in the agenda.
(defun leuven--compact-follow ()
  "Make the view compact, then show the necessary minimum."
  (ignore-errors
    (save-excursion
      (while (org-up-heading-safe))
      (hide-subtree)))
  (let ((org-show-siblings nil)
        (org-show-hierarchy-above t))
    (org-reveal))
  (save-excursion
    (org-back-to-heading t)
    (show-children)))

;; FIXME When this is enabled, clicking on a clock line from `v c'
;; (log check) does not jump to the right line
;; (add-hook 'org-agenda-after-show-hook #'leuven--compact-follow)

;; 10.5 Number of days to include in overview display.
(setq org-agenda-span 'day)

;; Always start the overview on the current day.
(setq org-agenda-start-on-weekday nil)

;; Format string for displaying dates in the daily/weekly agenda
;; and in the timeline.
(setq org-agenda-format-date
      (concat                           ; "\n"
       "%Y-%m-%d" " %a "
       ;; (make-string (1- (window-width)) (string-to-char "_"))))
       (make-string 65 (string-to-char " "))
       "_"
       ;; (make-string 1 ?\u25AE)
       ))

;; 10.5 Only show clocked entries in agenda log mode (no closed
;; entries, no state changes).
(setq org-agenda-log-mode-items '(clock))

;; 10.5 Parameters for the clocktable in clockreport mode.
(setq org-agenda-clockreport-parameter-plist
      '(:link nil :maxlevel 3 :fileskip0 t))
(setq org-agenda-clockreport-parameter-plist
      '(:link t :maxlevel 3 :fileskip0 t))

;; 10.5 Definition of what constitutes a clocking problem (overlapping
;; clock entries, clocking gaps).
(setq org-agenda-clock-consistency-checks
      '(:max-duration "10:00"
                      :min-duration 0
                      :max-gap "0:00"
                      :gap-ok-around ("4:00")
                      :default-face
                      ((:weight bold
                                :box "#AAEE77"
                                :foreground "black" :background "#BFFA9E"))
                      :gap-face
                      ((:weight bold
                                :box "#BBDDFF"
                                :foreground "black" :background "#D0EDFF"))))
#+end_src

If you press ~E~, it will *show* the *first notes* about the tasks.

#+begin_src emacs-lisp
;; 10.5 Text prepended to the entry text in agenda buffers.
(setq org-agenda-entry-text-leaders "               │ ")
#+end_src

#+begin_src emacs-lisp
;; 10.5 File to which to add new entries with the `i' key in agenda and
;; calendar (org.el).
(setq org-agenda-diary-file "~/org/diary.org")

;; 10.5? Keep filters from one agenda view to the next.
(setq org-agenda-persistent-filter t)

;; Faces for specific Priorities (#A, #B and #C).
(setq org-priority-faces
      '((?A . (:foreground "#CC0000" :background "#FFE3E3"))
        (?B . (:foreground "#64992C" :background "#EBF4DD"))
        (?C . (:foreground "#64992C" :background "#FFFFFF"))))
#+end_src

Contextual auto-exclusion for tags in the Agenda view.  For example, I use the
following tags for ~TODO~:

- Phone ::
     Needs a phone.

- Errands ::
     Done in town.

- Home ::
     Done at home.

Now, it's quite easy for my computer to figure out which of these are
possible, based on my location:

- Phone ::
     Am I outside of normal calling hours?

- Errands ::
     Am I outside of business hours?

- Home ::
     Does my IP address begin with 192.168?

I can now define the function ~leuven--org-auto-exclude-function~ to auto-exclude
based on this type of context information.

All I have to do is type ~/ RET~ in the agenda view now, and it excludes based
on my machine's current temporal and physical context.

#+begin_src emacs-lisp
;; 10.5 Commands in the agenda buffer.
(defun leuven--weekday-p ()
  "Return t if current day is between Monday and Friday."
  (let ((dow (nth 6 (decode-time))))
    (and (> dow 0)
         (< dow 6))))

(defun leuven--working-p ()
  "Return t if current time is inside normal working hours.
Currently: 08:30-12:30 and 13:30-17:30."
  (let* ((time (decode-time))
         (hour (nth 2 time))
         (mins (nth 1 time)))
    (and (leuven--weekday-p)
         (or (or (and (= hour 8) (>= mins 30))
                 (and (< 8 hour) (< hour 12))
                 (and (= hour 12) (<= mins 30)))
             (or (and (= hour 13) (>= mins 30))
                 (and (< 13 hour) (< hour 17))
                 (and (= hour 17) (<= mins 30)))))))

(defun leuven--calling-hours-p ()
  "Return t if current time is inside normal calling hours.
Currently: 08:00-21:59."
  (let* ((hour (nth 2 (decode-time))))
    (and (<= 8 hour) (<= hour 21))))

(defun leuven--org-auto-exclude-function (tag)
  "XXX"
  (and (cond
        ((string= tag "personal")
         (with-temp-buffer
           (call-process "/sbin/ifconfig" nil t nil "en0" "inet")
           (goto-char (point-min))
           (not (re-search-forward "inet 192\\.168\\.9\\." nil t))))
        ((or (string= tag "errands")
             (string= tag "call"))
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 8) (> hour 21)))))
       (concat "-" tag)))

;;! Ensure that `:refile:' tags never will be excluded!
(defun leuven--org-auto-exclude-function (tag)
  "XXX"
  (and (cond
        ((string= tag "personal")
         (leuven--working-p))
        ((string= tag "work")
         (not (leuven--working-p)))
        ((or (string= tag "errands")
             (string= tag "call"))
         (not (leuven--calling-hours-p))))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'leuven--org-auto-exclude-function)
#+end_src

*************** TODO We should ensure that appointments don't disappear when filtering late at nite
- Look at appointments tagged ~errands~
- Filter at 23:00 with ~/ RET~
- Appointments such as "going to the doctor" will be removed from the agenda
  view...
*************** END

** Custom agenda views

#+begin_src emacs-lisp
;; Make the block agenda more compact (no agenda span name, no week number, no
;; separator line).
(setq org-agenda-compact-blocks t)
(setq org-agenda-compact-blocks nil)

(setq org-agenda-block-separator
      (propertize (make-string 132 (string-to-char "_"))
                  'face '(:foreground "#59ACE2"))) ; lighter version with #C0E2F4
#+end_src

Links to common agenda views:
- [[elisp:(org-agenda nil "a")]]
- [[elisp:(org-agenda nil "w")][Show Waiting Tasks]]
- [[elisp:(org-agenda nil "p")][Show Projects]]

or even:

: [[org-search:+work-boss-TODO="DONE"]]

if you define a new type of link.  See [[http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html][Use Org-Mode Links for Absolutely Anything]]
for more.

You can as well use your agenda and use ~/~ to limit the view to what you want
(~C-c a a / TAG~).

Commands:
- [[shell:ls -l]]
- shell:pwd

#+begin_src emacs-lisp
;;** 10.6 (info "(org)Custom agenda views")

(leuven--section "10.6 (org)Custom agenda views")

(with-eval-after-load "org-agenda"
  (let ((leuven-org-agenda-views
         (concat leuven--directory "org-leuven-agenda-views.el")))
    (when (file-exists-p leuven-org-agenda-views)
      (load-file leuven-org-agenda-views))))
                                        ; with-eval-after-load "org-agenda" ends here.
#+end_src

** Display all TODO items from the current directory

The function ~leuven-org-todo-list-current-dir~ will display your tasks from the
current directory (including from local files =TODO.org= and =BUGS.org=, for
example).

*************** TODO Add recursive option to show all tasks from subdir

#+begin_src emacs-lisp
(defun leuven-org-todo-list-current-dir ()
  "Produce a view from all Org files in the current directory."
  (interactive)
  (let* ((fname (buffer-file-name))
         (dname (if fname
                    (if (file-directory-p fname)
                        fname
                      (file-name-directory fname))
                  default-directory))
         (org-agenda-files (directory-files dname t "\\.\\(org\\|txt\\)$"))
         (org-agenda-sorting-strategy '(todo-state-up priority-down))
         (org-agenda-overriding-header
          (format "TODO items in directory: %s" dname))
         (org-agenda-sticky nil))
    (message "[%s...]" org-agenda-overriding-header)
    (org-todo-list)))

;; "TODO list" without asking for a directory.
(global-set-key (kbd "<M-S-f6>") #'leuven-org-todo-list-current-dir)
#+end_src

** Exporting Agenda Views

#+begin_src emacs-lisp
;;** 10.7 (info "(org)Exporting Agenda Views")

(leuven--section "10.7 (org)Exporting Agenda Views")

;; 10.7 Alist of variable/value pairs that should be active during agenda
;; export.
(setq org-agenda-exporter-settings
      '((ps-number-of-columns 1)      ; 2?
        (ps-landscape-mode t)
        ;; (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))
#+end_src

*************** TODO htmlize-output-type is duplicated lots of times!

** Agenda column view

#+begin_src emacs-lisp
;;** 10.8 (info "(org)Agenda column view")

(leuven--section "10.8 (org)Agenda column view")

;; 10.8 Default column format, if no other format has been defined.
(setq org-columns-default-format
      ;; "%65ITEM(Task) %DEADLINE(Due Date) %PRIORITY %6CLOCKSUM(Spent) %6Effort(Estim.){:}")
      ;; "%1BLOCKED %4TODO %CATEGORY %5Effort{:} %50ITEM %20TAGS %21ALLTAGS")
      ;; "%65ITEM(Task) %4TODO %PRIORITY %6Effort(Estim.) %14SCHEDULED %14DEADLINE(Due Date)")
      ;; "%65ITEM(Task) %4TODO %PRIORITY %20TAGS %6Effort(Estim.) %14SCHEDULED %14DEADLINE(Due Date)")
      ;; "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM"
      "%60ITEM(Details) %5PRIORITY(Prio) %14SCHEDULED(Scheduled) %15TAGS(Context) %7TODO(To Do) %6CLOCKSUM(Clock) %5Effort(Effort){:} ")

;; DUPLICATE Obey `eval' variables -- RISKY!
(setq enable-local-eval t)
#+end_src

** Not sorted

#+begin_src emacs-lisp
(with-eval-after-load "org-agenda"
#+end_src

#+begin_src emacs-lisp
  (defadvice org-agenda-switch-to
      (after leuven-org-agenda-switch-to activate)
    "Recenter after jumping to the file which contains the item at point."
    (recenter))
#+end_src

*** Mouse cursor doesn't highlight agenda lines

XXX Does this work?

#+begin_src emacs-lisp
  (add-hook 'org-agenda-finalize-hook
            #'(lambda ()
                (remove-text-properties (point-min) (point-max)
                                        '(mouse-face t))))
#+end_src

*************** TODO Adding ":tangle yes" on the above code block results in partial tangling!

*** Emphasize items in agenda

#+begin_src emacs-lisp
  (add-hook 'org-agenda-finalize-hook
            #'(lambda ()
                (let ((inhibit-read-only t))
                  (goto-char (point-min))
                  (org-do-emphasis-faces (point-max)))))
#+end_src

*** Mark a task as DONE and create a follow-up task

#+begin_src emacs-lisp
  (defun leuven-org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))

  (define-key org-agenda-mode-map
    (kbd "Z") #'leuven-org-agenda-mark-done-and-add-followup)
#+end_src

Source: Sacha Chua.

*** Capture something based on the agenda

#+begin_src emacs-lisp
  (defun leuven-org-agenda-new ()
    "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-switch-to)
    (org-capture 0))

  ;; ;; New key assignment (overrides `org-agenda-next-item').
  ;; (define-key org-agenda-mode-map (kbd "N") #'leuven-org-agenda-new)
#+end_src

#+begin_src emacs-lisp
  )
#+end_src

Source: Sacha Chua.

* Markup for rich export

#+begin_src emacs-lisp
;;* 11 (info "(org)Markup")

(leuven--section "11 (org)Markup")

(with-eval-after-load "org-faces"

  ;; Add a face to #+begin_quote and #+begin_verse blocks.
  (setq org-fontify-quote-and-verse-blocks t))

(with-eval-after-load "org"
  (message "[... Org Markup]")

  ;;??? Change the face of a headline (as an additional information) if it is
  ;; marked DONE (to face `org-headline-done').
  (setq org-fontify-done-headline t)

  ;; 11.1 Hide the emphasis marker characters.
  (setq org-hide-emphasis-markers t)  ; Impact on table alignment!
#+end_src

** Images and Tables

Automatic screenshot insertion.

#+begin_src emacs-lisp
  (defun leuven-org-insert-image-or-take-screenshot (name)
    "Insert a link to an already existing image, or else to a screenshot.
The screenshot is either taken to the given non-existing file name,
or added into the given directory, defaulting to the current one."
    ;; FIXME: Should limit to '("pdf" "jpeg" "jpg" "png" "ps" "eps")
    ;; which is org-export-latex-inline-image-extensions.
    (interactive "GImage name? ")
    (when (file-directory-p name)
      (setq name (concat
                  (make-temp-name
                   (expand-file-name
                    (concat (file-name-as-directory name)
                            (subst-char-in-string
                             "." "-"
                             (file-name-sans-extension
                              (file-name-nondirectory
                               (buffer-file-name)))))))
                  ".png")))
    (unless (file-exists-p name)
      (if (file-writable-p name)
          (progn
            (message "[Taking screenshot into %s]" name)
            (call-process "import" nil nil nil name)
            (message "[Taking screenshot...done]"))
        (error "Cannot create image file")))
    (insert (concat "[[" name "]]"))
    (org-display-inline-images))
#+end_src

** Macro replacement

#+begin_src emacs-lisp
  ;; Hide the brackets marking macro calls.
  (setq org-hide-macro-markers t)

  (defun org-macro-insert ()
    "XXX"
    (interactive)
    (let* ((macros (org-macro--collect-macros))
           (macro (completing-read "Insert macro: " (mapcar 'car macros)))
           (args (string-match "$[[:digit:]]" (cdr (assoc macro macros))))
           pos)
      (insert (format  "{{{%s" macro))
      (when args (insert "(") (setq pos (point)) (insert ")"))
      (insert "}}}")
      (when pos (goto-char pos)))))
#+end_src

** Embedded LaTeX

To get one entity in the middle of a word, use ~{}~, i.e. some ~w\entity{}rd~ (new
exporter only).

#+begin_src emacs-lisp
;; 11.7.1 Define user entities to produce special characters.
(with-eval-after-load "org-entities"

  (add-to-list 'org-entities-user
               '("ok"
                 ;; \definecolor{checkmark}{HTML}{1FAC21}
                 "{\\color{checkmark}\\ding{51}}" nil
                 "<font color='green'>&#x2714;</font>"
                 "OK"
                 "OK" "✔"))

  (add-to-list 'org-entities-user
               '("nok"
                 ;; \usepackage{pifont}
                 "{\\color{red}\\ding{55}}" nil
                 "<font color='red'>&#x2718;</font>"
                 "NOK"
                 "NOK" "✘")))
#+end_src

To list all available entities, run ~M-x org-entities-help~.

#+begin_src emacs-lisp
;; 11.7.2 Interpret "_" and "^" for display when braces are used.
(setq org-use-sub-superscripts '{})

;; ;; 11.7.3 Convert LaTeX fragments to images when exporting to HTML (using MathJax).
;; (setq org-export-with-latex t)
#+end_src

#+begin_src emacs-lisp
;; Highlight LaTeX and related syntax.
(setq org-highlight-latex-and-related '(latex script entities))

;; Show entities as UTF8 characters.
(setq org-pretty-entities t)          ; emsp, etc.

;; ;; Pretty entity display doesn't include formatting sub/superscripts.
;; (setq org-pretty-entities-include-sub-superscripts nil)
#+end_src

* Exporting

#+begin_src emacs-lisp
;;* 12 (info "(org)Exporting")

;; Bind the exporter dispatcher to a key sequence.
(with-eval-after-load "org"
  (message "[... Org Exporting]")

  ;; Libraries in this list will be loaded once the export framework is needed.
  (setq org-export-backends '(ascii html icalendar latex odt md))

  (define-key org-mode-map (kbd "C-c C-e") #'org-export-dispatch))
#+end_src

For Org buffers, add an enhanced version of ~save-buffer~ which does:

1. Save buffer (updating dynamic blocks and tables)
2. Execute the code blocks, and save once again
3. Tangle code blocks, if any to be tangled
4. Export to HTML and PDF, if such files already exist
5. Call ~send-patch~?

Notes:
- Use the asynchronous export (if possible, so that I don't loose time, or let
  it open to the value of that var)?
- Different behaviors can be obtained with ~C-u~ (or ~C-u C-u~)

Why not adding a recursive functionality as well (in Emacs Lisp too), to be
launched from Dired?

#+begin_src emacs-lisp
(with-eval-after-load "org"

  (defun org-save-buffer-and-do-related ()
    "Save buffer, execute/tangle code blocks, and export to HTML/PDF."
    (interactive)
    (let* ((orgfile (buffer-file-name))
           (base-name (file-name-base orgfile))
           (mdfile (concat base-name ".md"))
           (htmlfile (concat base-name ".html"))
           (texfile (concat base-name ".tex"))
           (pdffile (concat base-name ".pdf")))
      (save-buffer)                     ; See other commands in
                                        ; `before-save-hook':
                                        ; `org-update-all-dblocks'
                                        ; `org-table-iterate-buffer-tables'.
      (when (derived-mode-p 'org-mode)
        (measure-time "Restarted Org mode" (org-mode-restart))
                                        ; Update information from one of the
                                        ; special #+KEYWORD lines
                                        ; (like `C-c C-c')

        ;; Linting for Org documents.
        (when (try-require "org-lint")
          (measure-time "Linted Org mode"
                        (if (org-lint)
                            (progn
                              (message "[You should run `org-lint'!!!]")
                              (beep)
                              (sit-for 1)))))

        ;; ;; Update the results in the Org buffer.
        ;; (org-babel-execute-buffer)    ; In this case, better than
        ;;                               ; (add-hook 'org-export-first-hook
        ;;                               ;           #'org-babel-execute-buffer):
        ;;                               ; executed only once for both exports.

        ;; It'd make sense to eval all code blocks which have :cache yes or :exports
        ;; results or both... And, before that, to delete all code block results!?
        ;; Well, almost all code blocks: not the ones of "cached" blocks (they may have
        ;; taken a long time to be computed, or may not be computable another time), nor
        ;; the ones with a caption on the results block...

        (measure-time "Buffer saved"
                      (let ((before-save-hook nil))
                        (save-buffer)))
        (measure-time "Buffer tangled"
                      (org-babel-tangle))
        (when (file-exists-p mdfile)
          (if (file-newer-than-file-p orgfile mdfile)
              (measure-time "Buffer exported to Markdown"
                            (org-md-export-to-markdown))
            (message "[Markdown is up to date with Org file]")))
        (when (file-exists-p htmlfile)
          (if (file-newer-than-file-p orgfile htmlfile)
              (measure-time "Buffer exported to HTML"
                            (org-html-export-to-html))
            (message "[HTML is up to date with Org file]")))
        (when (or (file-exists-p texfile) (file-exists-p pdffile))
          (if (or (and (file-exists-p pdffile)
                       (file-newer-than-file-p orgfile pdffile))
                  (and (file-exists-p texfile)
                       (not (file-exists-p pdffile))))
                                        ; Previous PDF export failed.
              (measure-time "Buffer exported to PDF LaTeX"
                            (if (string-match "^#\\+BEAMER_THEME: " (buffer-string))
                                (org-beamer-export-to-pdf)
                              (org-latex-export-to-pdf)))
            (message "[PDF is up to date with Org file]")))
        (beep))))

  (define-key org-mode-map (kbd "<f9>") #'org-save-buffer-and-do-related))
#+end_src

#+begin_note
When called non-interactively, ~org-lint~ returns the reports, as an alist or nil,
so it can be used as a predicate.
#+end_note

*************** TODO Execute all code blocks in buffer
Ce qui serait mieux :

- executer tout dans le buffer (sauf les never, évidemment)
- exporter en let-bind'ant eval à never... SAUF POUR DES BLOCKS DONT ON NE
  VOULAIT PAS LE RÉSULTAT (TROP LONG, PAR EXEMPLE) DANS LE BUFFER MAIS QUE L'ON
  VEUT À L'EXPORT !!

Ansi, on aurait les valeurs à jour dans le buffer Org, et les deux exports
(HTML et PDF) seraient identiques entre eux, et avec le buffer Org.
*************** END

*************** TODO Check that SETUPFILES (like for Bigblow) or INCLUDE files exist
Before exporting...
*************** END

*************** TODO Map through inline code blocks to remove inline results
~(org-babel-map-inline-src-blocks nil (org-babel-remove-inline-result))~
*************** END

** Export options

#+begin_src emacs-lisp
;;** 12.2 (info "(org)Export options")

(leuven--section "12.2 (org)Export options")

;; Org generic export engine.
(with-eval-after-load "ox"

  ;; 12.3 Don't insert a time stamp into the exported file.
  (setq org-export-time-stamp-file nil)

  ;; 13.1.5 Export all drawers (including properties).
  ;; (setq org-export-with-drawers t)

  ;; Default language of HTML export (see `org-export-language-setup' XXX).
  (setq org-export-default-language "en")

  ;; Include priority cookies in export.
  (setq org-export-with-priority t)

  ;; Activate smart quotes during export (convert " to \og, \fg in French).
  (setq org-export-with-smart-quotes t) ; curly quotes in HTML

  ;; Interpret "_" and "^" for export when braces are used.
  (setq org-export-with-sub-superscripts '{})

  ;; Allow #+BIND to define local variable values for export.
  (setq org-export-allow-bind-keywords t)

  ;; ;; Exported stuff will not be pushed onto the kill ring.
  ;; (setq org-export-copy-to-kill-ring nil) ; new default since 2014-04-17

  ;; ;; Export and publishing commands will run in background.
  ;; (setq org-export-in-background t)

  ;; ;; Use a non-intrusive export dispatcher.
  ;; (setq org-export-dispatch-use-expert-ui t)

  ;; Export snippet translations.
  (add-to-list 'org-export-snippet-translation-alist
               '("h" . "html"))
  (add-to-list 'org-export-snippet-translation-alist
               '("l" . "latex"))
  (add-to-list 'org-export-snippet-translation-alist
               '("b" . "beamer"))

  )                                   ; with-eval-after-load "ox" ends here.
#+end_src

Eric Schulte has proposed the ~by-backend~ function (updated by Nicolas Goaziou)
for *backend-dependent execution* (for example, conditionally export TikZ to an
SVG image on HTML export and insert TikZ "as is" on PDF export):

#+begin_src emacs-lisp
(defmacro by-backend (&rest body)
  `(case org-export-current-backend ,@body))
#+end_src

See [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html#sec-4-3][Backend dependent execution -- conditionally export tikz to SVG on HTML export]]
for more information.

** Export settings

#+begin_src emacs-lisp
;;** 12.3 Export settings

(setq org-export-exclude-tags '("noexport" "crypt"))
#+end_src

** HTML export

To get a start for your CSS file, use the command
~M-x org-export-htmlize-generate-css~ to extract class definitions.

#+begin_src emacs-lisp
;;** 12.5 (info "(org)HTML export")

;; Org HTML export engine.
(with-eval-after-load "ox-html"

  (setq org-html-checkbox-type 'unicode)

  ;; Output type to be used by htmlize when formatting code snippets.
  (setq org-html-htmlize-output-type 'css)

  ;; ;; URL pointing to a CSS file defining text colors for htmlized Emacs
  ;; ;; buffers.
  ;; (setq org-org-htmlized-css-url "style.css")

  ;; ;; XML declaration.
  ;; (setq org-html-xml-declaration
  ;;       '(("html" . "<!-- <xml version=\"1.0\" encoding=\"%s\"> -->")
  ;;         ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
  ;;         ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")))

  ;; Coding system for HTML export.
  (setq org-html-coding-system 'utf-8)

  ;; ;; Format for the HTML postamble.
  ;; (setq org-html-postamble
  ;;       "  <div id=\"footer\"><div id=\"copyright\">\n    &copy; %d %a\n  </div></div>")

  ;; 13.1.5 Don't include the JavaScript snippets in exported HTML files.
  (setq org-html-head-include-scripts nil)

  ;; ;; 12.5.9 Turn inclusion of the default CSS style off.
  ;; (setq org-html-head-include-default-style nil)
#+end_src

#+begin_src emacs-lisp
  ;; HTML checkbox output.
  (defun leuven--checkbox-filter (item backend info)
    "XXX"
    (when (org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string
       "\\`.*\\(<code>\\[\\(X\\|&#xa0;\\|-\\)\\]</code>\\).*$"
       #'(lambda (rep)
           (let ((check (match-string 2 rep)))
             (cond ((equal check "X") "&#x2611;")
                   ((equal check "-") "&#x2610;")
                   (t "&#x2610;"))))
       item
       nil nil 1)))
  (add-to-list 'org-export-filter-item-functions
               'leuven--checkbox-filter)

  )                                   ; with-eval-after-load "ox-html" ends here.
#+end_src

Emacs 23+ users: in order to avoid "Invalid face" errors, you need to use the
version of =htmlize= made available by Carsten Dominik in =org-mode/contrib/lisp=
directory.

#+begin_src emacs-lisp
;;** (info "(emacs-goodies-el)htmlize")

(leuven--section "(emacs-goodies-el)htmlize")

;; HTML-ize font-lock buffers.
(autoload 'htmlize-buffer "htmlize"
  "Convert BUFFER to HTML, preserving colors and decorations." t)
(autoload 'htmlize-region "htmlize"
  "Convert the region to HTML, preserving colors and decorations." t)
(autoload 'htmlize-file "htmlize"
  "Load FILE, fontify it, convert it to HTML, and save the result." t)

(with-eval-after-load "htmlize"

  ;; Output type of generated HTML.
  (setq htmlize-output-type 'css)

  ;; XXX Override output type `inline-css' used for htmlizing a region.
  (defun htmlize-region-for-paste (beg end)
    "Htmlize the region and return just the HTML as a string.
This forces the `css' style and only returns the HTML body, but without the
BODY tag.  This should make it useful for inserting the text to another HTML
buffer."
    (let* ((htmlize-output-type 'css)  ; Was `inline-css'.
           (htmlbuf (htmlize-region beg end)))
      (unwind-protect
          (with-current-buffer htmlbuf
            (buffer-substring
             (plist-get htmlize-buffer-places 'content-start)
             (plist-get htmlize-buffer-places 'content-end)))
        (kill-buffer htmlbuf))))

  ;; Charset declared by the resulting HTML documents.
  (setq htmlize-html-charset "utf-8")

  ;; Non-ASCII characters (codes in the 128-255 range) are copied to
  ;; HTML without modification -- if your HTML is in Unicode.
  (setq htmlize-convert-nonascii-to-entities nil)

  ;; Key binding.
  (global-set-key (kbd "M-P") #'htmlize-buffer)

  )                                   ; with-eval-after-load "htmlize" ends here.
#+end_src

To get around PostScript problems, you can write the buffer to your browser
and then print from there, and in color.

This adds a Quick Print option to your menu bar (under File).

#+begin_src emacs-lisp
;; Quick print preview (to Web browser) with `htmlize-view-buffer'.
(autoload 'htmlize-view-buffer "htmlize-view"
  "Convert buffer to html preserving faces and view in web browser." t)

;; Same key binding as Org export to HTML (open in browser).
(global-set-key (kbd "C-c C-e h o") #'htmlize-view-buffer)

;; View current buffer as html in web browser.
(with-eval-after-load "htmlize-view"

  ;; Add "Quick Print" entry to file menu.
  (htmlize-view-add-to-files-menu))
#+end_src

Now, you can print from the browser in (complete) Unicode, using your system's
capabilities.

** LaTeX and PDF export

#+begin_src emacs-lisp
;;** 12.6 (info "(org)LaTeX and PDF export")
#+end_src

#+begin_src emacs-lisp
(leuven--section "12.6 (org)LaTeX and PDF export")

;; LaTeX back-end.
(with-eval-after-load "ox-latex"

  ;; Markup for TODO keywords and for tags, as a printf format.
  (defun leuven--org-latex-format-headline
      (todo todo-type priority text tags &optional info)
    "Default function for formatting the headline's text."
    (concat (when todo
              (format "{%s\\textbf{\\textsc{\\textsf{%s}}}} "
                      (cond ((equal todo-type 'todo) "\\color{red}")
                            ((equal todo-type 'done) "\\color{teal}")
                            (t "\\color{gray}"))
                      todo))
            (when priority
              (format "\\framebox{\\#%c} " priority))
            text
            (when tags
              (format "\\hfill{}\\fbox{\\textsc{%s}}"
                      ;; XXX source of "undefined control sequence"?
                      (mapconcat 'identity tags ":")))))

  ;; Function for formatting the headline's text.
  (setq org-latex-format-headline-function
        'leuven--org-latex-format-headline)

  ;; Default width for images.
  (setq org-latex-image-default-width ".75\\linewidth")

  ;; Format string for links with unknown path type.
  (setq org-latex-link-with-unknown-path-format "\\colorbox{red}{%s}")
#+end_src

#+begin_src emacs-lisp
  ;; Default process to convert LaTeX fragments to image files.
  ;; (setq org-preview-latex-default-process 'imagemagick)
#+end_src

Look at the variable ~org-latex-remove-logfiles~, which controls whether some
of the files produced by LaTeX (~org-latex-logfiles-extensions~) are removed.

#+begin_warning
Under Windows Emacs, ~executable-find~ searches for =latexmk.exe= only; it *never*
*will find the Cygwin symlink* to =latexmk.pl=, though Cygwin bin directory is first
in the PATH.

OTOH, when commands will be launched by the Org export process, as that will run
in the Bash/Zsh shell, Org will call the first match for ~latexmk~, hence the one
from Cygwin...

Not very coherent!
#+end_warning

#+begin_src emacs-lisp
  (defun leuven--change-pdflatex-program (backend)
    "Automatically run XeLaTeX, if asked, when exporting to LaTeX."

    (when (equal org-export-current-backend "latex")

      (let* ((org-latex-pdf-engine-full-path
              (cond ((string-match "^#\\+LATEX_CMD: xelatex" (buffer-string))
                     (or (executable-find "xelatex")
                         (error "Please install XeLaTeX.")))
                    (t
                     (or (executable-find "pdflatex")
                         (error "Please install PDFLaTeX.")))))

             (org-latex-pdf-command
              (cond ((executable-find "latexmk")
                     "latexmk")
                    (t
                     (file-name-base org-latex-pdf-engine-full-path))))
                                          ; "xelatex" or "pdflatex".

             (latex-file
              (cond ((string-match "^/usr/bin/" org-latex-pdf-engine-full-path)
                     "$(cygpath -m %f)")
                    (t
                     "%f"))))

        (message "[LaTeX engine: %s]" org-latex-pdf-engine-full-path)
        (message "[LaTeX command: %s]" org-latex-pdf-command)

        (setq org-latex-pdf-process
              (cond ((equal org-latex-pdf-command "latexmk")
                     `(;; "echo f = %f" "echo quotedf = '%f'" "echo cygpath = $(cygpath %f)"
                       "latexmk --version"
                       ,(concat "latexmk -cd -f -pdf -pdflatex=" (file-name-base org-latex-pdf-engine-full-path) " " latex-file
                                " && latexmk -c"))) ; Clean up all nonessential files.
                    ((equal org-latex-pdf-command "xelatex")
                     `(,(concat "xelatex -interaction=nonstopmode -output-directory=%o " latex-file)
                       ,(concat "xelatex -interaction=nonstopmode -output-directory=%o " latex-file)
                       ,(concat "xelatex -interaction=nonstopmode -output-directory=%o " latex-file)))
                    (t
                     `(,(concat "pdflatex -interaction=nonstopmode -output-directory=%o " latex-file)
                       ,(concat "pdflatex -interaction=nonstopmode -output-directory=%o " latex-file)
                       ,(concat "pdflatex -interaction=nonstopmode -output-directory=%o " latex-file)))))
        (message "[Export command: %S]" org-latex-pdf-process)
        )))

  ;; Hook run before parsing an export buffer.
  (add-hook 'org-export-before-parsing-hook #'leuven--change-pdflatex-program)
#+end_src

#+begin_warning
As of 2015-09-29, it seems that ~LATEX_COMPILER~ is the keyword to use the above
functionality in standard Org mode!
#+end_warning

#+begin_note
If LaTeXmk succeeds, the =.tex= file should be removed as well (as we can produce
it independently anyway); but adding ~rm $(cygpath %f)~ did not do the trick (in
Windows Emacs, well in Cygwin Emacs!?)...
#+end_note

#+begin_tip
You can clear out this individual function by calling ~remove-hook~:

: (remove-hook 'org-export-before-parsing-hook #'leuven--change-pdflatex-program)
#+end_tip

You can easily customize this variable on a per file basis.  If you seldom use
~bibtex~, have the default be to run ~pdflatex~ just once or twice.  Then, for any
Org file that needs ~bibtex~, simply put in the following line (or a variation
thereof):

#+begin_src org :tangle no
,#+BIND: org-latex-pdf-process ("pdflatex %b" "bibtex %b" "pdflatex %b" "pdflatex %b")
#+end_src

Also, you can use ~latexmk~ (in TeX Live) which can save you some time when it
is not necessary to rebuild index and/or bibliography.

#+begin_src emacs-lisp
  ;; Export source code using `listings' (instead of `verbatim').
  (setq org-latex-listings t)

  ;; 12.6.2 Default packages to be inserted in the header.
  ;; Include the `listings' package for fontified source code.
  (add-to-list 'org-latex-packages-alist '("" "listings") t)

  ;; Include the `xcolor' package for colored source code.
  (add-to-list 'org-latex-packages-alist '("" "xcolor") t)
#+end_src

When using the ~utf8~ option to ~inputenc~ (and not ~utf8x~ which should be avoided,
as it uses ~ucs~ which is no longer maintained), we have 2 solutions to support
the UTF-8 *no-break space*:

- Convert it in Org mode, when exporting (via a filter), or

  #+begin_src emacs-lisp
  ;; Filter for no-break spaces.
  (defun leuven--latex-filter-nbsp (text backend info)
    "Convert no-break spaces when exporting to LaTeX/Beamer."
    (when (memq backend '(latex beamer))
      (replace-regexp-in-string " " "~" text)))

  (add-to-list 'org-export-filter-plain-text-functions
               'leuven--latex-filter-nbsp)
  #+end_src

- Convert it in LaTeX:

  #+begin_src emacs-lisp :tangle no
  ;; Convert `nbsp' to its LaTeX equivalent.
  (add-to-list 'org-latex-packages-alist
               (concat "\\ifdefined\\DeclareUnicodeCharacter{"
                       "\\DeclareUnicodeCharacter{00A0}{~}"
                       "}\\fi") t)
  #+end_src

XXX The first one is better because ... (see mail of Daniel Flipo)

The exporter will *add* a language option to the LaTeX ~babel~ package according to
the ~#+LANGUAGE:~ keyword (only) if:

- The ~babel~ package is explicitly loaded (in preamble), _and_
- The language is different from the one set by the user.

#+begin_src emacs-lisp
  ;; Include the `babel' package for language-specific hyphenation and
  ;; typography.
  (add-to-list 'org-latex-packages-alist '("french" "babel") t)
#+end_src

What about ~apacite~ and ~tikz~ in ~org-latex-packages-alist~?

#+begin_src emacs-lisp
  (defun leuven--change-pdflatex-packages (backend)
    "Automatically select the LaTeX packages to include (depending on PDFLaTeX
vs. XeLaTeX) when exporting When exporting to LaTeX."

    ;; Unconditionally remove `inputenc' from all the default packages.
    (setq org-latex-packages-alist
          (delete '("AUTO" "inputenc" t)
                  org-latex-packages-alist))

    ;; Unconditionally remove `fontenc' from all the default packages.
    (setq org-latex-packages-alist
          (delete '("T1" "fontenc" t)
                  org-latex-packages-alist))

    ;; Unconditionally remove `textcomp' from all the default packages.
    (setq org-latex-packages-alist
          (delete '("" "textcomp" t)
                  org-latex-packages-alist))

    (if (string-match "^#\\+LATEX_CMD: xelatex" (buffer-string))
        ;; Packages to include when XeLaTeX is used.
        (setq org-export-latex-packages-alist
              '(("" "fontspec" t)
                ("" "xunicode" t)
                ;; Add here things like `\setmainfont{Georgia}'.
                ))

      ;; Packages to include when PDFLaTeX is used.
      (setq org-export-latex-packages-alist
            '(("AUTO" "inputenc" t)
              ("T1" "fontenc" t)
              ("" "textcomp" t))))

    ;; Packages to always include.
    (add-to-list 'org-export-latex-packages-alist
                 '("frenchb" "babel") t))

  ;; Hook run before parsing an export buffer.
  (add-hook 'org-export-before-parsing-hook #'leuven--change-pdflatex-packages)
#+end_src

#+begin_src emacs-lisp
  ;; 12.6.5 Default position for LaTeX figures.
  (setq org-latex-default-figure-position "!htbp")
#+end_src

** "Ignore heading + promote children" tag

The actual contents of an abstract can be rather large.

To be able to put it into a collapsable headline *without exporting the
headline*, but *well its contents*, you can add a ~ignore~ tag to remove the
headline:

#+begin_src emacs-lisp
  (defun leuven--org-export-ignore-headlines (data backend info)
    "Remove headlines tagged \"ignore\" retaining contents and promoting children.
Each headline tagged \"ignore\" will be removed retaining its
contents and promoting any children headlines to the level of the
parent."
    (org-element-map data 'headline
      #'(lambda (object)
          (when (member "ignore" (org-element-property :tags object))
            (let ((level-top (org-element-property :level object))
                  level-diff)
              (mapc #'(lambda (el)
                        ;; Recursively promote all nested headlines.
                        (org-element-map el 'headline
                          #'(lambda (el)
                              (when (equal 'headline (org-element-type el))
                                (unless level-diff
                                  (setq level-diff (- (org-element-property :level el)
                                                      level-top)))
                                (org-element-put-property el
                                                          :level (- (org-element-property :level el)
                                                                    level-diff)))))
                        ;; Insert back into parse tree.
                        (org-element-insert-before el object))
                    (org-element-contents object)))
            (org-element-extract-element object)))
      info nil)
    data)

  (add-hook 'org-export-filter-parse-tree-functions
            #'leuven--org-export-ignore-headlines)
#+end_src

In addition, it promotes all headlines under the removed ~ignore~-tagged
headline.  This is useful to support structures like the following:

#+begin_src org :tangle no
# Wrapping an abstract in a headline

,* Abstract                                                             :ignore:
,#+LaTeX: \begin{abstract}
,#+HTML: <div id="abstract">
...
,#+HTML: </div>
,#+LaTeX: \end{abstract}

# Placing References under a headline (using ox-bibtex in contrib)

,* References                                                           :ignore:
,#+BIBLIOGRAPHY: dissertation plain

# Inserting an appendix for LaTeX using the appendix package.

,* Appendix                                                             :ignore:
,#+LaTeX: \begin{appendices}
,** Reproduction
,** Data Sets
,** Tooling
,** Definitions
,#+LaTeX: \end{appendices}
#+end_src

#+begin_src emacs-lisp
  )                                   ; with-eval-after-load "ox-latex" ends here.
#+end_src

** LaTeX Beamer and PDF export

#+begin_src emacs-lisp
;; 12.6.6 Beamer class export.
;; (require 'ox-beamer)
(with-eval-after-load "ox-beamer"

  ;; Default title of a frame containing an outline.
  (setq org-beamer-outline-frame-title "Plan")) ; [default: "Outline"]
#+end_src

** OpenDocument Text (ODT)

ODT export is not loaded by default.  You will have to load it explicitly or to
add it to ~org-export-backends~.

#+begin_src emacs-lisp
(with-eval-after-load "ox-odt"

  ;; Convert "odt" format to "doc" format.
  (setq org-odt-preferred-output-format "doc")

  (when leuven--cygwin-p
    (setcdr (assoc "LibreOffice" org-odt-convert-processes)
            "soffice --headless --convert-to %f%x --outdir \"$(cygpath -m %d)\" \"$(cygpath -m %i)\"")))
#+end_src

#+begin_tip
With the amazing ~ox-pandoc~, you can *export to ~.docx~ directly*.  No need to go
through LaTeX!
#+end_tip

** Markdown

#+begin_src emacs-lisp
;; major mode for editing Markdown-formatted text.
(with-eval-after-load "markdown-mode-autoloads"
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
#+end_src

See https://gist.github.com/fredRos/0e3a845de95ec654538f to setup emacs to
render a README.md very similarly to how github will do it; except it also works
offline.

Have Firefox reload the page on demand using the [[https://addons.mozilla.org/en-US/firefox/addon/auto-reload/][Auto Reload]] extension.

** Publishing

Publish related Org mode files as a website.

#+begin_warning
It can be used for generating different PDF files from the same source file...
See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-9-2][9.2 The Multiple Export Case]].
#+end_warning

#+begin_src emacs-lisp
;;* 13 (info "(org)Publishing")

(leuven--section "13 (org)Publishing")

(with-eval-after-load "ox-publish"

  ;; Show message about files *not* published.
  (setq org-publish-list-skipped-files nil)
#+end_src

*** Uploading files

#+begin_src emacs-lisp
  ;; ;; 13.2 Always publish all files.
  ;; ;; (do not use time stamp checking for skipping unmodified files)
  ;; (setq org-publish-use-timestamps-flag nil)
#+end_src

*** Triggering publication

#+begin_src emacs-lisp
  ;; 13.4 Force publishing all files.
  (defun leuven-org-publish-all-force ()
    "XXX"
    (interactive)
    (org-publish-all t)))
#+end_src

** Working With Source Code

Literate programming and reproducible research.

#+begin_src emacs-lisp
;;* 14 (info "(org)Working With Source Code")
#+end_src

Automate the redisplay of inline images, so that the images are always
up-to-date.

#+begin_src emacs-lisp
(with-eval-after-load "ob-core"

  ;; Make the images in the Emacs buffer automatically refresh after
  ;; execution.

  ;; (add-hook 'org-babel-after-execute-hook
  ;;           #'(lambda ()
  ;;             (org-display-inline-images nil t))) ; DOESN'T WORK!
  ;;                                       ; More efficient with refresh == t.

  (add-hook 'org-babel-after-execute-hook #'org-display-inline-images))
#+end_src

*** Editing source code

#+begin_src emacs-lisp
;;** 14.2 (info "(org)Editing source code")

(leuven--section "14.2 (org)Editing source code")
#+end_src

Mapping between languages (listings in LaTeX) and their major mode (in Emacs).

#+begin_src emacs-lisp
(with-eval-after-load "org-src"

  ;; Mapping languages to their major mode (for editing the source code block
  ;; with `C-c '') -- when the language name doesn't match exactly the
  ;; language mode.
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
  (add-to-list 'org-src-lang-modes '("js" . js2)))
#+end_src

#+begin_src emacs-lisp
;; Display the source code edit buffer in the current window, keeping all
;; other windows.
(setq org-src-window-setup 'current-window)

;; FIXME Bind this to the correct keys.
(defun leuven-org-babel-expand-src-block ()
  "XXX"
  (interactive)
  (let ((org-src-window-setup 'reorganize-frame))
    (org-babel-expand-src-block)))

;; Indent the content of a source code block.
(setq org-edit-src-content-indentation 2)

;; Fontify code in code blocks (highlight syntax in the Org buffer).
(setq org-src-fontify-natively t)       ;! Create overlay
                                        ;! `org-block-background' and remove
                                        ;! text property `org-block'.

;; Preserve spaces and `TAB' characters in source code blocks.
(setq org-src-preserve-indentation t) ; Or add a `-i' flag to you source block.

;; Same effect for `TAB' as in the language major mode buffer (indenting
;; properly when hitting the `TAB' key).
(setq org-src-tab-acts-natively t)


;; (with-eval-after-load "org"
;;   (message "[... Org Editing source code]")
;;
;;   ;; Allow indent region in the code edit buffer (according to language).
;;   (defun leuven-org-indent-region (&optional arg)
;;     (interactive "P")
;;     (or (org-babel-do-key-sequence-in-edit-buffer (kbd "C-M-\\"))
;;         (indent-region arg)))
;;
;;   ;; Make `C-c C-v C-x C-M-\' more convenient.
;;   (define-key org-mode-map (kbd "C-M-\\") #'leuven-org-indent-region))

;; Prevent auto-filling in src blocks.
(setq org-src-prevent-auto-filling t)

;; ;; with-eval-after-load...
;; (add-hook 'org-src-mode-hook
;;           #'(lambda ()
;;             (define-key org-src-mode-map (kbd "<f2>") #'org-edit-src-save)))
#+end_src

C-c TAB
Toggle the visibility of existing tags in the buffer.  This can be used as a
cheap preview (sgml-tags-invisible).

View just the source-code blocks within the current Org-babel file (something
logically equivalent to "tangle", but without creating a separate file).

#+begin_src emacs-lisp
(defvar only-code-overlays nil
  "Overlays hiding non-code blocks.")
(make-variable-buffer-local 'only-code-overlays)

(defun hide-non-code ()
  "Hide non-code-block content of the current Org mode buffer."
  (interactive)
  (add-to-invisibility-spec '(non-code))
  (let (begs ends)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
        (push (match-beginning 5) begs)
        (push (match-end 5)       ends))
      (map 'list #'(lambda (beg end)
                     (let ((ov (make-overlay beg end)))
                       (push ov only-code-overlays)
                       (overlay-put ov 'invisible 'non-code)))
           (cons (point-min) (reverse ends))
           (append (reverse begs) (list (point-max)))))))

(defun show-non-code ()
  "Show non-code-block content of the current Org mode buffer."
  (interactive)
  (mapc 'delete-overlay only-code-overlays))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (defun org-kill-ring-save-code-block ()
    "Save the current code block as if killed, but don't kill it."
    (interactive)
    (save-excursion
      (let (beg end)
        (search-backward "begin_src")
        (beginning-of-line)
        (forward-line 1)
        (setq beg (point))
        (search-forward "end_src")
        (beginning-of-line)
        (setq end (point))
        (copy-region-as-kill beg end)
        (message "[Copied the current code block]"))))

  ;; Copy current code block.
  (define-key org-mode-map (kbd "H-w") #'org-kill-ring-save-code-block))
#+end_src

*** Evaluating code blocks

See:
- ~org-babel-default-header-args~
- ~org-babel-default-inline-header-args~

#+begin_src emacs-lisp
;;** 14.5 (info "(org)Evaluating code blocks")

(leuven--section "14.5 (org)Evaluating code blocks")

;; I don't want to execute code blocks with `C-c C-c' (evaluate code
;; block only with `C-c C-v e').
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)

;; Languages for which Org-babel will raise literate programming errors when
;; noweb references can not be resolved.

(with-eval-after-load "ob-core"
  (add-to-list 'org-babel-noweb-error-langs "emacs-lisp"))
#+end_src

Write error messages to the Messages buffer for invalid ~org-sbe~ calls.

#+begin_src emacs-lisp :tangle no
;; Debugging org-sbe calls.
(defadvice org-sbe (around get-err-msg activate)
  "Issue messages at errors."
  (condition-case err
      (progn
    ad-do-it)
    (error
     (message "[Error in org-sbe: %S]" err)
     (signal (car err) (cdr err)))))
#+end_src

*** Languages

#+begin_src emacs-lisp
(with-eval-after-load "ob-exp"
  ;; Template used to export the body of code blocks.
  (setq org-babel-exp-code-template
        ;; (concat "\n=%name=:\n"
        org-babel-exp-code-template)
  ;; )
  )

;; Keep lower-case.
(setq org-babel-results-keyword "results")
#+end_src

Customize the ~org-babel-load-languages~ variable to enable support for
languages which can be evaluated in Org mode buffers.

#+begin_src emacs-lisp
;;** 14.7 (info "(org)Languages")

(leuven--section "14.7 (org)Languages")

;; FIXME Test executable-find (of Rterm, gnuplot, ruby, etc.) before
;; setting language to yes...

(with-eval-after-load "org"
  (message "[... Org Languages]")

  ;; Configure Babel to support most languages.
  (add-to-list 'org-babel-load-languages '(R        . t)) ; Requires R and ess-mode.
  (add-to-list 'org-babel-load-languages '(awk      . t))
  (add-to-list 'org-babel-load-languages '(ditaa    . t)) ; Sudo aptitude install openjdk-6-jre.
  (add-to-list 'org-babel-load-languages '(dot      . t))
  (add-to-list 'org-babel-load-languages '(java     . t))
  (add-to-list 'org-babel-load-languages '(latex    . t)) ; Shouldn't you use #+begin/end_latex blocks instead?
  (add-to-list 'org-babel-load-languages '(ledger   . t)) ; Requires ledger.
  (add-to-list 'org-babel-load-languages '(makefile . t))
  (add-to-list 'org-babel-load-languages '(org      . t))
  (add-to-list 'org-babel-load-languages '(python   . t))
  (add-to-list 'org-babel-load-languages '(shell    . t)) ; Org mode 8.2 (Emacs 26.1).
  (add-to-list 'org-babel-load-languages '(sql      . t))

  (org-babel-do-load-languages        ; Loads org, gnus-sum, etc...
   'org-babel-load-languages org-babel-load-languages)

  ;; ;; Don't use getline for command-line editing and assert interactive use.
  ;; (setq org-babel-R-command
  ;;       (concat org-babel-R-command " --ess"))

  ;; Accented characters on graphics.
  (setq org-babel-R-command
        (concat org-babel-R-command " --encoding=UTF-8"))

  ;; R commands are displayed in the process buffer.
  (setq org-babel-R-eval-visibly t)   ; XXX Under test

  ;; Check for the support of (inline) source block languages.
  (defun org-src-block-check ()
    "XXX"
    (interactive)
    (org-element-map (org-element-parse-buffer)
        '(src-block inline-src-block)
      #'(lambda (sb)
          (let ((language (org-element-property :language sb)))
            (cond ((null language)
                   (error "Missing language at line %d in %s"
                          (line-number-at-pos
                           (org-element-property :post-affiliated sb))
                          (buffer-name)))
                  ;; ((and (not (assoc-string language org-babel-load-languages))
                  ;;       (not (assoc-string language org-src-lang-modes))
                  ;;       ;; (locate-library (concat language "-mode")) ; would allow `sh-mode'
                  ;;       )
                  ;;                       ; XXX This should be stricter: must be
                  ;;                       ; in org-babel-load-languages for
                  ;;                       ; evaluated code blocks. Must be in both
                  ;;                       ; other cases for edited code blocks.
                  ;;  (error "Unknown language `%s' at line %d in `%s'"
                  ;;         language
                  ;;         (line-number-at-pos
                  ;;          (org-element-property :post-affiliated sb))
                  ;;         (buffer-name)))
                  ))))

    ;; (message "[Source blocks checked in %s]"
    ;;          (buffer-name (buffer-base-buffer)))
    )

  (add-hook 'org-mode-hook #'org-src-block-check t))
                                        ; Place this at the end to ensure that
                                        ; errors do not stop applying other
                                        ; functions in the `org-mode-hook' (such
                                        ; as switching the dictionary).
#+end_src

*************** TODO Why isn't diff-mode.el found?
[[file:~/.dotfiles/local/org/Org-for-dummies.org]]
*************** END

*************** TODO Check src blocks in  *temp* buffers?
*************** END

~screen~ offers support for interactive terminals.  Mostly shell scripts.  Heavily
inspired by ~eev~.

Eric Schulte believes ~screen~ has more of a focus on sustained interaction with
an interactive terminal.

*** Prettier (or at least fancier) code block delimiters

#+begin_src emacs-lisp :tangle no
  (defun prettier-org-code-blocks ()
    "XXX"
    (interactive)
    (font-lock-add-keywords nil
      '(("\\(\+begin_src\\)"
         (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                   nil)))
        ("\\(\+end_src\\)"
         (0 (progn (compose-region (match-beginning 1) (match-end 1) ?¦)
                   nil))))))

  (add-hook 'org-mode-hook #'prettier-org-code-blocks)
#+end_src

*** Library of Babel

#+begin_note
As the LOB contains code blocks of different languages, and as we now *check that
languages are known*, this section 14.6 has been moved *after* the section 14.7
where we *load languages* such as R, etc.
#+end_note

#+begin_src emacs-lisp
;;** 14.6 (info "(org)Library of Babel")

(leuven--section "14.6 (org)Library of Babel")

(with-eval-after-load "org"

  ;; Load the NAMED code blocks defined in Org mode files into the library of
  ;; Babel (global `org-babel-library-of-babel' variable).
  (let ((lob-file (concat (file-name-directory (locate-library "org"))
                          "../doc/library-of-babel.org")))
    (when (file-exists-p lob-file)
      (org-babel-lob-ingest lob-file))))
#+end_src

*** Key bindings and useful functions

#+begin_src emacs-lisp
(leuven--section "14.11 (org)Key bindings and useful functions")

(with-eval-after-load "ob-core"

  (defadvice org-babel-next-src-block
      (after leuven-org-babel-next-src-block activate)
    "Recenter after jumping to the next source block."
    (recenter))

  (defadvice org-babel-previous-src-block
      (after leuven-org-babel-previous-src-block activate)
    "Recenter after jumping to the previous source block."
    (recenter)))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp
;;* 15 (info "(org)Miscellaneous")
#+end_src

#+begin_src emacs-lisp
;; From Dan Davison.
(defun leuven-switch-to-org-scratch ()
  "Switch to a temp Org buffer.  If the region is active, insert it."
  (interactive)
  (let ((contents (and (use-region-p)
                       (buffer-substring (region-beginning)
                                         (region-end)))))
    (find-file "/tmp/org-scratch.org")
    (if contents (insert contents))))
#+end_src

*** Change PROPERTY drawer location
    [2014-10-28 Tue]

Find all entries where :PROPERTIES: is not the first item listed.

#+begin_src emacs-lisp
(defun org-check-property-drawers ()
  "XXX"
  (interactive)
  (org-element-map (org-element-parse-buffer 'element) 'headline
    #'(lambda (h)
        (and (org-element-map h 'drawer
               #'(lambda (d) (equal (org-element-property :name d) "PROPERTIES"))
               nil t 'headline)
             (let ((begin (org-element-property :begin h)))
               (message "[Entry with erroneous properties drawer at %d]" begin)
               begin)))))
#+end_src

#+begin_src emacs-lisp
(defun org-repair-property-drawers ()
  "Fix properties drawers in current buffer.
Ignore non Org buffers."
  (when (derived-mode-p 'org-mode)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((case-fold-search t)
           (inline-re (and (featurep 'org-inlinetask)
                           (concat (org-inlinetask-outline-regexp)
                                   "END[ \t]*$"))))
       (org-map-entries
        #'(lambda ()
            (unless (and inline-re (looking-at-p inline-re))
              (save-excursion
                (let ((end (save-excursion (outline-next-heading) (point))))
                  (forward-line)
                  (when (looking-at-p org-planning-line-re) ; Org-8.3.
                    (forward-line))
                  (when (and (< (point) end)
                             (not (looking-at-p org-property-drawer-re))
                             (save-excursion
                               (and (re-search-forward org-property-drawer-re end t)
                                    (eq (org-element-type
                                         (save-match-data (org-element-at-point)))
                                        'drawer))))
                    (insert (delete-and-extract-region
                             (match-beginning 0)
                             (min (1+ (match-end 0)) end)))
                    (unless (bolp) (insert "\n"))))))))))))

(when (boundp 'org-planning-line-re)
  (add-hook 'org-mode-hook #'org-repair-property-drawers))
#+end_src

*** Ispell

#+begin_note
The ~leuven--org-switch-dictionary~ function is called as well on each code block
(at least, in emails that are being read), in buffers called ~*fontification*~.
#+end_note

#+begin_src emacs-lisp
(defun leuven--org-switch-dictionary ()
  "Set language if Flyspell is enabled and `#+LANGUAGE:' is on top 8 lines."
  (when (and (boundp 'ispell-dictionary-alist)
             ispell-dictionary-alist)
    (save-excursion
      (goto-char (point-min))
      (forward-line 8)
      (let (lang dict
                 (dict-alist '(("en" . "american")
                               ("fr" . "francais"))))
        (when (re-search-backward "#\\+LANGUAGE: +\\([[:alpha:]_]*\\)" 1 t)
          (setq lang (match-string 1))
          (setq dict (cdr (assoc lang dict-alist)))
          (if dict
              (progn
                (ispell-change-dictionary dict)
                (force-mode-line-update))
            (message "[No Ispell dictionary for language `%s' (see file `%s')]"
                     lang (file-name-base))
            (sit-for 1.5)))))))

;; Guess dictionary.
(add-hook 'org-mode-hook #'leuven--org-switch-dictionary)
#+end_src

*************** TODO Avoid (error "Undefined dictionary: american")
when dictionaries are not installed. IN FACT, ISPELL IS NOT AT ALL INSTALLED!

Check out for valid dictionaries:
(append ispell-local-dictionary-alist ispell-dictionary-alist)
*************** END

*** Easy templates

Lower-case in ~BEGIN_SRC~ and other keywords: do not stand out!

#+begin_src emacs-lisp
;;** 15.2 (info "(org)Easy Templates")

(leuven--section "15.2 (org)Easy Templates")

(with-eval-after-load "org"
  (message "[... Org Easy Templates]")

  ;; New format in Org 9.2.
  (add-to-list 'org-structure-template-alist '("n" . "note"))
  (add-to-list 'org-structure-template-alist '("w" . "warning"))
  (add-to-list 'org-structure-template-alist '("t" . "tip"))

  ;; Begin/end example markers will be inserted in lower case.
  (setq org-babel-uppercase-example-markers nil)
  )
#+end_src

*** Speed keys

Activate single letter commands (for example, outline navigation with ~f~, ~b~, ~n~,
and ~p~) at beginning of a headline:

- ~f~ ::
     ~org-forward-same-level~.

- ~b~ ::
     ~org-backward-same-level~.

- ~n~ ::
     ~outline-next-visible-heading~.

- ~p~ ::
     ~outline-previous-visible-heading~.

For navigating blocks:

- F ::
     ~org-next-block~.

- B ::
     ~org-previous-block~.

#+begin_tip
Use ~?~ at the start of an Org header to see which speed commands we have.
#+end_tip

#+begin_src emacs-lisp
;;** 15.3 (info "(org)Speed keys")

(leuven--section "15.3 (org)Speed keys")

(with-eval-after-load "org"
  (message "[... Org Speek keys]")

  ;; Activate single letter commands at beginning of a headline.
  (setq org-use-speed-commands t)

  (add-to-list 'org-speed-commands-user '("d" org-todo "DONE"))
  (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
  (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
  (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
  (add-to-list 'org-speed-commands-user '("W" widen))
  (add-to-list 'org-speed-commands-user '("k" org-cut-subtree))
#+end_src

**** Convert Windows Apps key to Hyper

Here are more obvious key bindings to *execute* (than ~C-c C-v C-e~ and company)
using "hyper":

#+begin_src emacs-lisp
  ;; Run current line (mapped to H-r).

  ;; Run from beginning of code block to current line (mapped to H-a?).

  ;; Run from current line to end of code block (mapped to H-e?).

  ;; Run current code block.
  (define-key org-mode-map (kbd "H-e") #'org-babel-execute-maybe)

  (defun org-babel-force-execute-src-block ()
    "Force execution of the current source code block."
    (interactive)
    (org-babel-execute-src-block nil nil '((:eval . "yes"))))

  ;; Run current code block (force execution).
  (define-key org-mode-map (kbd "H-f") #'org-babel-force-execute-src-block)
#+end_src

To *tangle*:

#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "H-t") #'org-babel-tangle)
#+end_src

#+begin_src emacs-lisp
  )
#+end_src

*** Code evaluation and security issues

For security resons, evaluation is not turned on by default.

#+begin_src emacs-lisp
;;** 15.4 (info "(org)Code evaluation security") issues

(leuven--section "15.4 (org)Code evaluation security issues")

(with-eval-after-load "ob-core"

  ;;!! Don't be prompted on every code block evaluation.
  (setq org-confirm-babel-evaluate nil))
#+end_src

#+begin_src emacs-lisp :tangle no
(with-eval-after-load "ob-core"

  (defface org-block-executing
    '((t :background "#FFE0FF"))
    "Face used for the source block background when executed.")

  ;; Change the color of code blocks while they are being executed.
  (defadvice org-babel-execute-src-block (around progress nil activate)
    "Create an overlay indicating when code block is running."
    (let ((o (make-overlay (org-element-property :begin (org-element-at-point))
                           (1- (org-element-property :end (org-element-at-point))))))
      (recenter)
      (overlay-put o 'face 'org-block-executing)
      (measure-time "Executed code block" ad-do-it)
      (delete-overlay o))))
#+end_src

#+begin_note
We've disabled the advice ~ad-Advice-org-babel-execute-src-block~ because of the
error message ~`recenter'ing a window that does not display current-buffer~ when
exporting =gnus-leuven.txt= to HTML.
#+end_note

*** A cleaner outline view

#+begin_src emacs-lisp
;;** 15.8 A (info "(org)Clean view")

(with-eval-after-load "org"
  (message "[... Org Clean view]")

  ;; 15.8 Don't skip even levels for the outline.
  (setq org-odd-levels-only nil))
#+end_src

*** Interaction with other packages

#+begin_src emacs-lisp
;;** 15.10 (info "(org)Interaction")

(leuven--section "15.10 (org)Interaction")
#+end_src

#+begin_note
On [2015-05-01 Fri], in commit ~49a656a~, Nicolas Goaziou has removed
~org-babel-src-name-w-name-regexp~, and replaced it by the function call
~(org-babel-named-src-block-regexp-for-name)~.

Until modification of the following code, it has been disabled, as it breaks
Org...
#+end_note

#+begin_src emacs-lisp :tangle no
(with-eval-after-load "org"

  ;; Support shift-selection for making and enlarging regions when the cursor
  ;; is not in a special context.
  (setq org-support-shift-select t)

  ;; Maximum level for Imenu access to Org mode headlines.
  (setq org-imenu-depth 3)

  ;; Extension of Imenu.
  (when (and (featurep 'ob-core)      ; `org-babel' has been loaded.
             (featurep 'imenu))       ; Imenu has been loaded.

    (setq org-src-blocks-imenu-generic-expression
          `(("Snippets" ,org-babel-src-name-w-name-regexp 2)))

    (add-hook 'org-mode-hook
              #'(lambda ()
                  (setq imenu-generic-expression
                        org-src-blocks-imenu-generic-expression))))

  ;; Alternative to Imenu.
  (defun dan/find-in-buffer ()
    "XXX"
    (interactive)
    (let ((targets
           `(("<named src blocks>" . ,org-babel-src-name-regexp)
             ("<src block results>" . ,org-babel-result-regexp))))
      (occur
       (cdr
        (assoc
         (completing-read "Find: " (mapcar #'car targets)) targets)))
      (other-window 1))))
#+end_src

*** Org-crypt

Org-crypt provides for encrypting individual entries in an otherwise
non-encrypted file.

To later decrypt an entry that's encrypted, use ~M-x org-decrypt-entry~ or ~C-c
C-r~ (fits nicely with the meaning of "reveal").

#+begin_src emacs-lisp
;; Keep my encrypted data (like account passwords) in my Org mode files with
;; a special tag instead.
(with-eval-after-load "org"
  (message "[... Org Crypt]")

  (try-require 'org-crypt))           ; Loads org, gnus-sum, etc...

(with-eval-after-load "org-crypt"

  ;; Encrypt all entries before saving.
  (org-crypt-use-before-save-magic)

  ;; Which tag is used to mark headings to be encrypted.
  (setq org-tags-exclude-from-inheritance '("crypt")))
#+end_src

* Other

Anonymize Org contents (sanitize the sensitive data).

#+begin_src emacs-lisp
(defun leuven-org-scramble-contents ()
  "XXX"
  (interactive)
  (let ((tree (org-element-parse-buffer)))
    (org-element-map tree
        '(code comment comment-block example-block fixed-width keyword link
               node-property plain-text verbatim)
      #'(lambda (obj)
          (cl-case (org-element-type obj)
            ((code comment comment-block example-block fixed-width keyword
                   node-property verbatim)
             (let ((value (org-element-property :value obj)))
               (org-element-put-property
                obj :value (replace-regexp-in-string "[[:alnum:]]" "x" value))))
            (link
             (unless (string= (org-element-property :type obj) "radio")
               (org-element-put-property obj :raw-link "http://orgmode.org")))
            (plain-text
             (org-element-set-element
              obj (replace-regexp-in-string "[[:alnum:]]" "x" obj)))))
      nil nil nil t)
    (let ((buffer (get-buffer-create "*Scrambled text*")))
      (with-current-buffer buffer
        (insert (org-element-interpret-data tree))
        (goto-char (point-min)))
      (switch-to-buffer buffer))))
#+end_src

#+begin_src emacs-lisp
;; Don't pad tangled code with newlines.
(setq org-babel-tangle-pad-newline nil)

;; Use relative path names in links from tangled source back the Org file.
(setq org-babel-tangle-use-relative-file-links t)

;; How to combine blocks of the same name during tangling.
(setq org-babel-tangle-named-block-combination 'append)
#+end_src

#+begin_src emacs-lisp
;; Speed up tangling dramatically (a couple of orders of magnitude).
(setq org-babel-use-quick-and-dirty-noweb-expansion t)
                                        ; :noweb-ref feature must NOT be used!
#+end_src

#+begin_src emacs-lisp
;; Minimum number of lines for output *block* (placed in a
;; #+begin_example...#+end_example) vs. output marked as literal by
;; inserting a *colon* at the beginning of the lines.
(setq org-babel-min-lines-for-block-output 2)
#+end_src

#+begin_src emacs-lisp
;; ;; FIXME Make this the default behavior
;; ;; Grab the last line too, when selecting a subtree.
;; (org-end-of-subtree nil t)
#+end_src

#+begin_src emacs-lisp
;; Backend aware export preprocess hook.
(defun leuven--org-export-preprocess-hook ()
  "Backend-aware export preprocess hook."
  (save-excursion
    (when (eq org-export-current-backend 'latex)
      ;; ignoreheading tag for bibliographies and appendices.
      (let* ((tag "ignoreheading"))
        ;; (goto-char (point-min))
        ;; (while (re-search-forward (concat ":" tag ":") nil t)
        ;; (delete-region (point-at-bol) (point-at-eol)))
        (org-map-entries
         #'(lambda ()
             (delete-region (point-at-bol) (point-at-eol)))
         (concat ":" tag ":"))))
    (when (eq org-export-current-backend 'html)
      ;; set custom css style class based on matched tag
      (let* ((match "Qn"))
        (org-map-entries
         #'(lambda ()
             (org-set-property "HTML_CONTAINER_CLASS" "inlinetask"))
         match)))))

(add-hook 'org-export-preprocess-hook #'leuven--org-export-preprocess-hook)
#+end_src

Promote ignoreheading. Works in ASCII backend too:

#+begin_src emacs-lisp :tangle no
(defun yz/org-export-ignore-headline (backend)
  "Ignore headlines with tag `ignoreheading'."
  (save-excursion
    (let ((org-allow-promoting-top-level-subtree t))
      (org-map-entries
       #'(lambda ()
           (when (member "ignoreheading" (org-get-tags-at nil 'local))
             (org-promote-subtree)
             (delete-region (line-beginning-position) (line-end-position))))))))

(add-hook 'org-export-before-parsing-hook #'yz/org-export-ignore-headline)
#+end_src

#+begin_src emacs-lisp
(defun insert-one-equal-or-two ()
  "XXX"
  (interactive)
  (cond
   ((or (bolp) (not (looking-back "=")))
    ;; Insert just one =.
    (self-insert-command 1))
   ((save-excursion
      (backward-char)
      ;; Skip symbol backwards.
      (and (not (zerop (skip-syntax-backward "w_.")))
           (not (looking-back "="))
           (or (insert-and-inherit "=") t))))
   (t
    ;; insert == around following symbol.
    (delete-char -1)
    (unless (looking-back "=") (insert-and-inherit "="))
    (save-excursion
      (skip-syntax-forward "w_.")
      (unless (looking-at "=") (insert-and-inherit "="))))))

;; Must be in eval-after-load "org"?
;; (define-key org-mode-map (kbd "=") #'insert-one-equal-or-two)
#+end_src

Export the current subtree into an email body, using *properties* to populate
the mail message:

- ~MAIL_SUBJECT~ or subtree heading -> "Subject"
- ~MAIL_TO~ -> "To"
- ~MAIL_CC~ -> "Cc
- ~MAIL_BCC~ -> "BCc"
- ~MAIL_FMT~ -> determines the format of the email (e.g., ~org~ by default, ~ascii~
  or ~html~)

XXX org-mime missing

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (message "[... Org Mime]")

  ;; Using Org mode to send buffer/subtree per mail.
  (try-require 'org-mime))

(with-eval-after-load "org-mime"

  (add-hook 'org-mode-hook
            #'(lambda ()
                (local-set-key (kbd "C-c m") #'org-mime-subtree)))

  (defun leuven-mail-subtree ()
    "XXX"
    (interactive)
    (org-agenda-goto)
    (org-mime-subtree))

  (add-hook 'org-agenda-mode-hook
            #'(lambda ()
                (local-set-key (kbd "C-c m") #'leuven-mail-subtree)))

  ;; Add a `mail_composed' property with the current time when
  ;; `org-mime-subtree' is called.
  (add-hook 'org-mime-send-subtree-hook
            #'(lambda ()
                (org-entry-put (point) "mail_composed" (current-time-string)))))
#+end_src

* A.3 Adding hyperlink types

For more flexibility, you can use a URL-like syntax which could then export
conditionally on the output format.

See http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-10-3

#+begin_src emacs-lisp
;;** A.3 (info "(org)Adding hyperlink types")

;; (with-eval-after-load "org"
;;   (message "[... Org Adding hyperlink types]")
;;
;;   ;; Define a new link type (`latex') whose path argument can hold the name of
;;   ;; any LaTeX command.
;;   (org-link-set-parameters
;;    "latex" nil
;;    #'(lambda (path desc format)
;;        (cond
;;         ((eq format 'html)
;;          (format "<span class=\"%s\">%s</span>" path desc))
;;         ((eq format 'latex)
;;          (format "\\%s{%s}" path desc)))))
;;
;;   ;; Add background color by using custom links like [[bgcolor:red][Warning!]].
;;   (org-link-set-parameters
;;     "bgcolor" nil
;;     #'(lambda (path desc format)
;;         (cond
;;          ((eq format 'html)
;;           (format "<span style=\"background-color:%s;\">%s</span>" path desc))
;;          ((eq format 'latex)
;;           (format "\\colorbox{%s}{%s}" path desc))
;;          (t
;;           (format "BGCOLOR LINK (%s): {%s}{%s}" format path desc))))))
#+end_src

* A.5 Tables and lists in arbitrary syntax

#+begin_src emacs-lisp
(defun leuven-org-send-all-buffer-tables ()
  "Export all Org tables of the LaTeX document to their corresponding LaTeX tables."
  (interactive)
  (org-table-map-tables
   #'(lambda ()
       (orgtbl-send-table 'maybe))))
#+end_src

* A.6 Dynamic blocks

#+begin_note
For some (yet) unknown reason, ~leuven--org-update-buffer-before-save~ gets added
to a local copy of the global variable ~before-save-hook~.  We now decided to add
it to the hook outside of Org (not anymore in an ~with-eval-after-load~ form).
#+end_note

#+begin_src emacs-lisp
;;** A.6 (info "(org)Dynamic blocks")

(defun leuven--org-update-buffer-before-save ()
  "Update all dynamic blocks and all tables in the buffer before save."
  (when (derived-mode-p 'org-mode)
    (message "[Update Org buffer %s]"
             (file-name-nondirectory (buffer-file-name)))
    ;; (sit-for 1.5)
    (let ((cache-long-scans nil)        ; Make `forward-line' much faster and
                                        ; thus `org-goto-line', `org-table-sum',
                                        ; etc.
          (fly-state (and (boundp 'flyspell-mode)
                          (if flyspell-mode 1 -1)))
          (buffer-undo-list buffer-undo-list)) ; For goto-chg.
      (and fly-state (flyspell-mode -1))
                                        ; Temporarily disable Flyspell to avoid
                                        ; checking the following modifications
                                        ; of the buffer.
      (measure-time "Realigned all tags" (org-align-all-tags))
      (measure-time "Updated all dynamic blocks" (org-update-all-dblocks))
      (measure-time "Re-applied formulas to all tables"
                    (org-table-iterate-buffer-tables))
      (when (file-exists-p (buffer-file-name (current-buffer)))
        (leuven-org-remove-redundant-tags))
      (and fly-state (flyspell-mode fly-state)))))

;; Make sure that all dynamic blocks and all tables are always up-to-date.
(add-hook 'before-save-hook #'leuven--org-update-buffer-before-save)
#+end_src

* Org-contrib

** Org-effectiveness

#+begin_src emacs-lisp
;; (with-eval-after-load "org"
;;   (message "[... Org Effectiveness]")
;;
;;   (try-require 'org-effectiveness)
;;   (with-eval-after-load "org-effectiveness"
;;
;;     (add-hook 'org-mode-hook
;;               #'(lambda ()
;;                 (org-effectiveness-count-todo)
;;                 (sit-for 0.2)))))
#+end_src

** Org-notmuch

Link emails from Org files.

** Google Weather
:PROPERTIES:
:CATEGORY: Weather
:END:

#+begin_example
,* Weather

%%(org-google-weather "Lille" "en-gb")
#+end_example

# Contacting host: www.google.com:80 (proxy!?)

#+begin_src emacs-lisp
;; Add weather forecast in your Org agenda.
(autoload 'org-google-weather "org-google-weather"
  "Return Org entry with the weather for LOCATION in LANGUAGE." t)

(with-eval-after-load "org-google-weather"
  ;; (try-require 'url)

  ;; Add the city.
  (setq org-google-weather-format "%C %i %c, %l°-%h°"))
#+end_src

* Feature

#+begin_src emacs-lisp
(provide 'org-leuven)
#+end_src

* File Local Variables

#+begin_src emacs-lisp
;; This is for the sake of Emacs.
;; Local Variables:
;; coding: utf-8-unix
;; flycheck-emacs-lisp-initialize-packages: t
;; flycheck-mode: nil
;; ispell-local-dictionary: "american"
;; End:

;;; org-leuven.el ends here
#+end_src

# org-leuven.txt ends here
