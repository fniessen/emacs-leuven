# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Tasks

- [ ] https://www.jetbrains.com/help/rider/Navigation_and_Search__Navigating_Between_To_do_Items.html
  (Emacs, Dev, TODO Lists)
- [ ] http://www.jetbrains.com/idea/webhelp/highlighting-usages.html (Emacs,
  Dev, Search for usages)
- [ ] http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/

** TODO Install format-all for Emacs

https://github.com/emacsmirror/format-all

** TODO Add Imenu regexp for AXVW files

** TODO Check out features of IntelliJ IDEA

https://www.jetbrains.com/help/idea/2016.1/intellij-idea-editor.html (bookmarks,
breakpoints, syntax highlighting, code completion, zooming, folding code blocks,
macros, highlighted TODO items, code analysis, intention actions, intelligent
and fast navigation, etc.)

- https://dzone.com/articles/why-idea-better-eclipse
  Auto-complete, debugging, refactoring, how to...

- https://www.catalysts.cc/wissenswertes/intellij-idea-and-eclipse-shortcuts/

** TODO How does package-autoremove decide which packages to remove?

http://emacs.stackexchange.com/questions/18253/how-does-package-autoremove-decide-which-packages-to-remove

** TODO Port old advices to Emacs 24.4+

https://www.gnu.org/software/emacs/manual/html_node/elisp/Porting-old-advices.html#Porting-old-advices

** TODO Publish doc of Emacs-Leuven

Use my Org html theme!

Others did already:
- http://coldnew.github.io/coldnew-emacs/
- http://spacemacs.org/doc/DOCUMENTATION.html

Or put in on RTD:
- http://emacs.readthedocs.io/en/latest/completion_and_selection.html (via =docs=
  subdirectory)

** TODO Use the bug hunter

The Bug Hunter https://travis-ci.org/Malabarba/elisp-bug-hunter.svg?branch=master

Automatically debug and bisect your init (=.emacs=) file!

#+begin_src emacs-lisp
(progn (find-file "~/test.java")
       (require 'helm-imenu)
       (helm-imenu)
       nil)
#+end_src

** TODO Check out other configs

https://alhassy.github.io/init/

** TODO Re: Goto last edit location -- explanation provided!!! (from l. david andersson)
[2015-06-24 Wed 18:53]

#+begin_verse
> In fact, there is an easy solution, provided by Kevin Rodgers himself,
> to whom I wrote after you, as I got the same problem with his package.
>
> His solution was to add *one* line in my function that's run before
> saving the buffer:
>
> --8<---------------cut here---------------start------------->8---
>   (defun leuven-org-update-buffer ()
>     "Update all dynamic blocks and all tables in the buffer."
>     (interactive)
>     (when (derived-mode-p 'org-mode)
>       (let ((buffer-undo-list buffer-undo-list)) ; For goto-chg <<<<<<<<<
>         (org-update-all-dblocks)
>         (org-table-iterate-buffer-tables))))
>
>   ;; Make sure that all dynamic blocks and all tables are always
> up-to-date.
>   (add-hook 'before-save-hook 'leuven-org-update-buffer)
> --8<---------------cut here---------------end--------------->8---
>
> And that works perfectly!  Simple (not for me!?) and effective...

Sorry, I think that is wrong. It is more important that code is pretty
than that it works. This only *appears* to work, most of the time.

What it does is, it *forgets* the edits done by the org package when a
file is saved. The info in the buffer-undo-list may not be in sync with
the content of the buffer before a certain time point. The time point is
*not* the save operation and the edits it may do, but the specific edits
before the save, that the save operation restores. I.e. (assuming the save
removes spaces at end of line) the edit by you (or another package) that
inserts the spaces. Undoing beyond those inserts may go wrong.

I have not tried this, but you might want to:

- Make a temporary copy of an .org file, that you don't mind being corrupt.
- Open it in emacs.
- Make a small edit in one line, say type "foo" in line 10.
- Add space at end of line in some line above, say line 5.
- Save the file. (I assume the space at the end of a line will be removed)
- Make a small edit in one line, say type "bar" in line 11.
- Undo (this will undo the edit in line 11)
- Undo again (this will undo the edit in line 10, but in the wrong position)

Did it misbehave as I expect, or did it work perfectly?

Disclaimer

I do not see "delete-trailing-whitespace" in the current clip. Earlier it
was in the save hook and it was that function that did the edits during
the save operation. In my test case I assume it is still present. If it is
no longer present (and the org functions in the hook does not edit
anything) it may work perfectly! (But then, you should have no problem
with goto-chg even without Kevin Rodgers' patch.)

/David Andersson
#+end_verse

From [[gnus:INBOX#57408.213.114.113.54.1435164814.squirrel@alexander.fl-net.se][Email from l. david andersson: Re: Goto last edit location --]]

** TODO Error in post-command-hook (hl-tags-update): (void-function sgml-get-context)

Ouvrir =client-bldgops-cost-report.axvw= au dÃ©marrage d'Emacs...

** TODO Improve writing of time-substract

#+begin_src emacs-lisp
(let ((time (current-time)))
  (org-id-find "zangwill.nick_2014:aesthetic.judgment")
  (format "%ss" (time-to-seconds (time-subtract (current-time) time))))
#+end_src

** TODO Profile code performance

In case this helps anyone, I've found this code makes profiling a lot
easier.  It automatically instruments the desired functions, runs the
code you want to test, removes the instrumentation, and presents the
results.

#+BEGIN_SRC elisp
  (defmacro profile-org (times &rest body)
    `(let (output)
       (dolist (p '("org-"))            ; Symbol prefixes to instrument.
         (elp-instrument-package p))
       (dotimes (x ,times)
         ,@body)
       (elp-results)
       (elp-restore-all)
       (point-min)
       (forward-line 20)
       (delete-region (point) (point-max))
       (setq output (buffer-substring-no-properties (point-min) (point-max)))
       (kill-buffer)
       (delete-window)
       output))

  ;; Used like this:
  (profile-org 10
    (org-table-next-field)
    (org-table-align))
#+END_SRC

** TODO Update setcdr assoc constructs

: (setcdr (assoc value alist) new-value)

works pretty well (but you'll probably need to add a not-found check).

In Emacs 25:

: (setf (alist-get key alist) new-value)

even without not-found checking.

** TODO Improve documentation of navigation and search

Excellent example:
http://www.jetbrains.com/resharper/features/navigation_search.html

Other:
https://support.rstudio.com/hc/en-us/articles/200710523

** TODO Automate reporting of style errors
:PROPERTIES:
:header-args: :tangle no
:END:

Report all errors with:

#+begin_src emacs-lisp
(checkdoc-current-buffer t)
#+end_src

- Format the documentation string so that it fits in an Emacs window on an
  80-column screen. It is a good idea for most lines to be no wider than 60
  characters. The first line should not be wider than 67 characters or it will
  look bad in the output of apropos.

  You can fill the text if that looks good. However, rather than blindly filling
  the entire documentation string, you can often make it much more readable by
  choosing certain line breaks with care. Use blank lines between topics if the
  documentation string is long.

- Do not indent subsequent lines of a documentation string so that the text is
  lined up in the source code with the text of the first line. This looks nice
  in the source code, but looks bizarre when users view the documentation.

  Remember that the indentation before the starting double-quote is not part of
  the string!

** TODO Optimize startup time
:PROPERTIES:
:header-args: :tangle no
:END:

*** Context

Identify what parts of your =.emacs= take so long.  You can do this e.g. by
starting Emacs with ~emacs -q~, set up your ~load-path~, and then evaluate

#+begin_src emacs-lisp
(benchmark-run
  (require 'some-package))
#+end_src

The first number appearing in the echo area will be the time needed to run that
command.

Use autoloads, which delay the loading of the complete package until one of the
interactive functions is used.

If you want to set options which need to be evaluated after a package is loaded,
you can use ~eval-after-load~.

With ~(eval-after-load "pkg-autoloads" ...)~, you make sure that you only run code
when the package is installed/available through ~package.el~.

*** Timings from my system

After much optimization...

  $ time emacs -f kill-emacs
  real    0m0.157s
  user    0m0.140s
  sys     0m0.012s
  $ time emacs -q -f kill-emacs
  real    0m0.137s
  user    0m0.116s
  sys     0m0.016s
  $ time emacs -Q -f kill-emacs
  real    0m0.051s
  user    0m0.028s
  sys     0m0.020s

#+begin_src shell
time emacs -f kill-emacs 2>&1
#+end_src

#+begin_src shell
time emacs -q -f kill-emacs 2>&1
#+end_src

#+begin_src shell
time emacs -Q -f kill-emacs 2>&1
#+end_src

Note that your first test is going to be dramatically slower than subsequent
tests.

#+begin_note
You can use ESUP - Emacs Start Up Profiler
#+end_note

** Emacs Key Bindings for Atom Editor

https://github.com/dvorka/atom-editor-emacs-key-bindings

