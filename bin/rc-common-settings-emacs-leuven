# Hey Emacs, this is a -*- sh -*- file ...

if [[ -z "$SSH_CONNECTION" ]]; then
    # Set up Emacs-related functions and aliases.

    export EDITOR="emacsclient"
    export ALTERNATE_EDITOR="emacs"

    ec() {
        emacsclient -t -a '' "$@"
    }

    # Alias 'e' for running emacsclient in non-blocking mode.
    alias e="emacsclient -n"

    # Open a new Emacs instance in the background.
    alias bgemacs='emacs &'

    # Aliases to open Emacs using the alternate editor setting.
    # If emacsclient can't connect to an existing Emacs server, it will fall
    # back to running a new instance of Emacs.
    alias ealt="emacsclient -n --alternate-editor=emacs"
    alias ealtnw="emacsclient -n --alternate-editor='emacs -nw'"

    # Aliases for Emacs in terminal mode.
    alias enw="emacs -nw"
    alias ecnw="emacsclient -nw"

    # Open a file in an Emacs terminal frame.
    efindnw() {
        emacsclient -t -a '' --eval "(find-file \"$1\")"
    }

    # Emacsclient with frame focus and file opening.
    efind() {
        emacsclient -n -r -a '' --eval "(progn
            (select-frame-set-input-focus (selected-frame))
            (find-file \"$1\")
        )"
    }

    # Open Ediff for two files.
    eediff() {
        emacsclient -n -r -a '' --eval "(progn
            (select-frame-set-input-focus (selected-frame))
            (ediff-files \"$1\" \"$2\")
        )"
    }

    # Open VC Dir for a version-controlled directory.
    evcdir() {
        emacsclient -n -r -a '' --eval "(progn
            (select-frame-set-input-focus (selected-frame))
            (vc-dir \"$1\")
        )"
    }
else
    # Set up remote environment.
    local editors=("emacs -nw" "emacs" "nano" "code -w" "subl")
    for candidate_editor in "${editors[@]}"; do
        if command -v "${candidate_editor%% *}" &> /dev/null; then
            export EDITOR="$candidate_editor"
            alias e="$candidate_editor"
            # Use the first available editor.
            break
        fi
    done
fi

# Set VISUAL to the same value as EDITOR.
export VISUAL="$EDITOR"

# Cd to the directory of the current buffer in Emacs.
cde() {
    if ! command -v emacsclient > /dev/null 2>&1; then
        printf >&2 "Error: 'emacsclient' command not found.\n"
        printf >&2 "Please install Emacsclient and ensure the binary is in your PATH.\n"
        return 2
    fi

    if ! emacsclient -e '(server-running-p)' > /dev/null 2>&1; then
        printf >&2 "Error: Emacs server is not running.\n"
        printf >&2 "Please start the Emacs server first.\n"
        return 2
    fi

    local dir
    dir="$(emacsclient -e '(with-current-buffer
                               (window-buffer (selected-window))
                             (replace-regexp-in-string "^~" (getenv "HOME")
                                default-directory))' | tr -d '"')"

    if [[ ! -d "$dir" ]]; then
        printf >&2 "Error: directory not found: %s\n" "$dir"
        return 2
    fi

    cd "$dir"
    # The change in working directory will persist after the function has
    # completed.
}

# Retrieve and execute the last command from shell history, assuming it outputs
# a list of files, then open the last file in Emacs for inspection.
elf() {
    # Retrieve the last command from the history file.
    local last_command
    last_command=$(HISTTIMEFORMAT="" history 2 \
                       | sed -n 's/^[[:space:]]*[0-9]*[[:space:]]*//p;q')

    # Check if the last command is empty.
    if [[ -z "$last_command" ]]; then
        printf >&2 "No command found in the shell history.\n"
        return 2
    fi

    # Run the last command and capture its output, supporting piping or other
    # advanced shell features.
    local command_output
    command_output=$(eval "$last_command")

    # Extract the last line (assuming it's a list of files).
    local last_file
    last_file=$(printf "%s" "$command_output" | tail -n 1 \
                    | sed -E 's/\x1b\[([0-9]{1,3}(;[0-9]{1,3})*)?[mK]//g')

    # Debugging information.
    printf "Edit last file: %s\n" "$last_file"

    # Return if the last line is empty.
    if [[ -z "$last_file" ]]; then
        printf >&2 "No output from the last command or no files found.\n"
        return 2
    fi

    # Open the last file in Emacs using emacsclient.
    emacsclient -n "$last_file"
}

# Retrieve and execute the last command from shell history, assuming it outputs
# a list of files, then open the first file in Emacs for inspection.
eff() {
    # Retrieve the last command from the history file.
    local last_command
    last_command=$(HISTTIMEFORMAT="" history 2 \
                       | sed -n 's/^[[:space:]]*[0-9]*[[:space:]]*//p;q')

    # Check if the last command is empty.
    if [[ -z "$last_command" ]]; then
        printf >&2 "No command found in the shell history.\n"
        return 2
    fi

    # Run the last command and capture its output, supporting piping or other
    # advanced shell features.
    local command_output
    command_output=$(eval "$last_command")

    # Extract the first line (assuming it's a list of files).
    local first_file
    first_file=$(printf "%s" "$command_output" | head -n 1 \
                    | sed -E 's/\x1b\[([0-9]{1,3}(;[0-9]{1,3})*)?[mK]//g')

    # Debugging information.
    printf "Edit first file: %s\n" "$first_file"

    # Return if the first line is empty.
    if [[ -z "$first_file" ]]; then
        printf >&2 "No output from the last command or no files found.\n"
        return 2
    fi

    # Open the first file in Emacs using emacsclient.
    emacsclient -n "$first_file"
}

# Retrieve and execute the last command from shell history, then open its output
# in Emacs for inspection.
elo() {
    # Retrieve the last command from the history file.
    local last_command
    last_command=$(HISTTIMEFORMAT="" history 2 \
                       | sed -n 's/^[[:space:]]*[0-9]*[[:space:]]*//p;q')

    # Check if the last command is empty.
    if [[ -z "$last_command" ]]; then
        printf >&2 "No command found in the shell history.\n"
        return 2
    fi

    # Run the last command and capture its output, supporting piping or other
    # advanced shell features.
    local command_output
    command_output=$(eval "$last_command")

    # Debugging information.
    printf "Edit output of last command: %s\n" "$last_command"

    # Return if the last line is empty.
    if [[ -z "$command_output" ]]; then
        printf >&2 "No output from the last command.\n"
        return 2
    fi

    # Open Emacs and paste the output of the last command into a buffer named
    # "*Shell Command Output*".
    emacsclient -e "(with-current-buffer
                      (get-buffer-create \"*Shell Command Output*\")
                      (insert \"$command_output\"))"
}
